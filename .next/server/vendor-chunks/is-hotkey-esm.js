"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/is-hotkey-esm";
exports.ids = ["vendor-chunks/is-hotkey-esm"];
exports.modules = {

/***/ "(ssr)/./node_modules/is-hotkey-esm/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/is-hotkey-esm/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareHotkey: () => (/* binding */ compareHotkey),\n/* harmony export */   isCodeHotkey: () => (/* binding */ isCodeHotkey),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   isKeyHotkey: () => (/* binding */ isKeyHotkey),\n/* harmony export */   parseHotkey: () => (/* binding */ parseHotkey),\n/* harmony export */   toKeyCode: () => (/* binding */ toKeyCode),\n/* harmony export */   toKeyName: () => (/* binding */ toKeyName)\n/* harmony export */ });\nconst IS_MAC =  false && 0, MODIFIERS = {\n    alt: \"altKey\",\n    control: \"ctrlKey\",\n    meta: \"metaKey\",\n    shift: \"shiftKey\"\n}, ALIASES = {\n    add: \"+\",\n    break: \"pause\",\n    cmd: \"meta\",\n    command: \"meta\",\n    ctl: \"control\",\n    ctrl: \"control\",\n    del: \"delete\",\n    down: \"arrowdown\",\n    esc: \"escape\",\n    ins: \"insert\",\n    left: \"arrowleft\",\n    mod: IS_MAC ? \"meta\" : \"control\",\n    opt: \"alt\",\n    option: \"alt\",\n    return: \"enter\",\n    right: \"arrowright\",\n    space: \" \",\n    spacebar: \" \",\n    up: \"arrowup\",\n    win: \"meta\",\n    windows: \"meta\"\n}, CODES = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    control: 17,\n    alt: 18,\n    pause: 19,\n    capslock: 20,\n    escape: 27,\n    \" \": 32,\n    pageup: 33,\n    pagedown: 34,\n    end: 35,\n    home: 36,\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    insert: 45,\n    delete: 46,\n    meta: 91,\n    numlock: 144,\n    scrolllock: 145,\n    \";\": 186,\n    \"=\": 187,\n    \",\": 188,\n    \"-\": 189,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"[\": 219,\n    \"\\\\\": 220,\n    \"]\": 221,\n    \"'\": 222\n};\nfor(var f = 1; f < 20; f++)CODES[\"f\" + f] = 111 + f;\nfunction isHotkey(hotkey, options, event) {\n    options && !(\"byKey\" in options) && (event = options, options = null), Array.isArray(hotkey) || (hotkey = [\n        hotkey\n    ]);\n    const array = hotkey.map((string)=>parseHotkey(string, options)), check = (e)=>array.some((object)=>compareHotkey(object, e));\n    return event == null ? check : check(event);\n}\nfunction isCodeHotkey(hotkey, event) {\n    return isHotkey(hotkey, event);\n}\nfunction isKeyHotkey(hotkey, event) {\n    return isHotkey(hotkey, {\n        byKey: !0\n    }, event);\n}\nfunction parseHotkey(hotkey, options) {\n    const byKey = options && options.byKey, ret = {};\n    hotkey = hotkey.replace(\"++\", \"+add\");\n    const values = hotkey.split(\"+\"), { length } = values;\n    for(const k in MODIFIERS)ret[MODIFIERS[k]] = !1;\n    for (let value of values){\n        const optional = value.endsWith(\"?\") && value.length > 1;\n        optional && (value = value.slice(0, -1));\n        const name = toKeyName(value), modifier = MODIFIERS[name];\n        if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name]) throw new TypeError(`Unknown modifier: \"${value}\"`);\n        (length === 1 || !modifier) && (byKey ? ret.key = name : ret.which = toKeyCode(value)), modifier && (ret[modifier] = optional ? null : !0);\n    }\n    return ret;\n}\nfunction compareHotkey(object, event) {\n    for(const key in object){\n        const expected = object[key];\n        let actual;\n        if (expected != null && (key === \"key\" && event.key != null ? actual = event.key.toLowerCase() : key === \"which\" ? actual = expected === 91 && event.which === 93 ? 91 : event.which : actual = event[key], !(actual == null && expected === !1) && actual !== expected)) return !1;\n    }\n    return !0;\n}\nfunction toKeyCode(name) {\n    return name = toKeyName(name), CODES[name] || name.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n    return name = name.toLowerCase(), name = ALIASES[name] || name, name;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/is-hotkey-esm/dist/index.js\n");

/***/ })

};
;