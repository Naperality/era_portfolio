"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry-internal";
exports.ids = ["vendor-chunks/@sentry-internal"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsT0FBT0MscUJBQXFCLGVBQWVBO0FBRXpDLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcz9iOWVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydCB7IERFQlVHX0JVSUxEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsIl9fU0VOVFJZX0RFQlVHX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCachedImplementation: () => (/* binding */ clearCachedImplementation),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   getNativeImplementation: () => (/* binding */ getNativeImplementation),\n/* harmony export */   setTimeout: () => (/* binding */ setTimeout)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\n\n/**\n * We generally want to use window.fetch / window.setTimeout.\n * However, in some cases this may be wrapped (e.g. by Zone.js for Angular),\n * so we try to get an unpatched version of this from a sandboxed iframe.\n */ const cachedImplementations = {};\n/**\n * Get the native implementation of a browser function.\n *\n * This can be used to ensure we get an unwrapped version of a function, in cases where a wrapped function can lead to problems.\n *\n * The following methods can be retrieved:\n * - `setTimeout`: This can be wrapped by e.g. Angular, causing change detection to be triggered.\n * - `fetch`: This can be wrapped by e.g. ad-blockers, causing an infinite loop when a request is blocked.\n */ function getNativeImplementation(name) {\n    const cached = cachedImplementations[name];\n    if (cached) {\n        return cached;\n    }\n    let impl = _types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW[name];\n    // Fast path to avoid DOM I/O\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.isNativeFunction)(impl)) {\n        return cachedImplementations[name] = impl.bind(_types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW);\n    }\n    const document = _types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW.document;\n    // eslint-disable-next-line deprecation/deprecation\n    if (document && typeof document.createElement === \"function\") {\n        try {\n            const sandbox = document.createElement(\"iframe\");\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            const contentWindow = sandbox.contentWindow;\n            if (contentWindow && contentWindow[name]) {\n                impl = contentWindow[name];\n            }\n            document.head.removeChild(sandbox);\n        } catch (e) {\n            // Could not create sandbox iframe, just use window.xxx\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_3__.logger.warn(`Could not create sandbox iframe for ${name} check, bailing to window.${name}: `, e);\n        }\n    }\n    // Sanity check: This _should_ not happen, but if it does, we just skip caching...\n    // This can happen e.g. in tests where fetch may not be available in the env, or similar.\n    if (!impl) {\n        return impl;\n    }\n    return cachedImplementations[name] = impl.bind(_types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW);\n}\n/** Clear a cached implementation. */ function clearCachedImplementation(name) {\n    cachedImplementations[name] = undefined;\n}\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */ function fetch(...rest) {\n    return getNativeImplementation(\"fetch\")(...rest);\n}\n/**\n * Get an unwrapped `setTimeout` method.\n * This ensures that even if e.g. Angular wraps `setTimeout`, we get the native implementation,\n * avoiding triggering change detection.\n */ function setTimeout(...rest) {\n    return getNativeImplementation(\"setTimeout\")(...rest);\n}\n //# sourceMappingURL=getNativeImplementation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClickKeypressInstrumentationHandler: () => (/* binding */ addClickKeypressInstrumentationHandler),\n/* harmony export */   instrumentDOM: () => (/* binding */ instrumentDOM)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\nconst DEBOUNCE_DURATION = 1000;\nlet debounceTimerID;\nlet lastCapturedEventType;\nlet lastCapturedEventTargetId;\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addClickKeypressInstrumentationHandler(handler) {\n    const type = \"dom\";\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentDOM);\n}\n/** Exported for tests only. */ function instrumentDOM() {\n    if (!_types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document) {\n        return;\n    }\n    // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n    // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n    // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n    const triggerDOMHandler = _sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers.bind(null, \"dom\");\n    const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n    _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document.addEventListener(\"click\", globalDOMEventHandler, false);\n    _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document.addEventListener(\"keypress\", globalDOMEventHandler, false);\n    // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n    // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n    // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n    // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n    // guaranteed to fire at least once.)\n    [\n        \"EventTarget\",\n        \"Node\"\n    ].forEach((target)=>{\n        const globalObject = _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW;\n        const targetObj = globalObject[target];\n        const proto = targetObj && targetObj.prototype;\n        // eslint-disable-next-line no-prototype-builtins\n        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty(\"addEventListener\")) {\n            return;\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.fill)(proto, \"addEventListener\", function(originalAddEventListener) {\n            return function(type, listener, options) {\n                if (type === \"click\" || type == \"keypress\") {\n                    try {\n                        const handlers = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {};\n                        const handlerForType = handlers[type] = handlers[type] || {\n                            refCount: 0\n                        };\n                        if (!handlerForType.handler) {\n                            const handler = makeDOMEventHandler(triggerDOMHandler);\n                            handlerForType.handler = handler;\n                            originalAddEventListener.call(this, type, handler, options);\n                        }\n                        handlerForType.refCount++;\n                    } catch (e) {\n                    // Accessing dom properties is always fragile.\n                    // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n                    }\n                }\n                return originalAddEventListener.call(this, type, listener, options);\n            };\n        });\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.fill)(proto, \"removeEventListener\", function(originalRemoveEventListener) {\n            return function(type, listener, options) {\n                if (type === \"click\" || type == \"keypress\") {\n                    try {\n                        const handlers = this.__sentry_instrumentation_handlers__ || {};\n                        const handlerForType = handlers[type];\n                        if (handlerForType) {\n                            handlerForType.refCount--;\n                            // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                            if (handlerForType.refCount <= 0) {\n                                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                                handlerForType.handler = undefined;\n                                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                            }\n                            // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                            if (Object.keys(handlers).length === 0) {\n                                delete this.__sentry_instrumentation_handlers__;\n                            }\n                        }\n                    } catch (e) {\n                    // Accessing dom properties is always fragile.\n                    // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n                    }\n                }\n                return originalRemoveEventListener.call(this, type, listener, options);\n            };\n        });\n    });\n}\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */ function isSimilarToLastCapturedEvent(event) {\n    // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n    if (event.type !== lastCapturedEventType) {\n        return false;\n    }\n    try {\n        // If both events have the same type, it's still possible that actions were performed on different targets.\n        // e.g. 2 clicks on different buttons.\n        if (!event.target || event.target._sentryId !== lastCapturedEventTargetId) {\n            return false;\n        }\n    } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    }\n    // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n    // to which an event listener was attached), we treat them as the same action, as we want to capture\n    // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n    return true;\n}\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */ function shouldSkipDOMEvent(eventType, target) {\n    // We are only interested in filtering `keypress` events for now.\n    if (eventType !== \"keypress\") {\n        return false;\n    }\n    if (!target || !target.tagName) {\n        return true;\n    }\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === \"INPUT\" || target.tagName === \"TEXTAREA\" || target.isContentEditable) {\n        return false;\n    }\n    return true;\n}\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */ function makeDOMEventHandler(handler, globalListener = false) {\n    return (event)=>{\n        // It's possible this handler might trigger multiple times for the same\n        // event (e.g. event propagation through node ancestors).\n        // Ignore if we've already captured that event.\n        if (!event || event[\"_sentryCaptured\"]) {\n            return;\n        }\n        const target = getEventTarget(event);\n        // We always want to skip _some_ events.\n        if (shouldSkipDOMEvent(event.type, target)) {\n            return;\n        }\n        // Mark event as \"seen\"\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(event, \"_sentryCaptured\", true);\n        if (target && !target._sentryId) {\n            // Add UUID to event target so we can identify if\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(target, \"_sentryId\", (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.uuid4)());\n        }\n        const name = event.type === \"keypress\" ? \"input\" : event.type;\n        // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n        // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n        // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n        if (!isSimilarToLastCapturedEvent(event)) {\n            const handlerData = {\n                event,\n                name,\n                global: globalListener\n            };\n            handler(handlerData);\n            lastCapturedEventType = event.type;\n            lastCapturedEventTargetId = target ? target._sentryId : undefined;\n        }\n        // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n        clearTimeout(debounceTimerID);\n        debounceTimerID = _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.setTimeout(()=>{\n            lastCapturedEventTargetId = undefined;\n            lastCapturedEventType = undefined;\n        }, DEBOUNCE_DURATION);\n    };\n}\nfunction getEventTarget(event) {\n    try {\n        return event.target;\n    } catch (e) {\n        // just accessing `target` property can throw an exception in some rare circumstances\n        // see: https://github.com/getsentry/sentry-javascript/issues/838\n        return null;\n    }\n}\n //# sourceMappingURL=dom.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHistoryInstrumentationHandler: () => (/* binding */ addHistoryInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/vendor/supportsHistory.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\nlet lastHref;\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addHistoryInstrumentationHandler(handler) {\n    const type = \"history\";\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentHistory);\n}\nfunction instrumentHistory() {\n    if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.supportsHistory)()) {\n        return;\n    }\n    const oldOnPopState = _types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.onpopstate;\n    _types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.onpopstate = function(...args) {\n        const to = _types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.location.href;\n        // keep track of the current URL state, as we always receive only the updated state\n        const from = lastHref;\n        lastHref = to;\n        const handlerData = {\n            from,\n            to\n        };\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"history\", handlerData);\n        if (oldOnPopState) {\n            // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n            // https://github.com/getsentry/sentry-javascript/issues/3344\n            // https://github.com/bugsnag/bugsnag-js/issues/469\n            try {\n                return oldOnPopState.apply(this, args);\n            } catch (_oO) {\n            // no-empty\n            }\n        }\n    };\n    function historyReplacementFunction(originalHistoryFunction) {\n        return function(...args) {\n            const url = args.length > 2 ? args[2] : undefined;\n            if (url) {\n                // coerce to string (this is what pushState does)\n                const from = lastHref;\n                const to = String(url);\n                // keep track of the current URL state, as we always receive only the updated state\n                lastHref = to;\n                const handlerData = {\n                    from,\n                    to\n                };\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"history\", handlerData);\n            }\n            return originalHistoryFunction.apply(this, args);\n        };\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.fill)(_types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.history, \"pushState\", historyReplacementFunction);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.fill)(_types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.history, \"replaceState\", historyReplacementFunction);\n}\n //# sourceMappingURL=history.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS9pbnN0cnVtZW50L2hpc3RvcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUc7QUFDOUQ7QUFFckMsSUFBSU07QUFFSjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsaUNBQWlDQyxPQUFPO0lBQy9DLE1BQU1DLE9BQU87SUFDYlQsd0RBQVVBLENBQUNTLE1BQU1EO0lBQ2pCUCw2REFBZUEsQ0FBQ1EsTUFBTUM7QUFDeEI7QUFFQSxTQUFTQTtJQUNQLElBQUksQ0FBQ1IsNkRBQWVBLElBQUk7UUFDdEI7SUFDRjtJQUVBLE1BQU1TLGdCQUFnQk4sNkNBQU1BLENBQUNPLFVBQVU7SUFDdkNQLDZDQUFNQSxDQUFDTyxVQUFVLEdBQUcsU0FBVyxHQUFHQyxJQUFJO1FBQ3BDLE1BQU1DLEtBQUtULDZDQUFNQSxDQUFDVSxRQUFRLENBQUNDLElBQUk7UUFDL0IsbUZBQW1GO1FBQ25GLE1BQU1DLE9BQU9YO1FBQ2JBLFdBQVdRO1FBQ1gsTUFBTUksY0FBYztZQUFFRDtZQUFNSDtRQUFHO1FBQy9CWCw2REFBZUEsQ0FBQyxXQUFXZTtRQUMzQixJQUFJUCxlQUFlO1lBQ2pCLHlGQUF5RjtZQUN6Riw2REFBNkQ7WUFDN0QsbURBQW1EO1lBQ25ELElBQUk7Z0JBQ0YsT0FBT0EsY0FBY1EsS0FBSyxDQUFDLElBQUksRUFBRU47WUFDbkMsRUFBRSxPQUFPTyxLQUFLO1lBQ1osV0FBVztZQUNiO1FBQ0Y7SUFDRjtJQUVBLFNBQVNDLDJCQUEyQkMsdUJBQXVCO1FBQ3pELE9BQU8sU0FBVyxHQUFHVCxJQUFJO1lBQ3ZCLE1BQU1VLE1BQU1WLEtBQUtXLE1BQU0sR0FBRyxJQUFJWCxJQUFJLENBQUMsRUFBRSxHQUFHWTtZQUN4QyxJQUFJRixLQUFLO2dCQUNQLGlEQUFpRDtnQkFDakQsTUFBTU4sT0FBT1g7Z0JBQ2IsTUFBTVEsS0FBS1ksT0FBT0g7Z0JBQ2xCLG1GQUFtRjtnQkFDbkZqQixXQUFXUTtnQkFDWCxNQUFNSSxjQUFjO29CQUFFRDtvQkFBTUg7Z0JBQUc7Z0JBQy9CWCw2REFBZUEsQ0FBQyxXQUFXZTtZQUM3QjtZQUNBLE9BQU9JLHdCQUF3QkgsS0FBSyxDQUFDLElBQUksRUFBRU47UUFDN0M7SUFDRjtJQUVBVCxrREFBSUEsQ0FBQ0MsNkNBQU1BLENBQUNzQixPQUFPLEVBQUUsYUFBYU47SUFDbENqQixrREFBSUEsQ0FBQ0MsNkNBQU1BLENBQUNzQixPQUFPLEVBQUUsZ0JBQWdCTjtBQUN2QztBQUU0QyxDQUM1QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvYnJvd3Nlci11dGlscy9idWlsZC9lc20vaW5zdHJ1bWVudC9oaXN0b3J5LmpzP2Q2OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkSGFuZGxlciwgbWF5YmVJbnN0cnVtZW50LCBzdXBwb3J0c0hpc3RvcnksIHRyaWdnZXJIYW5kbGVycywgZmlsbCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICcuLi90eXBlcy5qcyc7XG5cbmxldCBsYXN0SHJlZjtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYSBmZXRjaCByZXF1ZXN0IGhhcHBlbnMuXG4gKiBUaGUgaGFuZGxlciBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSB3aGVuIHRoZSByZXF1ZXN0IHN0YXJ0cyBhbmQgb25jZSB3aGVuIGl0IGVuZHMsXG4gKiB3aGljaCBjYW4gYmUgaWRlbnRpZmllZCBieSBjaGVja2luZyBpZiBpdCBoYXMgYW4gYGVuZFRpbWVzdGFtcGAuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkSGlzdG9yeUluc3RydW1lbnRhdGlvbkhhbmRsZXIoaGFuZGxlcikge1xuICBjb25zdCB0eXBlID0gJ2hpc3RvcnknO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEhpc3RvcnkpO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50SGlzdG9yeSgpIHtcbiAgaWYgKCFzdXBwb3J0c0hpc3RvcnkoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9sZE9uUG9wU3RhdGUgPSBXSU5ET1cub25wb3BzdGF0ZTtcbiAgV0lORE9XLm9ucG9wc3RhdGUgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0byA9IFdJTkRPVy5sb2NhdGlvbi5ocmVmO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgVVJMIHN0YXRlLCBhcyB3ZSBhbHdheXMgcmVjZWl2ZSBvbmx5IHRoZSB1cGRhdGVkIHN0YXRlXG4gICAgY29uc3QgZnJvbSA9IGxhc3RIcmVmO1xuICAgIGxhc3RIcmVmID0gdG87XG4gICAgY29uc3QgaGFuZGxlckRhdGEgPSB7IGZyb20sIHRvIH07XG4gICAgdHJpZ2dlckhhbmRsZXJzKCdoaXN0b3J5JywgaGFuZGxlckRhdGEpO1xuICAgIGlmIChvbGRPblBvcFN0YXRlKSB7XG4gICAgICAvLyBBcHBhcmVudGx5IHRoaXMgY2FuIHRocm93IGluIEZpcmVmb3ggd2hlbiBpbmNvcnJlY3RseSBpbXBsZW1lbnRlZCBwbHVnaW4gaXMgaW5zdGFsbGVkLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMzM0NFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2J1Z3NuYWcvYnVnc25hZy1qcy9pc3N1ZXMvNDY5XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gb2xkT25Qb3BTdGF0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbihvcmlnaW5hbEhpc3RvcnlGdW5jdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IHVybCA9IGFyZ3MubGVuZ3RoID4gMiA/IGFyZ3NbMl0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIC8vIGNvZXJjZSB0byBzdHJpbmcgKHRoaXMgaXMgd2hhdCBwdXNoU3RhdGUgZG9lcylcbiAgICAgICAgY29uc3QgZnJvbSA9IGxhc3RIcmVmO1xuICAgICAgICBjb25zdCB0byA9IFN0cmluZyh1cmwpO1xuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IFVSTCBzdGF0ZSwgYXMgd2UgYWx3YXlzIHJlY2VpdmUgb25seSB0aGUgdXBkYXRlZCBzdGF0ZVxuICAgICAgICBsYXN0SHJlZiA9IHRvO1xuICAgICAgICBjb25zdCBoYW5kbGVyRGF0YSA9IHsgZnJvbSwgdG8gfTtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdoaXN0b3J5JywgaGFuZGxlckRhdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICBmaWxsKFdJTkRPVy5oaXN0b3J5LCAncHVzaFN0YXRlJywgaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24pO1xuICBmaWxsKFdJTkRPVy5oaXN0b3J5LCAncmVwbGFjZVN0YXRlJywgaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24pO1xufVxuXG5leHBvcnQgeyBhZGRIaXN0b3J5SW5zdHJ1bWVudGF0aW9uSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGlzdG9yeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJhZGRIYW5kbGVyIiwibWF5YmVJbnN0cnVtZW50Iiwic3VwcG9ydHNIaXN0b3J5IiwidHJpZ2dlckhhbmRsZXJzIiwiZmlsbCIsIldJTkRPVyIsImxhc3RIcmVmIiwiYWRkSGlzdG9yeUluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJoYW5kbGVyIiwidHlwZSIsImluc3RydW1lbnRIaXN0b3J5Iiwib2xkT25Qb3BTdGF0ZSIsIm9ucG9wc3RhdGUiLCJhcmdzIiwidG8iLCJsb2NhdGlvbiIsImhyZWYiLCJmcm9tIiwiaGFuZGxlckRhdGEiLCJhcHBseSIsIl9vTyIsImhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uIiwib3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24iLCJ1cmwiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJoaXN0b3J5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SENTRY_XHR_DATA_KEY: () => (/* binding */ SENTRY_XHR_DATA_KEY),\n/* harmony export */   addXhrInstrumentationHandler: () => (/* binding */ addXhrInstrumentationHandler),\n/* harmony export */   instrumentXHR: () => (/* binding */ instrumentXHR)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\nconst SENTRY_XHR_DATA_KEY = \"__sentry_xhr_v3__\";\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addXhrInstrumentationHandler(handler) {\n    const type = \"xhr\";\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentXHR);\n}\n/** Exported only for tests. */ function instrumentXHR() {\n    if (!_types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.XMLHttpRequest) {\n        return;\n    }\n    const xhrproto = XMLHttpRequest.prototype;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    xhrproto.open = new Proxy(xhrproto.open, {\n        apply (originalOpen, xhrOpenThisArg, xhrOpenArgArray) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your XHR call did not\n            //       have a stack trace. If you are using HttpClient integration,\n            //       this is the expected behavior, as we are using this virtual error to capture\n            //       the location of your XHR call, and group your HttpClient events accordingly.\n            const virtualError = new Error();\n            const startTimestamp = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)() * 1000;\n            // open() should always be called with two or more arguments\n            // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n            const method = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(xhrOpenArgArray[0]) ? xhrOpenArgArray[0].toUpperCase() : undefined;\n            const url = parseUrl(xhrOpenArgArray[1]);\n            if (!method || !url) {\n                return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);\n            }\n            xhrOpenThisArg[SENTRY_XHR_DATA_KEY] = {\n                method,\n                url,\n                request_headers: {}\n            };\n            // if Sentry key appears in URL, don't capture it as a request\n            if (method === \"POST\" && url.match(/sentry_key/)) {\n                xhrOpenThisArg.__sentry_own_request__ = true;\n            }\n            const onreadystatechangeHandler = ()=>{\n                // For whatever reason, this is not the same instance here as from the outer method\n                const xhrInfo = xhrOpenThisArg[SENTRY_XHR_DATA_KEY];\n                if (!xhrInfo) {\n                    return;\n                }\n                if (xhrOpenThisArg.readyState === 4) {\n                    try {\n                        // touching statusCode in some platforms throws\n                        // an exception\n                        xhrInfo.status_code = xhrOpenThisArg.status;\n                    } catch (e) {\n                    /* do nothing */ }\n                    const handlerData = {\n                        endTimestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)() * 1000,\n                        startTimestamp,\n                        xhr: xhrOpenThisArg,\n                        virtualError\n                    };\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"xhr\", handlerData);\n                }\n            };\n            if (\"onreadystatechange\" in xhrOpenThisArg && typeof xhrOpenThisArg.onreadystatechange === \"function\") {\n                xhrOpenThisArg.onreadystatechange = new Proxy(xhrOpenThisArg.onreadystatechange, {\n                    apply (originalOnreadystatechange, onreadystatechangeThisArg, onreadystatechangeArgArray) {\n                        onreadystatechangeHandler();\n                        return originalOnreadystatechange.apply(onreadystatechangeThisArg, onreadystatechangeArgArray);\n                    }\n                });\n            } else {\n                xhrOpenThisArg.addEventListener(\"readystatechange\", onreadystatechangeHandler);\n            }\n            // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n            // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n            // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n            xhrOpenThisArg.setRequestHeader = new Proxy(xhrOpenThisArg.setRequestHeader, {\n                apply (originalSetRequestHeader, setRequestHeaderThisArg, setRequestHeaderArgArray) {\n                    const [header, value] = setRequestHeaderArgArray;\n                    const xhrInfo = setRequestHeaderThisArg[SENTRY_XHR_DATA_KEY];\n                    if (xhrInfo && (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(header) && (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(value)) {\n                        xhrInfo.request_headers[header.toLowerCase()] = value;\n                    }\n                    return originalSetRequestHeader.apply(setRequestHeaderThisArg, setRequestHeaderArgArray);\n                }\n            });\n            return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);\n        }\n    });\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    xhrproto.send = new Proxy(xhrproto.send, {\n        apply (originalSend, sendThisArg, sendArgArray) {\n            const sentryXhrData = sendThisArg[SENTRY_XHR_DATA_KEY];\n            if (!sentryXhrData) {\n                return originalSend.apply(sendThisArg, sendArgArray);\n            }\n            if (sendArgArray[0] !== undefined) {\n                sentryXhrData.body = sendArgArray[0];\n            }\n            const handlerData = {\n                startTimestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)() * 1000,\n                xhr: sendThisArg\n            };\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"xhr\", handlerData);\n            return originalSend.apply(sendThisArg, sendArgArray);\n        }\n    });\n}\nfunction parseUrl(url) {\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(url)) {\n        return url;\n    }\n    try {\n        // url can be a string or URL\n        // but since URL is not available in IE11, we do not check for it,\n        // but simply assume it is an URL and return `toString()` from it (which returns the full URL)\n        // If that fails, we just return undefined\n        return url.toString();\n    } catch (e2) {} // eslint-disable-line no-empty\n    return undefined;\n}\n //# sourceMappingURL=xhr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/types.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WINDOW: () => (/* binding */ WINDOW)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\nconst WINDOW = _sentry_core__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUUxQyxNQUFNQyxTQUFTRCxvREFBVUE7QUFJUCxDQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvYnJvd3Nlci11dGlscy9idWlsZC9lc20vdHlwZXMuanM/MDhhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcblxuY29uc3QgV0lORE9XID0gR0xPQkFMX09CSlxuXG47XG5cbmV4cG9ydCB7IFdJTkRPVyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwXG4iXSwibmFtZXMiOlsiR0xPQkFMX09CSiIsIldJTkRPVyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\n");

/***/ })

};
;