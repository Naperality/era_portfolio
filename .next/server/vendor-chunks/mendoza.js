"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mendoza";
exports.ids = ["vendor-chunks/mendoza"];
exports.modules = {

/***/ "(ssr)/./node_modules/mendoza/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/mendoza/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   incremental: () => (/* binding */ incrementalPatcher)\n/* harmony export */ });\nconst OPS = [\n    \"Value\",\n    \"Copy\",\n    \"Blank\",\n    \"ReturnIntoArray\",\n    \"ReturnIntoObject\",\n    \"ReturnIntoObjectSameKey\",\n    \"PushField\",\n    \"PushElement\",\n    \"PushParent\",\n    \"Pop\",\n    \"PushFieldCopy\",\n    \"PushFieldBlank\",\n    \"PushElementCopy\",\n    \"PushElementBlank\",\n    \"ReturnIntoObjectPop\",\n    \"ReturnIntoObjectSameKeyPop\",\n    \"ReturnIntoArrayPop\",\n    \"ObjectSetFieldValue\",\n    \"ObjectCopyField\",\n    \"ObjectDeleteField\",\n    \"ArrayAppendValue\",\n    \"ArrayAppendSlice\",\n    \"StringAppendString\",\n    \"StringAppendSlice\"\n];\nclass Patcher {\n    constructor(model, root, patch){\n        this.model = model, this.root = root, this.patch = patch, this.i = 0, this.inputStack = [], this.outputStack = [];\n    }\n    read() {\n        return this.patch[this.i++];\n    }\n    process() {\n        for(this.inputStack.push({\n            value: this.root\n        }), this.outputStack.push({\n            value: this.root\n        }); this.i < this.patch.length;){\n            let opcode = this.read(), op = OPS[opcode];\n            if (!op) throw new Error(`Unknown opcode: ${opcode}`);\n            let processor = `process${op}`;\n            this[processor].apply(this);\n        }\n        let entry = this.outputStack.pop();\n        return this.finalizeOutput(entry);\n    }\n    inputEntry() {\n        return this.inputStack[this.inputStack.length - 1];\n    }\n    inputKey(entry, idx) {\n        return entry.keys || (entry.keys = this.model.objectGetKeys(entry.value).sort()), entry.keys[idx];\n    }\n    outputEntry() {\n        return this.outputStack[this.outputStack.length - 1];\n    }\n    outputArray() {\n        let entry = this.outputEntry();\n        return entry.writeValue || (entry.writeValue = this.model.copyArray(entry.value)), entry.writeValue;\n    }\n    outputObject() {\n        let entry = this.outputEntry();\n        return entry.writeValue || (entry.writeValue = this.model.copyObject(entry.value)), entry.writeValue;\n    }\n    outputString() {\n        let entry = this.outputEntry();\n        return entry.writeValue || (entry.writeValue = this.model.copyString(entry.value)), entry.writeValue;\n    }\n    finalizeOutput(entry) {\n        return entry.writeValue ? this.model.finalize(entry.writeValue) : entry.value;\n    }\n    // Processors:\n    processValue() {\n        let value = this.model.wrap(this.read());\n        this.outputStack.push({\n            value\n        });\n    }\n    processCopy() {\n        let input = this.inputEntry();\n        this.outputStack.push({\n            value: input.value\n        });\n    }\n    processBlank() {\n        this.outputStack.push({\n            value: null\n        });\n    }\n    processReturnIntoArray() {\n        let entry = this.outputStack.pop(), result = this.finalizeOutput(entry), arr = this.outputArray();\n        this.model.arrayAppendValue(arr, result);\n    }\n    processReturnIntoObject() {\n        let key = this.read(), entry = this.outputStack.pop(), result = this.finalizeOutput(entry);\n        result = this.model.markChanged(result);\n        let obj = this.outputObject();\n        this.model.objectSetField(obj, key, result);\n    }\n    processReturnIntoObjectSameKey() {\n        let input = this.inputEntry(), entry = this.outputStack.pop(), result = this.finalizeOutput(entry), obj = this.outputObject();\n        this.model.objectSetField(obj, input.key, result);\n    }\n    processPushField() {\n        let idx = this.read(), entry = this.inputEntry(), key = this.inputKey(entry, idx), value = this.model.objectGetField(entry.value, key);\n        this.inputStack.push({\n            value,\n            key\n        });\n    }\n    processPushElement() {\n        let idx = this.read(), entry = this.inputEntry(), value = this.model.arrayGetElement(entry.value, idx);\n        this.inputStack.push({\n            value\n        });\n    }\n    processPop() {\n        this.inputStack.pop();\n    }\n    processPushFieldCopy() {\n        this.processPushField(), this.processCopy();\n    }\n    processPushFieldBlank() {\n        this.processPushField(), this.processBlank();\n    }\n    processPushElementCopy() {\n        this.processPushElement(), this.processCopy();\n    }\n    processPushElementBlank() {\n        this.processPushElement(), this.processBlank();\n    }\n    processReturnIntoObjectPop() {\n        this.processReturnIntoObject(), this.processPop();\n    }\n    processReturnIntoObjectSameKeyPop() {\n        this.processReturnIntoObjectSameKey(), this.processPop();\n    }\n    processReturnIntoArrayPop() {\n        this.processReturnIntoArray(), this.processPop();\n    }\n    processObjectSetFieldValue() {\n        this.processValue(), this.processReturnIntoObject();\n    }\n    processObjectCopyField() {\n        this.processPushField(), this.processCopy(), this.processReturnIntoObjectSameKey(), this.processPop();\n    }\n    processObjectDeleteField() {\n        let idx = this.read(), entry = this.inputEntry(), key = this.inputKey(entry, idx), obj = this.outputObject();\n        this.model.objectDeleteField(obj, key);\n    }\n    processArrayAppendValue() {\n        let value = this.model.wrap(this.read()), arr = this.outputArray();\n        this.model.arrayAppendValue(arr, value);\n    }\n    processArrayAppendSlice() {\n        let left = this.read(), right = this.read(), str = this.outputArray(), val = this.inputEntry().value;\n        this.model.arrayAppendSlice(str, val, left, right);\n    }\n    processStringAppendString() {\n        let value = this.model.wrap(this.read()), str = this.outputString();\n        this.model.stringAppendValue(str, value);\n    }\n    processStringAppendSlice() {\n        let left = this.read(), right = this.read(), str = this.outputString(), val = this.inputEntry().value;\n        this.model.stringAppendSlice(str, val, left, right);\n    }\n}\nfunction utf8charSize(code) {\n    return code >> 16 ? 4 : code >> 11 ? 3 : code >> 7 ? 2 : 1;\n}\nfunction utf8stringSize(str) {\n    let b = 0;\n    for(let i = 0; i < str.length; i++){\n        let code = str.codePointAt(i), size = utf8charSize(code);\n        size == 4 && i++, b += size;\n    }\n    return b;\n}\nfunction utf8resolveIndex(str, idx, start = 0) {\n    let byteCount = start, ucsIdx = 0;\n    for(ucsIdx = start; byteCount < idx; ucsIdx++){\n        let code = str.codePointAt(ucsIdx), size = utf8charSize(code);\n        size === 4 && ucsIdx++, byteCount += size;\n    }\n    return ucsIdx;\n}\nfunction commonPrefix(str, str2) {\n    let len = Math.min(str.length, str2.length), b = 0;\n    for(let i = 0; i < len;){\n        let aPoint = str.codePointAt(i), bPoint = str2.codePointAt(i);\n        if (aPoint !== bPoint) return b;\n        let size = utf8charSize(aPoint);\n        b += size, i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\nfunction commonSuffix(str, str2, prefix = 0) {\n    let len = Math.min(str.length, str2.length) - prefix, b = 0;\n    for(let i = 0; i < len;){\n        let aPoint = str.codePointAt(str.length - 1 - i), bPoint = str2.codePointAt(str2.length - 1 - i);\n        if (aPoint !== bPoint) return b;\n        let size = utf8charSize(aPoint);\n        b += size, i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\nclass IncrementalModel {\n    constructor(meta){\n        this.meta = meta;\n    }\n    wrap(data) {\n        return this.wrapWithMeta(data, this.meta, this.meta);\n    }\n    wrapWithMeta(data, startMeta, endMeta = this.meta) {\n        return {\n            data,\n            startMeta,\n            endMeta\n        };\n    }\n    asObject(value) {\n        if (!value.content) {\n            let fields = {};\n            for (let [key, val] of Object.entries(value.data))fields[key] = this.wrapWithMeta(val, value.startMeta);\n            value.content = {\n                type: \"object\",\n                fields\n            };\n        }\n        return value.content;\n    }\n    asArray(value) {\n        if (!value.content) {\n            let elements = value.data.map((item)=>this.wrapWithMeta(item, value.startMeta)), metas = elements.map(()=>this.meta);\n            value.content = {\n                type: \"array\",\n                elements,\n                metas\n            };\n        }\n        return value.content;\n    }\n    asString(value) {\n        if (!value.content) {\n            let str = value.data, part = {\n                value: str,\n                utf8size: utf8stringSize(str),\n                uses: [],\n                startMeta: value.startMeta,\n                endMeta: value.endMeta\n            };\n            value.content = this.stringFromParts([\n                part\n            ]);\n        }\n        return value.content;\n    }\n    stringFromParts(parts) {\n        let str = {\n            type: \"string\",\n            parts\n        };\n        for (let part of parts)part.uses.push(str);\n        return str;\n    }\n    objectGetKeys(value) {\n        return value.content ? Object.keys(value.content.fields) : Object.keys(value.data);\n    }\n    objectGetField(value, key) {\n        return this.asObject(value).fields[key];\n    }\n    arrayGetElement(value, idx) {\n        return this.asArray(value).elements[idx];\n    }\n    finalize(content) {\n        return this.updateEndMeta(content), {\n            content,\n            startMeta: this.meta,\n            endMeta: this.meta\n        };\n    }\n    markChanged(value) {\n        return this.wrap(unwrap(value));\n    }\n    updateEndMeta(content) {\n        if (content.type == \"string\") for (let part of content.parts)part.endMeta = this.meta;\n        else if (content.type === \"array\") for (let val of content.elements)val.content && val.endMeta !== this.meta && this.updateEndMeta(val.content), val.endMeta = this.meta;\n        else for (let val of Object.values(content.fields))val.content && val.endMeta !== this.meta && this.updateEndMeta(val.content), val.endMeta = this.meta;\n    }\n    copyString(value) {\n        if (value) {\n            let other = this.asString(value);\n            return this.stringFromParts(other.parts.slice());\n        } else return {\n            type: \"string\",\n            parts: []\n        };\n    }\n    copyObject(value) {\n        let obj = {\n            type: \"object\",\n            fields: {}\n        };\n        if (value) {\n            let other = this.asObject(value);\n            Object.assign(obj.fields, other.fields);\n        }\n        return obj;\n    }\n    copyArray(value) {\n        let arr = value ? this.asArray(value) : null, elements = arr ? arr.elements : [], metas = arr ? arr.metas : [];\n        return {\n            type: \"array\",\n            elements,\n            metas\n        };\n    }\n    objectSetField(target, key, value) {\n        target.fields[key] = value;\n    }\n    objectDeleteField(target, key) {\n        delete target.fields[key];\n    }\n    arrayAppendValue(target, value) {\n        target.elements.push(value), target.metas.push(this.meta);\n    }\n    arrayAppendSlice(target, source, left, right) {\n        let arr = this.asArray(source), samePosition = arr.elements.length === left;\n        if (target.elements.push(...arr.elements.slice(left, right)), samePosition) target.metas.push(...arr.metas.slice(left, right));\n        else for(let i = left; i < right; i++)target.metas.push(this.meta);\n    }\n    stringAppendValue(target, value) {\n        let str = this.asString(value);\n        for (let part of str.parts)this.stringAppendPart(target, part);\n    }\n    stringAppendPart(target, part) {\n        target.parts.push(part), part.uses.push(target);\n    }\n    resolveStringPart(str, from, len) {\n        if (len === 0) return from;\n        for(let i = from; i < str.parts.length; i++){\n            let part = str.parts[i];\n            if (len === part.utf8size) return i + 1;\n            if (len < part.utf8size) return this.splitString(part, len), i + 1;\n            len -= part.utf8size;\n        }\n        throw new Error(\"splitting string out of bounds\");\n    }\n    splitString(part, idx) {\n        let leftValue, rightValue, leftSize = idx, rightSize = part.utf8size - leftSize;\n        if (part.utf8size !== part.value.length) {\n            let byteCount = 0;\n            for(idx = 0; byteCount < leftSize; idx++){\n                let code = part.value.codePointAt(idx), size = utf8charSize(code);\n                size === 4 && idx++, byteCount += size;\n            }\n        }\n        leftValue = part.value.slice(0, idx), rightValue = part.value.slice(idx);\n        let newPart = {\n            value: rightValue,\n            utf8size: rightSize,\n            uses: part.uses.slice(),\n            startMeta: part.startMeta,\n            endMeta: part.endMeta\n        };\n        part.value = leftValue, part.utf8size = leftSize;\n        for (let use of part.uses){\n            let ndx = use.parts.indexOf(part);\n            if (ndx === -1) throw new Error(\"bug: mismatch between string parts and use.\");\n            use.parts.splice(ndx + 1, 0, newPart);\n        }\n    }\n    stringAppendSlice(target, source, left, right) {\n        let str = this.asString(source), firstPart = this.resolveStringPart(str, 0, left), lastPart = this.resolveStringPart(str, firstPart, right - left);\n        for(let i = firstPart; i < lastPart; i++){\n            let part = str.parts[i];\n            this.stringAppendPart(target, part);\n        }\n    }\n}\nfunction wrap(data, meta) {\n    return {\n        data,\n        startMeta: meta,\n        endMeta: meta\n    };\n}\nfunction unwrap(value) {\n    if (typeof value.data < \"u\") return value.data;\n    let result, content = value.content;\n    switch(content.type){\n        case \"string\":\n            result = content.parts.map((part)=>part.value).join(\"\");\n            break;\n        case \"array\":\n            result = content.elements.map((val)=>unwrap(val));\n            break;\n        case \"object\":\n            {\n                result = {};\n                for (let [key, val] of Object.entries(content.fields))result[key] = unwrap(val);\n            }\n    }\n    return value.data = result, result;\n}\nfunction getType(value) {\n    return value.content ? value.content.type : Array.isArray(value.data) ? \"array\" : value.data === null ? \"null\" : typeof value.data;\n}\nfunction rebaseValue(left, right) {\n    let leftType = getType(left), rightType = getType(right);\n    if (leftType !== rightType) return right;\n    let leftModel = new IncrementalModel(left.endMeta), rightModel = new IncrementalModel(right.endMeta);\n    switch(leftType){\n        case \"object\":\n            {\n                let leftObj = leftModel.asObject(left), rightObj = rightModel.asObject(right), identicalFieldCount = 0, leftFieldCount = Object.keys(leftObj.fields).length, rightFieldCount = Object.keys(rightObj.fields).length;\n                for (let [key, rightVal] of Object.entries(rightObj.fields)){\n                    let leftVal = leftObj.fields[key];\n                    leftVal && (rightObj.fields[key] = rebaseValue(leftVal, rightVal), rightObj.fields[key] === leftVal && identicalFieldCount++);\n                }\n                return leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount ? left : right;\n            }\n        case \"array\":\n            {\n                let leftArr = leftModel.asArray(left), rightArr = rightModel.asArray(right);\n                if (leftArr.elements.length !== rightArr.elements.length) break;\n                let numRebased = 0;\n                for(let i = 0; i < rightArr.elements.length; i++)rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]), rightArr.elements[i] !== leftArr.elements[i] && numRebased++;\n                return numRebased === 0 ? left : right;\n            }\n        case \"null\":\n        case \"boolean\":\n        case \"number\":\n            {\n                if (unwrap(left) === unwrap(right)) return left;\n                break;\n            }\n        case \"string\":\n            {\n                let leftRaw = unwrap(left), rightRaw = unwrap(right);\n                if (leftRaw === rightRaw) return left;\n                let result = rightModel.copyString(null), prefix = commonPrefix(leftRaw, rightRaw), suffix = commonSuffix(leftRaw, rightRaw, prefix), rightLen = utf8stringSize(rightRaw), leftLen = utf8stringSize(leftRaw);\n                0 < prefix && rightModel.stringAppendSlice(result, left, 0, prefix), prefix < rightLen - suffix && rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix), leftLen - suffix < leftLen && rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);\n                let value = rightModel.finalize(result);\n                if (unwrap(value) !== rightRaw) throw new Error(\"incorrect string rebase\");\n                return value;\n            }\n    }\n    return right;\n}\nfunction applyPatch$1(left, patch, startMeta) {\n    let model = new IncrementalModel(startMeta);\n    return new Patcher(model, left, patch).process();\n}\nvar incrementalPatcher = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    applyPatch: applyPatch$1,\n    getType,\n    rebaseValue,\n    unwrap,\n    wrap\n});\nclass SimpleModel {\n    wrap(data) {\n        return data;\n    }\n    finalize(b) {\n        return Array.isArray(b) ? b : b.data;\n    }\n    markChanged(value) {\n        return value;\n    }\n    objectGetKeys(value) {\n        return Object.keys(value);\n    }\n    objectGetField(value, key) {\n        return value[key];\n    }\n    arrayGetElement(value, idx) {\n        return value[idx];\n    }\n    copyObject(value) {\n        let res = {\n            type: \"object\",\n            data: {}\n        };\n        if (value !== null) for (let [key, val] of Object.entries(value))res.data[key] = val;\n        return res;\n    }\n    copyArray(value) {\n        return value === null ? [] : value.slice();\n    }\n    copyString(value) {\n        return {\n            type: \"string\",\n            data: value === null ? \"\" : value\n        };\n    }\n    objectSetField(target, key, value) {\n        target.data[key] = value;\n    }\n    objectDeleteField(target, key) {\n        delete target.data[key];\n    }\n    arrayAppendValue(target, value) {\n        target.push(value);\n    }\n    arrayAppendSlice(target, source, left, right) {\n        target.push(...source.slice(left, right));\n    }\n    stringAppendSlice(target, source, left, right) {\n        const sourceString = source, leftPos = utf8resolveIndex(sourceString, left), rightPos = utf8resolveIndex(sourceString, right, leftPos);\n        target.data += sourceString.slice(leftPos, rightPos);\n    }\n    stringAppendValue(target, value) {\n        target.data += value;\n    }\n}\nfunction applyPatch(left, patch) {\n    let root = left;\n    return new Patcher(new SimpleModel(), root, patch).process();\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVuZG96YS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsTUFBTTtJQUNWO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBQ0QsTUFBTUM7SUFPSkMsWUFBWUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLEtBQUssQ0FBRTtRQUM5QixJQUFJLENBQUNGLEtBQUssR0FBR0EsT0FBTyxJQUFJLENBQUNDLElBQUksR0FBR0EsTUFBTSxJQUFJLENBQUNDLEtBQUssR0FBR0EsT0FBTyxJQUFJLENBQUNDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUNDLFdBQVcsR0FBRyxFQUFFO0lBQ25IO0lBQ0FDLE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDLElBQUksQ0FBQ0MsQ0FBQyxHQUFHO0lBQzdCO0lBQ0FJLFVBQVU7UUFDUixJQUFLLElBQUksQ0FBQ0gsVUFBVSxDQUFDSSxJQUFJLENBQUM7WUFBRUMsT0FBTyxJQUFJLENBQUNSLElBQUk7UUFBQyxJQUFJLElBQUksQ0FBQ0ksV0FBVyxDQUFDRyxJQUFJLENBQUM7WUFBRUMsT0FBTyxJQUFJLENBQUNSLElBQUk7UUFBQyxJQUFJLElBQUksQ0FBQ0UsQ0FBQyxHQUFHLElBQUksQ0FBQ0QsS0FBSyxDQUFDUSxNQUFNLEVBQUk7WUFDMUgsSUFBSUMsU0FBUyxJQUFJLENBQUNMLElBQUksSUFBSU0sS0FBS2YsR0FBRyxDQUFDYyxPQUFPO1lBQzFDLElBQUksQ0FBQ0MsSUFDSCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRUYsT0FBTyxDQUFDO1lBQzdDLElBQUlHLFlBQVksQ0FBQyxPQUFPLEVBQUVGLEdBQUcs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SUFBSXJFLFFBQVEsSUFBSTZLLGVBQWUxSyxNQUFNQyxPQUFPSyxPQUFPO0FBQzVEO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL21lbmRvemEvZGlzdC9pbmRleC5qcz85YWFiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE9QUyA9IFtcbiAgXCJWYWx1ZVwiLFxuICBcIkNvcHlcIixcbiAgXCJCbGFua1wiLFxuICBcIlJldHVybkludG9BcnJheVwiLFxuICBcIlJldHVybkludG9PYmplY3RcIixcbiAgXCJSZXR1cm5JbnRvT2JqZWN0U2FtZUtleVwiLFxuICBcIlB1c2hGaWVsZFwiLFxuICBcIlB1c2hFbGVtZW50XCIsXG4gIFwiUHVzaFBhcmVudFwiLFxuICBcIlBvcFwiLFxuICBcIlB1c2hGaWVsZENvcHlcIixcbiAgXCJQdXNoRmllbGRCbGFua1wiLFxuICBcIlB1c2hFbGVtZW50Q29weVwiLFxuICBcIlB1c2hFbGVtZW50QmxhbmtcIixcbiAgXCJSZXR1cm5JbnRvT2JqZWN0UG9wXCIsXG4gIFwiUmV0dXJuSW50b09iamVjdFNhbWVLZXlQb3BcIixcbiAgXCJSZXR1cm5JbnRvQXJyYXlQb3BcIixcbiAgXCJPYmplY3RTZXRGaWVsZFZhbHVlXCIsXG4gIFwiT2JqZWN0Q29weUZpZWxkXCIsXG4gIFwiT2JqZWN0RGVsZXRlRmllbGRcIixcbiAgXCJBcnJheUFwcGVuZFZhbHVlXCIsXG4gIFwiQXJyYXlBcHBlbmRTbGljZVwiLFxuICBcIlN0cmluZ0FwcGVuZFN0cmluZ1wiLFxuICBcIlN0cmluZ0FwcGVuZFNsaWNlXCJcbl07XG5jbGFzcyBQYXRjaGVyIHtcbiAgbW9kZWw7XG4gIHJvb3Q7XG4gIHBhdGNoO1xuICBpO1xuICBpbnB1dFN0YWNrO1xuICBvdXRwdXRTdGFjaztcbiAgY29uc3RydWN0b3IobW9kZWwsIHJvb3QsIHBhdGNoKSB7XG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsLCB0aGlzLnJvb3QgPSByb290LCB0aGlzLnBhdGNoID0gcGF0Y2gsIHRoaXMuaSA9IDAsIHRoaXMuaW5wdXRTdGFjayA9IFtdLCB0aGlzLm91dHB1dFN0YWNrID0gW107XG4gIH1cbiAgcmVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXRjaFt0aGlzLmkrK107XG4gIH1cbiAgcHJvY2VzcygpIHtcbiAgICBmb3IgKHRoaXMuaW5wdXRTdGFjay5wdXNoKHsgdmFsdWU6IHRoaXMucm9vdCB9KSwgdGhpcy5vdXRwdXRTdGFjay5wdXNoKHsgdmFsdWU6IHRoaXMucm9vdCB9KTsgdGhpcy5pIDwgdGhpcy5wYXRjaC5sZW5ndGg7ICkge1xuICAgICAgbGV0IG9wY29kZSA9IHRoaXMucmVhZCgpLCBvcCA9IE9QU1tvcGNvZGVdO1xuICAgICAgaWYgKCFvcClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG9wY29kZTogJHtvcGNvZGV9YCk7XG4gICAgICBsZXQgcHJvY2Vzc29yID0gYHByb2Nlc3Mke29wfWA7XG4gICAgICB0aGlzW3Byb2Nlc3Nvcl0uYXBwbHkodGhpcyk7XG4gICAgfVxuICAgIGxldCBlbnRyeSA9IHRoaXMub3V0cHV0U3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHRoaXMuZmluYWxpemVPdXRwdXQoZW50cnkpO1xuICB9XG4gIGlucHV0RW50cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRTdGFja1t0aGlzLmlucHV0U3RhY2subGVuZ3RoIC0gMV07XG4gIH1cbiAgaW5wdXRLZXkoZW50cnksIGlkeCkge1xuICAgIHJldHVybiBlbnRyeS5rZXlzIHx8IChlbnRyeS5rZXlzID0gdGhpcy5tb2RlbC5vYmplY3RHZXRLZXlzKGVudHJ5LnZhbHVlKS5zb3J0KCkpLCBlbnRyeS5rZXlzW2lkeF07XG4gIH1cbiAgb3V0cHV0RW50cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMub3V0cHV0U3RhY2tbdGhpcy5vdXRwdXRTdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuICBvdXRwdXRBcnJheSgpIHtcbiAgICBsZXQgZW50cnkgPSB0aGlzLm91dHB1dEVudHJ5KCk7XG4gICAgcmV0dXJuIGVudHJ5LndyaXRlVmFsdWUgfHwgKGVudHJ5LndyaXRlVmFsdWUgPSB0aGlzLm1vZGVsLmNvcHlBcnJheShlbnRyeS52YWx1ZSkpLCBlbnRyeS53cml0ZVZhbHVlO1xuICB9XG4gIG91dHB1dE9iamVjdCgpIHtcbiAgICBsZXQgZW50cnkgPSB0aGlzLm91dHB1dEVudHJ5KCk7XG4gICAgcmV0dXJuIGVudHJ5LndyaXRlVmFsdWUgfHwgKGVudHJ5LndyaXRlVmFsdWUgPSB0aGlzLm1vZGVsLmNvcHlPYmplY3QoZW50cnkudmFsdWUpKSwgZW50cnkud3JpdGVWYWx1ZTtcbiAgfVxuICBvdXRwdXRTdHJpbmcoKSB7XG4gICAgbGV0IGVudHJ5ID0gdGhpcy5vdXRwdXRFbnRyeSgpO1xuICAgIHJldHVybiBlbnRyeS53cml0ZVZhbHVlIHx8IChlbnRyeS53cml0ZVZhbHVlID0gdGhpcy5tb2RlbC5jb3B5U3RyaW5nKGVudHJ5LnZhbHVlKSksIGVudHJ5LndyaXRlVmFsdWU7XG4gIH1cbiAgZmluYWxpemVPdXRwdXQoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkud3JpdGVWYWx1ZSA/IHRoaXMubW9kZWwuZmluYWxpemUoZW50cnkud3JpdGVWYWx1ZSkgOiBlbnRyeS52YWx1ZTtcbiAgfVxuICAvLyBQcm9jZXNzb3JzOlxuICBwcm9jZXNzVmFsdWUoKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5tb2RlbC53cmFwKHRoaXMucmVhZCgpKTtcbiAgICB0aGlzLm91dHB1dFN0YWNrLnB1c2goeyB2YWx1ZSB9KTtcbiAgfVxuICBwcm9jZXNzQ29weSgpIHtcbiAgICBsZXQgaW5wdXQgPSB0aGlzLmlucHV0RW50cnkoKTtcbiAgICB0aGlzLm91dHB1dFN0YWNrLnB1c2goeyB2YWx1ZTogaW5wdXQudmFsdWUgfSk7XG4gIH1cbiAgcHJvY2Vzc0JsYW5rKCkge1xuICAgIHRoaXMub3V0cHV0U3RhY2sucHVzaCh7IHZhbHVlOiBudWxsIH0pO1xuICB9XG4gIHByb2Nlc3NSZXR1cm5JbnRvQXJyYXkoKSB7XG4gICAgbGV0IGVudHJ5ID0gdGhpcy5vdXRwdXRTdGFjay5wb3AoKSwgcmVzdWx0ID0gdGhpcy5maW5hbGl6ZU91dHB1dChlbnRyeSksIGFyciA9IHRoaXMub3V0cHV0QXJyYXkoKTtcbiAgICB0aGlzLm1vZGVsLmFycmF5QXBwZW5kVmFsdWUoYXJyLCByZXN1bHQpO1xuICB9XG4gIHByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0KCkge1xuICAgIGxldCBrZXkgPSB0aGlzLnJlYWQoKSwgZW50cnkgPSB0aGlzLm91dHB1dFN0YWNrLnBvcCgpLCByZXN1bHQgPSB0aGlzLmZpbmFsaXplT3V0cHV0KGVudHJ5KTtcbiAgICByZXN1bHQgPSB0aGlzLm1vZGVsLm1hcmtDaGFuZ2VkKHJlc3VsdCk7XG4gICAgbGV0IG9iaiA9IHRoaXMub3V0cHV0T2JqZWN0KCk7XG4gICAgdGhpcy5tb2RlbC5vYmplY3RTZXRGaWVsZChvYmosIGtleSwgcmVzdWx0KTtcbiAgfVxuICBwcm9jZXNzUmV0dXJuSW50b09iamVjdFNhbWVLZXkoKSB7XG4gICAgbGV0IGlucHV0ID0gdGhpcy5pbnB1dEVudHJ5KCksIGVudHJ5ID0gdGhpcy5vdXRwdXRTdGFjay5wb3AoKSwgcmVzdWx0ID0gdGhpcy5maW5hbGl6ZU91dHB1dChlbnRyeSksIG9iaiA9IHRoaXMub3V0cHV0T2JqZWN0KCk7XG4gICAgdGhpcy5tb2RlbC5vYmplY3RTZXRGaWVsZChvYmosIGlucHV0LmtleSwgcmVzdWx0KTtcbiAgfVxuICBwcm9jZXNzUHVzaEZpZWxkKCkge1xuICAgIGxldCBpZHggPSB0aGlzLnJlYWQoKSwgZW50cnkgPSB0aGlzLmlucHV0RW50cnkoKSwga2V5ID0gdGhpcy5pbnB1dEtleShlbnRyeSwgaWR4KSwgdmFsdWUgPSB0aGlzLm1vZGVsLm9iamVjdEdldEZpZWxkKGVudHJ5LnZhbHVlLCBrZXkpO1xuICAgIHRoaXMuaW5wdXRTdGFjay5wdXNoKHsgdmFsdWUsIGtleSB9KTtcbiAgfVxuICBwcm9jZXNzUHVzaEVsZW1lbnQoKSB7XG4gICAgbGV0IGlkeCA9IHRoaXMucmVhZCgpLCBlbnRyeSA9IHRoaXMuaW5wdXRFbnRyeSgpLCB2YWx1ZSA9IHRoaXMubW9kZWwuYXJyYXlHZXRFbGVtZW50KGVudHJ5LnZhbHVlLCBpZHgpO1xuICAgIHRoaXMuaW5wdXRTdGFjay5wdXNoKHsgdmFsdWUgfSk7XG4gIH1cbiAgcHJvY2Vzc1BvcCgpIHtcbiAgICB0aGlzLmlucHV0U3RhY2sucG9wKCk7XG4gIH1cbiAgcHJvY2Vzc1B1c2hGaWVsZENvcHkoKSB7XG4gICAgdGhpcy5wcm9jZXNzUHVzaEZpZWxkKCksIHRoaXMucHJvY2Vzc0NvcHkoKTtcbiAgfVxuICBwcm9jZXNzUHVzaEZpZWxkQmxhbmsoKSB7XG4gICAgdGhpcy5wcm9jZXNzUHVzaEZpZWxkKCksIHRoaXMucHJvY2Vzc0JsYW5rKCk7XG4gIH1cbiAgcHJvY2Vzc1B1c2hFbGVtZW50Q29weSgpIHtcbiAgICB0aGlzLnByb2Nlc3NQdXNoRWxlbWVudCgpLCB0aGlzLnByb2Nlc3NDb3B5KCk7XG4gIH1cbiAgcHJvY2Vzc1B1c2hFbGVtZW50QmxhbmsoKSB7XG4gICAgdGhpcy5wcm9jZXNzUHVzaEVsZW1lbnQoKSwgdGhpcy5wcm9jZXNzQmxhbmsoKTtcbiAgfVxuICBwcm9jZXNzUmV0dXJuSW50b09iamVjdFBvcCgpIHtcbiAgICB0aGlzLnByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0KCksIHRoaXMucHJvY2Vzc1BvcCgpO1xuICB9XG4gIHByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0U2FtZUtleVBvcCgpIHtcbiAgICB0aGlzLnByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0U2FtZUtleSgpLCB0aGlzLnByb2Nlc3NQb3AoKTtcbiAgfVxuICBwcm9jZXNzUmV0dXJuSW50b0FycmF5UG9wKCkge1xuICAgIHRoaXMucHJvY2Vzc1JldHVybkludG9BcnJheSgpLCB0aGlzLnByb2Nlc3NQb3AoKTtcbiAgfVxuICBwcm9jZXNzT2JqZWN0U2V0RmllbGRWYWx1ZSgpIHtcbiAgICB0aGlzLnByb2Nlc3NWYWx1ZSgpLCB0aGlzLnByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0KCk7XG4gIH1cbiAgcHJvY2Vzc09iamVjdENvcHlGaWVsZCgpIHtcbiAgICB0aGlzLnByb2Nlc3NQdXNoRmllbGQoKSwgdGhpcy5wcm9jZXNzQ29weSgpLCB0aGlzLnByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0U2FtZUtleSgpLCB0aGlzLnByb2Nlc3NQb3AoKTtcbiAgfVxuICBwcm9jZXNzT2JqZWN0RGVsZXRlRmllbGQoKSB7XG4gICAgbGV0IGlkeCA9IHRoaXMucmVhZCgpLCBlbnRyeSA9IHRoaXMuaW5wdXRFbnRyeSgpLCBrZXkgPSB0aGlzLmlucHV0S2V5KGVudHJ5LCBpZHgpLCBvYmogPSB0aGlzLm91dHB1dE9iamVjdCgpO1xuICAgIHRoaXMubW9kZWwub2JqZWN0RGVsZXRlRmllbGQob2JqLCBrZXkpO1xuICB9XG4gIHByb2Nlc3NBcnJheUFwcGVuZFZhbHVlKCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMubW9kZWwud3JhcCh0aGlzLnJlYWQoKSksIGFyciA9IHRoaXMub3V0cHV0QXJyYXkoKTtcbiAgICB0aGlzLm1vZGVsLmFycmF5QXBwZW5kVmFsdWUoYXJyLCB2YWx1ZSk7XG4gIH1cbiAgcHJvY2Vzc0FycmF5QXBwZW5kU2xpY2UoKSB7XG4gICAgbGV0IGxlZnQgPSB0aGlzLnJlYWQoKSwgcmlnaHQgPSB0aGlzLnJlYWQoKSwgc3RyID0gdGhpcy5vdXRwdXRBcnJheSgpLCB2YWwgPSB0aGlzLmlucHV0RW50cnkoKS52YWx1ZTtcbiAgICB0aGlzLm1vZGVsLmFycmF5QXBwZW5kU2xpY2Uoc3RyLCB2YWwsIGxlZnQsIHJpZ2h0KTtcbiAgfVxuICBwcm9jZXNzU3RyaW5nQXBwZW5kU3RyaW5nKCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMubW9kZWwud3JhcCh0aGlzLnJlYWQoKSksIHN0ciA9IHRoaXMub3V0cHV0U3RyaW5nKCk7XG4gICAgdGhpcy5tb2RlbC5zdHJpbmdBcHBlbmRWYWx1ZShzdHIsIHZhbHVlKTtcbiAgfVxuICBwcm9jZXNzU3RyaW5nQXBwZW5kU2xpY2UoKSB7XG4gICAgbGV0IGxlZnQgPSB0aGlzLnJlYWQoKSwgcmlnaHQgPSB0aGlzLnJlYWQoKSwgc3RyID0gdGhpcy5vdXRwdXRTdHJpbmcoKSwgdmFsID0gdGhpcy5pbnB1dEVudHJ5KCkudmFsdWU7XG4gICAgdGhpcy5tb2RlbC5zdHJpbmdBcHBlbmRTbGljZShzdHIsIHZhbCwgbGVmdCwgcmlnaHQpO1xuICB9XG59XG5mdW5jdGlvbiB1dGY4Y2hhclNpemUoY29kZSkge1xuICByZXR1cm4gY29kZSA+PiAxNiA/IDQgOiBjb2RlID4+IDExID8gMyA6IGNvZGUgPj4gNyA/IDIgOiAxO1xufVxuZnVuY3Rpb24gdXRmOHN0cmluZ1NpemUoc3RyKSB7XG4gIGxldCBiID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY29kZSA9IHN0ci5jb2RlUG9pbnRBdChpKSwgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShjb2RlKTtcbiAgICBzaXplID09IDQgJiYgaSsrLCBiICs9IHNpemU7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG5mdW5jdGlvbiB1dGY4cmVzb2x2ZUluZGV4KHN0ciwgaWR4LCBzdGFydCA9IDApIHtcbiAgbGV0IGJ5dGVDb3VudCA9IHN0YXJ0LCB1Y3NJZHggPSAwO1xuICBmb3IgKHVjc0lkeCA9IHN0YXJ0OyBieXRlQ291bnQgPCBpZHg7IHVjc0lkeCsrKSB7XG4gICAgbGV0IGNvZGUgPSBzdHIuY29kZVBvaW50QXQodWNzSWR4KSwgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShjb2RlKTtcbiAgICBzaXplID09PSA0ICYmIHVjc0lkeCsrLCBieXRlQ291bnQgKz0gc2l6ZTtcbiAgfVxuICByZXR1cm4gdWNzSWR4O1xufVxuZnVuY3Rpb24gY29tbW9uUHJlZml4KHN0ciwgc3RyMikge1xuICBsZXQgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgc3RyMi5sZW5ndGgpLCBiID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICkge1xuICAgIGxldCBhUG9pbnQgPSBzdHIuY29kZVBvaW50QXQoaSksIGJQb2ludCA9IHN0cjIuY29kZVBvaW50QXQoaSk7XG4gICAgaWYgKGFQb2ludCAhPT0gYlBvaW50KVxuICAgICAgcmV0dXJuIGI7XG4gICAgbGV0IHNpemUgPSB1dGY4Y2hhclNpemUoYVBvaW50KTtcbiAgICBiICs9IHNpemUsIGkgKz0gc2l6ZSA9PT0gNCA/IDIgOiAxO1xuICB9XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gY29tbW9uU3VmZml4KHN0ciwgc3RyMiwgcHJlZml4ID0gMCkge1xuICBsZXQgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgc3RyMi5sZW5ndGgpIC0gcHJlZml4LCBiID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICkge1xuICAgIGxldCBhUG9pbnQgPSBzdHIuY29kZVBvaW50QXQoc3RyLmxlbmd0aCAtIDEgLSBpKSwgYlBvaW50ID0gc3RyMi5jb2RlUG9pbnRBdChzdHIyLmxlbmd0aCAtIDEgLSBpKTtcbiAgICBpZiAoYVBvaW50ICE9PSBiUG9pbnQpXG4gICAgICByZXR1cm4gYjtcbiAgICBsZXQgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShhUG9pbnQpO1xuICAgIGIgKz0gc2l6ZSwgaSArPSBzaXplID09PSA0ID8gMiA6IDE7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG5jbGFzcyBJbmNyZW1lbnRhbE1vZGVsIHtcbiAgbWV0YTtcbiAgY29uc3RydWN0b3IobWV0YSkge1xuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gIH1cbiAgd3JhcChkYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcFdpdGhNZXRhKGRhdGEsIHRoaXMubWV0YSwgdGhpcy5tZXRhKTtcbiAgfVxuICB3cmFwV2l0aE1ldGEoZGF0YSwgc3RhcnRNZXRhLCBlbmRNZXRhID0gdGhpcy5tZXRhKSB7XG4gICAgcmV0dXJuIHsgZGF0YSwgc3RhcnRNZXRhLCBlbmRNZXRhIH07XG4gIH1cbiAgYXNPYmplY3QodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlLmNvbnRlbnQpIHtcbiAgICAgIGxldCBmaWVsZHMgPSB7fTtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUuZGF0YSkpXG4gICAgICAgIGZpZWxkc1trZXldID0gdGhpcy53cmFwV2l0aE1ldGEodmFsLCB2YWx1ZS5zdGFydE1ldGEpO1xuICAgICAgdmFsdWUuY29udGVudCA9IHsgdHlwZTogXCJvYmplY3RcIiwgZmllbGRzIH07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5jb250ZW50O1xuICB9XG4gIGFzQXJyYXkodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlLmNvbnRlbnQpIHtcbiAgICAgIGxldCBlbGVtZW50cyA9IHZhbHVlLmRhdGEubWFwKFxuICAgICAgICAoaXRlbSkgPT4gdGhpcy53cmFwV2l0aE1ldGEoaXRlbSwgdmFsdWUuc3RhcnRNZXRhKVxuICAgICAgKSwgbWV0YXMgPSBlbGVtZW50cy5tYXAoKCkgPT4gdGhpcy5tZXRhKTtcbiAgICAgIHZhbHVlLmNvbnRlbnQgPSB7IHR5cGU6IFwiYXJyYXlcIiwgZWxlbWVudHMsIG1ldGFzIH07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5jb250ZW50O1xuICB9XG4gIGFzU3RyaW5nKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZS5jb250ZW50KSB7XG4gICAgICBsZXQgc3RyID0gdmFsdWUuZGF0YSwgcGFydCA9IHtcbiAgICAgICAgdmFsdWU6IHN0cixcbiAgICAgICAgdXRmOHNpemU6IHV0ZjhzdHJpbmdTaXplKHN0ciksXG4gICAgICAgIHVzZXM6IFtdLFxuICAgICAgICBzdGFydE1ldGE6IHZhbHVlLnN0YXJ0TWV0YSxcbiAgICAgICAgZW5kTWV0YTogdmFsdWUuZW5kTWV0YVxuICAgICAgfTtcbiAgICAgIHZhbHVlLmNvbnRlbnQgPSB0aGlzLnN0cmluZ0Zyb21QYXJ0cyhbcGFydF0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUuY29udGVudDtcbiAgfVxuICBzdHJpbmdGcm9tUGFydHMocGFydHMpIHtcbiAgICBsZXQgc3RyID0ge1xuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIHBhcnRzXG4gICAgfTtcbiAgICBmb3IgKGxldCBwYXJ0IG9mIHBhcnRzKVxuICAgICAgcGFydC51c2VzLnB1c2goc3RyKTtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIG9iamVjdEdldEtleXModmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuY29udGVudCA/IE9iamVjdC5rZXlzKHZhbHVlLmNvbnRlbnQuZmllbGRzKSA6IE9iamVjdC5rZXlzKHZhbHVlLmRhdGEpO1xuICB9XG4gIG9iamVjdEdldEZpZWxkKHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5hc09iamVjdCh2YWx1ZSkuZmllbGRzW2tleV07XG4gIH1cbiAgYXJyYXlHZXRFbGVtZW50KHZhbHVlLCBpZHgpIHtcbiAgICByZXR1cm4gdGhpcy5hc0FycmF5KHZhbHVlKS5lbGVtZW50c1tpZHhdO1xuICB9XG4gIGZpbmFsaXplKGNvbnRlbnQpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVFbmRNZXRhKGNvbnRlbnQpLCB7IGNvbnRlbnQsIHN0YXJ0TWV0YTogdGhpcy5tZXRhLCBlbmRNZXRhOiB0aGlzLm1ldGEgfTtcbiAgfVxuICBtYXJrQ2hhbmdlZCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLndyYXAodW53cmFwKHZhbHVlKSk7XG4gIH1cbiAgdXBkYXRlRW5kTWV0YShjb250ZW50KSB7XG4gICAgaWYgKGNvbnRlbnQudHlwZSA9PSBcInN0cmluZ1wiKVxuICAgICAgZm9yIChsZXQgcGFydCBvZiBjb250ZW50LnBhcnRzKVxuICAgICAgICBwYXJ0LmVuZE1ldGEgPSB0aGlzLm1ldGE7XG4gICAgZWxzZSBpZiAoY29udGVudC50eXBlID09PSBcImFycmF5XCIpXG4gICAgICBmb3IgKGxldCB2YWwgb2YgY29udGVudC5lbGVtZW50cylcbiAgICAgICAgdmFsLmNvbnRlbnQgJiYgdmFsLmVuZE1ldGEgIT09IHRoaXMubWV0YSAmJiB0aGlzLnVwZGF0ZUVuZE1ldGEodmFsLmNvbnRlbnQpLCB2YWwuZW5kTWV0YSA9IHRoaXMubWV0YTtcbiAgICBlbHNlXG4gICAgICBmb3IgKGxldCB2YWwgb2YgT2JqZWN0LnZhbHVlcyhjb250ZW50LmZpZWxkcykpXG4gICAgICAgIHZhbC5jb250ZW50ICYmIHZhbC5lbmRNZXRhICE9PSB0aGlzLm1ldGEgJiYgdGhpcy51cGRhdGVFbmRNZXRhKHZhbC5jb250ZW50KSwgdmFsLmVuZE1ldGEgPSB0aGlzLm1ldGE7XG4gIH1cbiAgY29weVN0cmluZyh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgbGV0IG90aGVyID0gdGhpcy5hc1N0cmluZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcy5zdHJpbmdGcm9tUGFydHMob3RoZXIucGFydHMuc2xpY2UoKSk7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBwYXJ0czogW11cbiAgICAgIH07XG4gIH1cbiAgY29weU9iamVjdCh2YWx1ZSkge1xuICAgIGxldCBvYmogPSB7XG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgZmllbGRzOiB7fVxuICAgIH07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBsZXQgb3RoZXIgPSB0aGlzLmFzT2JqZWN0KHZhbHVlKTtcbiAgICAgIE9iamVjdC5hc3NpZ24ob2JqLmZpZWxkcywgb3RoZXIuZmllbGRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBjb3B5QXJyYXkodmFsdWUpIHtcbiAgICBsZXQgYXJyID0gdmFsdWUgPyB0aGlzLmFzQXJyYXkodmFsdWUpIDogbnVsbCwgZWxlbWVudHMgPSBhcnIgPyBhcnIuZWxlbWVudHMgOiBbXSwgbWV0YXMgPSBhcnIgPyBhcnIubWV0YXMgOiBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgZWxlbWVudHMsXG4gICAgICBtZXRhc1xuICAgIH07XG4gIH1cbiAgb2JqZWN0U2V0RmllbGQodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgdGFyZ2V0LmZpZWxkc1trZXldID0gdmFsdWU7XG4gIH1cbiAgb2JqZWN0RGVsZXRlRmllbGQodGFyZ2V0LCBrZXkpIHtcbiAgICBkZWxldGUgdGFyZ2V0LmZpZWxkc1trZXldO1xuICB9XG4gIGFycmF5QXBwZW5kVmFsdWUodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHRhcmdldC5lbGVtZW50cy5wdXNoKHZhbHVlKSwgdGFyZ2V0Lm1ldGFzLnB1c2godGhpcy5tZXRhKTtcbiAgfVxuICBhcnJheUFwcGVuZFNsaWNlKHRhcmdldCwgc291cmNlLCBsZWZ0LCByaWdodCkge1xuICAgIGxldCBhcnIgPSB0aGlzLmFzQXJyYXkoc291cmNlKSwgc2FtZVBvc2l0aW9uID0gYXJyLmVsZW1lbnRzLmxlbmd0aCA9PT0gbGVmdDtcbiAgICBpZiAodGFyZ2V0LmVsZW1lbnRzLnB1c2goLi4uYXJyLmVsZW1lbnRzLnNsaWNlKGxlZnQsIHJpZ2h0KSksIHNhbWVQb3NpdGlvbilcbiAgICAgIHRhcmdldC5tZXRhcy5wdXNoKC4uLmFyci5tZXRhcy5zbGljZShsZWZ0LCByaWdodCkpO1xuICAgIGVsc2VcbiAgICAgIGZvciAobGV0IGkgPSBsZWZ0OyBpIDwgcmlnaHQ7IGkrKylcbiAgICAgICAgdGFyZ2V0Lm1ldGFzLnB1c2godGhpcy5tZXRhKTtcbiAgfVxuICBzdHJpbmdBcHBlbmRWYWx1ZSh0YXJnZXQsIHZhbHVlKSB7XG4gICAgbGV0IHN0ciA9IHRoaXMuYXNTdHJpbmcodmFsdWUpO1xuICAgIGZvciAobGV0IHBhcnQgb2Ygc3RyLnBhcnRzKVxuICAgICAgdGhpcy5zdHJpbmdBcHBlbmRQYXJ0KHRhcmdldCwgcGFydCk7XG4gIH1cbiAgc3RyaW5nQXBwZW5kUGFydCh0YXJnZXQsIHBhcnQpIHtcbiAgICB0YXJnZXQucGFydHMucHVzaChwYXJ0KSwgcGFydC51c2VzLnB1c2godGFyZ2V0KTtcbiAgfVxuICByZXNvbHZlU3RyaW5nUGFydChzdHIsIGZyb20sIGxlbikge1xuICAgIGlmIChsZW4gPT09IDApXG4gICAgICByZXR1cm4gZnJvbTtcbiAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA8IHN0ci5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHBhcnQgPSBzdHIucGFydHNbaV07XG4gICAgICBpZiAobGVuID09PSBwYXJ0LnV0ZjhzaXplKVxuICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICBpZiAobGVuIDwgcGFydC51dGY4c2l6ZSlcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXRTdHJpbmcocGFydCwgbGVuKSwgaSArIDE7XG4gICAgICBsZW4gLT0gcGFydC51dGY4c2l6ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwic3BsaXR0aW5nIHN0cmluZyBvdXQgb2YgYm91bmRzXCIpO1xuICB9XG4gIHNwbGl0U3RyaW5nKHBhcnQsIGlkeCkge1xuICAgIGxldCBsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUsIGxlZnRTaXplID0gaWR4LCByaWdodFNpemUgPSBwYXJ0LnV0ZjhzaXplIC0gbGVmdFNpemU7XG4gICAgaWYgKHBhcnQudXRmOHNpemUgIT09IHBhcnQudmFsdWUubGVuZ3RoKSB7XG4gICAgICBsZXQgYnl0ZUNvdW50ID0gMDtcbiAgICAgIGZvciAoaWR4ID0gMDsgYnl0ZUNvdW50IDwgbGVmdFNpemU7IGlkeCsrKSB7XG4gICAgICAgIGxldCBjb2RlID0gcGFydC52YWx1ZS5jb2RlUG9pbnRBdChpZHgpLCBzaXplID0gdXRmOGNoYXJTaXplKGNvZGUpO1xuICAgICAgICBzaXplID09PSA0ICYmIGlkeCsrLCBieXRlQ291bnQgKz0gc2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGVmdFZhbHVlID0gcGFydC52YWx1ZS5zbGljZSgwLCBpZHgpLCByaWdodFZhbHVlID0gcGFydC52YWx1ZS5zbGljZShpZHgpO1xuICAgIGxldCBuZXdQYXJ0ID0ge1xuICAgICAgdmFsdWU6IHJpZ2h0VmFsdWUsXG4gICAgICB1dGY4c2l6ZTogcmlnaHRTaXplLFxuICAgICAgdXNlczogcGFydC51c2VzLnNsaWNlKCksXG4gICAgICBzdGFydE1ldGE6IHBhcnQuc3RhcnRNZXRhLFxuICAgICAgZW5kTWV0YTogcGFydC5lbmRNZXRhXG4gICAgfTtcbiAgICBwYXJ0LnZhbHVlID0gbGVmdFZhbHVlLCBwYXJ0LnV0ZjhzaXplID0gbGVmdFNpemU7XG4gICAgZm9yIChsZXQgdXNlIG9mIHBhcnQudXNlcykge1xuICAgICAgbGV0IG5keCA9IHVzZS5wYXJ0cy5pbmRleE9mKHBhcnQpO1xuICAgICAgaWYgKG5keCA9PT0gLTEpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImJ1ZzogbWlzbWF0Y2ggYmV0d2VlbiBzdHJpbmcgcGFydHMgYW5kIHVzZS5cIik7XG4gICAgICB1c2UucGFydHMuc3BsaWNlKG5keCArIDEsIDAsIG5ld1BhcnQpO1xuICAgIH1cbiAgfVxuICBzdHJpbmdBcHBlbmRTbGljZSh0YXJnZXQsIHNvdXJjZSwgbGVmdCwgcmlnaHQpIHtcbiAgICBsZXQgc3RyID0gdGhpcy5hc1N0cmluZyhzb3VyY2UpLCBmaXJzdFBhcnQgPSB0aGlzLnJlc29sdmVTdHJpbmdQYXJ0KHN0ciwgMCwgbGVmdCksIGxhc3RQYXJ0ID0gdGhpcy5yZXNvbHZlU3RyaW5nUGFydChzdHIsIGZpcnN0UGFydCwgcmlnaHQgLSBsZWZ0KTtcbiAgICBmb3IgKGxldCBpID0gZmlyc3RQYXJ0OyBpIDwgbGFzdFBhcnQ7IGkrKykge1xuICAgICAgbGV0IHBhcnQgPSBzdHIucGFydHNbaV07XG4gICAgICB0aGlzLnN0cmluZ0FwcGVuZFBhcnQodGFyZ2V0LCBwYXJ0KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHdyYXAoZGF0YSwgbWV0YSkge1xuICByZXR1cm4geyBkYXRhLCBzdGFydE1ldGE6IG1ldGEsIGVuZE1ldGE6IG1ldGEgfTtcbn1cbmZ1bmN0aW9uIHVud3JhcCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlLmRhdGEgPCBcInVcIilcbiAgICByZXR1cm4gdmFsdWUuZGF0YTtcbiAgbGV0IHJlc3VsdCwgY29udGVudCA9IHZhbHVlLmNvbnRlbnQ7XG4gIHN3aXRjaCAoY29udGVudC50eXBlKSB7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgcmVzdWx0ID0gY29udGVudC5wYXJ0cy5tYXAoKHBhcnQpID0+IHBhcnQudmFsdWUpLmpvaW4oXCJcIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgIHJlc3VsdCA9IGNvbnRlbnQuZWxlbWVudHMubWFwKCh2YWwpID0+IHVud3JhcCh2YWwpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgcmVzdWx0ID0ge307XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNvbnRlbnQuZmllbGRzKSlcbiAgICAgICAgcmVzdWx0W2tleV0gPSB1bndyYXAodmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlLmRhdGEgPSByZXN1bHQsIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldFR5cGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLmNvbnRlbnQgPyB2YWx1ZS5jb250ZW50LnR5cGUgOiBBcnJheS5pc0FycmF5KHZhbHVlLmRhdGEpID8gXCJhcnJheVwiIDogdmFsdWUuZGF0YSA9PT0gbnVsbCA/IFwibnVsbFwiIDogdHlwZW9mIHZhbHVlLmRhdGE7XG59XG5mdW5jdGlvbiByZWJhc2VWYWx1ZShsZWZ0LCByaWdodCkge1xuICBsZXQgbGVmdFR5cGUgPSBnZXRUeXBlKGxlZnQpLCByaWdodFR5cGUgPSBnZXRUeXBlKHJpZ2h0KTtcbiAgaWYgKGxlZnRUeXBlICE9PSByaWdodFR5cGUpXG4gICAgcmV0dXJuIHJpZ2h0O1xuICBsZXQgbGVmdE1vZGVsID0gbmV3IEluY3JlbWVudGFsTW9kZWwobGVmdC5lbmRNZXRhKSwgcmlnaHRNb2RlbCA9IG5ldyBJbmNyZW1lbnRhbE1vZGVsKHJpZ2h0LmVuZE1ldGEpO1xuICBzd2l0Y2ggKGxlZnRUeXBlKSB7XG4gICAgY2FzZSBcIm9iamVjdFwiOiB7XG4gICAgICBsZXQgbGVmdE9iaiA9IGxlZnRNb2RlbC5hc09iamVjdChsZWZ0KSwgcmlnaHRPYmogPSByaWdodE1vZGVsLmFzT2JqZWN0KHJpZ2h0KSwgaWRlbnRpY2FsRmllbGRDb3VudCA9IDAsIGxlZnRGaWVsZENvdW50ID0gT2JqZWN0LmtleXMobGVmdE9iai5maWVsZHMpLmxlbmd0aCwgcmlnaHRGaWVsZENvdW50ID0gT2JqZWN0LmtleXMocmlnaHRPYmouZmllbGRzKS5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBba2V5LCByaWdodFZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmlnaHRPYmouZmllbGRzKSkge1xuICAgICAgICBsZXQgbGVmdFZhbCA9IGxlZnRPYmouZmllbGRzW2tleV07XG4gICAgICAgIGxlZnRWYWwgJiYgKHJpZ2h0T2JqLmZpZWxkc1trZXldID0gcmViYXNlVmFsdWUobGVmdFZhbCwgcmlnaHRWYWwpLCByaWdodE9iai5maWVsZHNba2V5XSA9PT0gbGVmdFZhbCAmJiBpZGVudGljYWxGaWVsZENvdW50KyspO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnRGaWVsZENvdW50ID09PSByaWdodEZpZWxkQ291bnQgJiYgbGVmdEZpZWxkQ291bnQgPT09IGlkZW50aWNhbEZpZWxkQ291bnQgPyBsZWZ0IDogcmlnaHQ7XG4gICAgfVxuICAgIGNhc2UgXCJhcnJheVwiOiB7XG4gICAgICBsZXQgbGVmdEFyciA9IGxlZnRNb2RlbC5hc0FycmF5KGxlZnQpLCByaWdodEFyciA9IHJpZ2h0TW9kZWwuYXNBcnJheShyaWdodCk7XG4gICAgICBpZiAobGVmdEFyci5lbGVtZW50cy5sZW5ndGggIT09IHJpZ2h0QXJyLmVsZW1lbnRzLmxlbmd0aClcbiAgICAgICAgYnJlYWs7XG4gICAgICBsZXQgbnVtUmViYXNlZCA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJpZ2h0QXJyLmVsZW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICByaWdodEFyci5lbGVtZW50c1tpXSA9IHJlYmFzZVZhbHVlKGxlZnRBcnIuZWxlbWVudHNbaV0sIHJpZ2h0QXJyLmVsZW1lbnRzW2ldKSwgcmlnaHRBcnIuZWxlbWVudHNbaV0gIT09IGxlZnRBcnIuZWxlbWVudHNbaV0gJiYgbnVtUmViYXNlZCsrO1xuICAgICAgcmV0dXJuIG51bVJlYmFzZWQgPT09IDAgPyBsZWZ0IDogcmlnaHQ7XG4gICAgfVxuICAgIGNhc2UgXCJudWxsXCI6XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6IHtcbiAgICAgIGlmICh1bndyYXAobGVmdCkgPT09IHVud3JhcChyaWdodCkpXG4gICAgICAgIHJldHVybiBsZWZ0O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzdHJpbmdcIjoge1xuICAgICAgbGV0IGxlZnRSYXcgPSB1bndyYXAobGVmdCksIHJpZ2h0UmF3ID0gdW53cmFwKHJpZ2h0KTtcbiAgICAgIGlmIChsZWZ0UmF3ID09PSByaWdodFJhdylcbiAgICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgICBsZXQgcmVzdWx0ID0gcmlnaHRNb2RlbC5jb3B5U3RyaW5nKG51bGwpLCBwcmVmaXggPSBjb21tb25QcmVmaXgobGVmdFJhdywgcmlnaHRSYXcpLCBzdWZmaXggPSBjb21tb25TdWZmaXgobGVmdFJhdywgcmlnaHRSYXcsIHByZWZpeCksIHJpZ2h0TGVuID0gdXRmOHN0cmluZ1NpemUocmlnaHRSYXcpLCBsZWZ0TGVuID0gdXRmOHN0cmluZ1NpemUobGVmdFJhdyk7XG4gICAgICAwIDwgcHJlZml4ICYmIHJpZ2h0TW9kZWwuc3RyaW5nQXBwZW5kU2xpY2UocmVzdWx0LCBsZWZ0LCAwLCBwcmVmaXgpLCBwcmVmaXggPCByaWdodExlbiAtIHN1ZmZpeCAmJiByaWdodE1vZGVsLnN0cmluZ0FwcGVuZFNsaWNlKHJlc3VsdCwgcmlnaHQsIHByZWZpeCwgcmlnaHRMZW4gLSBzdWZmaXgpLCBsZWZ0TGVuIC0gc3VmZml4IDwgbGVmdExlbiAmJiByaWdodE1vZGVsLnN0cmluZ0FwcGVuZFNsaWNlKHJlc3VsdCwgbGVmdCwgbGVmdExlbiAtIHN1ZmZpeCwgbGVmdExlbik7XG4gICAgICBsZXQgdmFsdWUgPSByaWdodE1vZGVsLmZpbmFsaXplKHJlc3VsdCk7XG4gICAgICBpZiAodW53cmFwKHZhbHVlKSAhPT0gcmlnaHRSYXcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImluY29ycmVjdCBzdHJpbmcgcmViYXNlXCIpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmlnaHQ7XG59XG5mdW5jdGlvbiBhcHBseVBhdGNoJDEobGVmdCwgcGF0Y2gsIHN0YXJ0TWV0YSkge1xuICBsZXQgbW9kZWwgPSBuZXcgSW5jcmVtZW50YWxNb2RlbChzdGFydE1ldGEpO1xuICByZXR1cm4gbmV3IFBhdGNoZXIobW9kZWwsIGxlZnQsIHBhdGNoKS5wcm9jZXNzKCk7XG59XG52YXIgaW5jcmVtZW50YWxQYXRjaGVyID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGFwcGx5UGF0Y2g6IGFwcGx5UGF0Y2gkMSxcbiAgZ2V0VHlwZSxcbiAgcmViYXNlVmFsdWUsXG4gIHVud3JhcCxcbiAgd3JhcFxufSk7XG5jbGFzcyBTaW1wbGVNb2RlbCB7XG4gIHdyYXAoZGF0YSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGZpbmFsaXplKGIpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSA/IGIgOiBiLmRhdGE7XG4gIH1cbiAgbWFya0NoYW5nZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgb2JqZWN0R2V0S2V5cyh2YWx1ZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIH1cbiAgb2JqZWN0R2V0RmllbGQodmFsdWUsIGtleSkge1xuICAgIHJldHVybiB2YWx1ZVtrZXldO1xuICB9XG4gIGFycmF5R2V0RWxlbWVudCh2YWx1ZSwgaWR4KSB7XG4gICAgcmV0dXJuIHZhbHVlW2lkeF07XG4gIH1cbiAgY29weU9iamVjdCh2YWx1ZSkge1xuICAgIGxldCByZXMgPSB7XG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgZGF0YToge31cbiAgICB9O1xuICAgIGlmICh2YWx1ZSAhPT0gbnVsbClcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKVxuICAgICAgICByZXMuZGF0YVtrZXldID0gdmFsO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgY29weUFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gW10gOiB2YWx1ZS5zbGljZSgpO1xuICB9XG4gIGNvcHlTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGRhdGE6IHZhbHVlID09PSBudWxsID8gXCJcIiA6IHZhbHVlXG4gICAgfTtcbiAgfVxuICBvYmplY3RTZXRGaWVsZCh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICB0YXJnZXQuZGF0YVtrZXldID0gdmFsdWU7XG4gIH1cbiAgb2JqZWN0RGVsZXRlRmllbGQodGFyZ2V0LCBrZXkpIHtcbiAgICBkZWxldGUgdGFyZ2V0LmRhdGFba2V5XTtcbiAgfVxuICBhcnJheUFwcGVuZFZhbHVlKHRhcmdldCwgdmFsdWUpIHtcbiAgICB0YXJnZXQucHVzaCh2YWx1ZSk7XG4gIH1cbiAgYXJyYXlBcHBlbmRTbGljZSh0YXJnZXQsIHNvdXJjZSwgbGVmdCwgcmlnaHQpIHtcbiAgICB0YXJnZXQucHVzaCguLi5zb3VyY2Uuc2xpY2UobGVmdCwgcmlnaHQpKTtcbiAgfVxuICBzdHJpbmdBcHBlbmRTbGljZSh0YXJnZXQsIHNvdXJjZSwgbGVmdCwgcmlnaHQpIHtcbiAgICBjb25zdCBzb3VyY2VTdHJpbmcgPSBzb3VyY2UsIGxlZnRQb3MgPSB1dGY4cmVzb2x2ZUluZGV4KHNvdXJjZVN0cmluZywgbGVmdCksIHJpZ2h0UG9zID0gdXRmOHJlc29sdmVJbmRleChzb3VyY2VTdHJpbmcsIHJpZ2h0LCBsZWZ0UG9zKTtcbiAgICB0YXJnZXQuZGF0YSArPSBzb3VyY2VTdHJpbmcuc2xpY2UobGVmdFBvcywgcmlnaHRQb3MpO1xuICB9XG4gIHN0cmluZ0FwcGVuZFZhbHVlKHRhcmdldCwgdmFsdWUpIHtcbiAgICB0YXJnZXQuZGF0YSArPSB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gYXBwbHlQYXRjaChsZWZ0LCBwYXRjaCkge1xuICBsZXQgcm9vdCA9IGxlZnQ7XG4gIHJldHVybiBuZXcgUGF0Y2hlcihuZXcgU2ltcGxlTW9kZWwoKSwgcm9vdCwgcGF0Y2gpLnByb2Nlc3MoKTtcbn1cbmV4cG9ydCB7XG4gIGFwcGx5UGF0Y2gsXG4gIGluY3JlbWVudGFsUGF0Y2hlciBhcyBpbmNyZW1lbnRhbFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9QUyIsIlBhdGNoZXIiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwicm9vdCIsInBhdGNoIiwiaSIsImlucHV0U3RhY2siLCJvdXRwdXRTdGFjayIsInJlYWQiLCJwcm9jZXNzIiwicHVzaCIsInZhbHVlIiwibGVuZ3RoIiwib3Bjb2RlIiwib3AiLCJFcnJvciIsInByb2Nlc3NvciIsImFwcGx5IiwiZW50cnkiLCJwb3AiLCJmaW5hbGl6ZU91dHB1dCIsImlucHV0RW50cnkiLCJpbnB1dEtleSIsImlkeCIsImtleXMiLCJvYmplY3RHZXRLZXlzIiwic29ydCIsIm91dHB1dEVudHJ5Iiwib3V0cHV0QXJyYXkiLCJ3cml0ZVZhbHVlIiwiY29weUFycmF5Iiwib3V0cHV0T2JqZWN0IiwiY29weU9iamVjdCIsIm91dHB1dFN0cmluZyIsImNvcHlTdHJpbmciLCJmaW5hbGl6ZSIsInByb2Nlc3NWYWx1ZSIsIndyYXAiLCJwcm9jZXNzQ29weSIsImlucHV0IiwicHJvY2Vzc0JsYW5rIiwicHJvY2Vzc1JldHVybkludG9BcnJheSIsInJlc3VsdCIsImFyciIsImFycmF5QXBwZW5kVmFsdWUiLCJwcm9jZXNzUmV0dXJuSW50b09iamVjdCIsImtleSIsIm1hcmtDaGFuZ2VkIiwib2JqIiwib2JqZWN0U2V0RmllbGQiLCJwcm9jZXNzUmV0dXJuSW50b09iamVjdFNhbWVLZXkiLCJwcm9jZXNzUHVzaEZpZWxkIiwib2JqZWN0R2V0RmllbGQiLCJwcm9jZXNzUHVzaEVsZW1lbnQiLCJhcnJheUdldEVsZW1lbnQiLCJwcm9jZXNzUG9wIiwicHJvY2Vzc1B1c2hGaWVsZENvcHkiLCJwcm9jZXNzUHVzaEZpZWxkQmxhbmsiLCJwcm9jZXNzUHVzaEVsZW1lbnRDb3B5IiwicHJvY2Vzc1B1c2hFbGVtZW50QmxhbmsiLCJwcm9jZXNzUmV0dXJuSW50b09iamVjdFBvcCIsInByb2Nlc3NSZXR1cm5JbnRvT2JqZWN0U2FtZUtleVBvcCIsInByb2Nlc3NSZXR1cm5JbnRvQXJyYXlQb3AiLCJwcm9jZXNzT2JqZWN0U2V0RmllbGRWYWx1ZSIsInByb2Nlc3NPYmplY3RDb3B5RmllbGQiLCJwcm9jZXNzT2JqZWN0RGVsZXRlRmllbGQiLCJvYmplY3REZWxldGVGaWVsZCIsInByb2Nlc3NBcnJheUFwcGVuZFZhbHVlIiwicHJvY2Vzc0FycmF5QXBwZW5kU2xpY2UiLCJsZWZ0IiwicmlnaHQiLCJzdHIiLCJ2YWwiLCJhcnJheUFwcGVuZFNsaWNlIiwicHJvY2Vzc1N0cmluZ0FwcGVuZFN0cmluZyIsInN0cmluZ0FwcGVuZFZhbHVlIiwicHJvY2Vzc1N0cmluZ0FwcGVuZFNsaWNlIiwic3RyaW5nQXBwZW5kU2xpY2UiLCJ1dGY4Y2hhclNpemUiLCJjb2RlIiwidXRmOHN0cmluZ1NpemUiLCJiIiwiY29kZVBvaW50QXQiLCJzaXplIiwidXRmOHJlc29sdmVJbmRleCIsInN0YXJ0IiwiYnl0ZUNvdW50IiwidWNzSWR4IiwiY29tbW9uUHJlZml4Iiwic3RyMiIsImxlbiIsIk1hdGgiLCJtaW4iLCJhUG9pbnQiLCJiUG9pbnQiLCJjb21tb25TdWZmaXgiLCJwcmVmaXgiLCJJbmNyZW1lbnRhbE1vZGVsIiwibWV0YSIsImRhdGEiLCJ3cmFwV2l0aE1ldGEiLCJzdGFydE1ldGEiLCJlbmRNZXRhIiwiYXNPYmplY3QiLCJjb250ZW50IiwiZmllbGRzIiwiT2JqZWN0IiwiZW50cmllcyIsInR5cGUiLCJhc0FycmF5IiwiZWxlbWVudHMiLCJtYXAiLCJpdGVtIiwibWV0YXMiLCJhc1N0cmluZyIsInBhcnQiLCJ1dGY4c2l6ZSIsInVzZXMiLCJzdHJpbmdGcm9tUGFydHMiLCJwYXJ0cyIsInVwZGF0ZUVuZE1ldGEiLCJ1bndyYXAiLCJ2YWx1ZXMiLCJvdGhlciIsInNsaWNlIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwic2FtZVBvc2l0aW9uIiwic3RyaW5nQXBwZW5kUGFydCIsInJlc29sdmVTdHJpbmdQYXJ0IiwiZnJvbSIsInNwbGl0U3RyaW5nIiwibGVmdFZhbHVlIiwicmlnaHRWYWx1ZSIsImxlZnRTaXplIiwicmlnaHRTaXplIiwibmV3UGFydCIsInVzZSIsIm5keCIsImluZGV4T2YiLCJzcGxpY2UiLCJmaXJzdFBhcnQiLCJsYXN0UGFydCIsImpvaW4iLCJnZXRUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwicmViYXNlVmFsdWUiLCJsZWZ0VHlwZSIsInJpZ2h0VHlwZSIsImxlZnRNb2RlbCIsInJpZ2h0TW9kZWwiLCJsZWZ0T2JqIiwicmlnaHRPYmoiLCJpZGVudGljYWxGaWVsZENvdW50IiwibGVmdEZpZWxkQ291bnQiLCJyaWdodEZpZWxkQ291bnQiLCJyaWdodFZhbCIsImxlZnRWYWwiLCJsZWZ0QXJyIiwicmlnaHRBcnIiLCJudW1SZWJhc2VkIiwibGVmdFJhdyIsInJpZ2h0UmF3Iiwic3VmZml4IiwicmlnaHRMZW4iLCJsZWZ0TGVuIiwiYXBwbHlQYXRjaCQxIiwiaW5jcmVtZW50YWxQYXRjaGVyIiwiZnJlZXplIiwiX19wcm90b19fIiwiYXBwbHlQYXRjaCIsIlNpbXBsZU1vZGVsIiwicmVzIiwic291cmNlU3RyaW5nIiwibGVmdFBvcyIsInJpZ2h0UG9zIiwiaW5jcmVtZW50YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mendoza/dist/index.js\n");

/***/ })

};
;