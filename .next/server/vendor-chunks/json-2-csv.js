"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/json-2-csv";
exports.ids = ["vendor-chunks/json-2-csv"];
exports.modules = {

/***/ "(ssr)/./node_modules/json-2-csv/lib/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/json-2-csv/lib/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.excelBOM = exports.defaultCsv2JsonOptions = exports.defaultJson2CsvOptions = exports.errors = void 0;\nexports.errors = {\n    optionsRequired: \"Options were not passed and are required.\",\n    json2csv: {\n        cannotCallOn: \"Cannot call json2csv on\",\n        dataCheckFailure: \"Data provided was not an array of documents.\",\n        notSameSchema: \"Not all documents have the same schema.\"\n    },\n    csv2json: {\n        cannotCallOn: \"Cannot call csv2json on\",\n        dataCheckFailure: \"CSV is not a string.\"\n    }\n};\nexports.defaultJson2CsvOptions = {\n    arrayIndexesAsKeys: false,\n    checkSchemaDifferences: false,\n    delimiter: {\n        field: \",\",\n        wrap: '\"',\n        eol: \"\\n\"\n    },\n    emptyFieldValue: undefined,\n    escapeHeaderNestedDots: true,\n    excelBOM: false,\n    excludeKeys: [],\n    expandNestedObjects: true,\n    expandArrayObjects: false,\n    prependHeader: true,\n    preventCsvInjection: false,\n    sortHeader: false,\n    trimFieldValues: false,\n    trimHeaderFields: false,\n    unwindArrays: false,\n    useDateIso8601Format: false,\n    useLocaleFormat: false,\n    wrapBooleans: false\n};\nexports.defaultCsv2JsonOptions = {\n    delimiter: {\n        field: \",\",\n        wrap: '\"',\n        eol: \"\\n\"\n    },\n    excelBOM: false,\n    preventCsvInjection: false,\n    trimFieldValues: false,\n    trimHeaderFields: false\n};\nexports.excelBOM = \"\\uFEFF\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbi0yLWNzdi9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBR0EsOEJBQThCLEdBQUdBLDhCQUE4QixHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUMzR0EsY0FBYyxHQUFHO0lBQ2JNLGlCQUFpQjtJQUNqQkMsVUFBVTtRQUNOQyxjQUFjO1FBQ2RDLGtCQUFrQjtRQUNsQkMsZUFBZTtJQUNuQjtJQUNBQyxVQUFVO1FBQ05ILGNBQWM7UUFDZEMsa0JBQWtCO0lBQ3RCO0FBQ0o7QUFDQVQsOEJBQThCLEdBQUc7SUFDN0JZLG9CQUFvQjtJQUNwQkMsd0JBQXdCO0lBQ3hCQyxXQUFXO1FBQ1BDLE9BQU87UUFDUEMsTUFBTTtRQUNOQyxLQUFLO0lBQ1Q7SUFDQUMsaUJBQWlCQztJQUNqQkMsd0JBQXdCO0lBQ3hCbEIsVUFBVTtJQUNWbUIsYUFBYSxFQUFFO0lBQ2ZDLHFCQUFxQjtJQUNyQkMsb0JBQW9CO0lBQ3BCQyxlQUFlO0lBQ2ZDLHFCQUFxQjtJQUNyQkMsWUFBWTtJQUNaQyxpQkFBaUI7SUFDakJDLGtCQUFrQjtJQUNsQkMsY0FBYztJQUNkQyxzQkFBc0I7SUFDdEJDLGlCQUFpQjtJQUNqQkMsY0FBYztBQUNsQjtBQUNBaEMsOEJBQThCLEdBQUc7SUFDN0JjLFdBQVc7UUFDUEMsT0FBTztRQUNQQyxNQUFNO1FBQ05DLEtBQUs7SUFDVDtJQUNBZixVQUFVO0lBQ1Z1QixxQkFBcUI7SUFDckJFLGlCQUFpQjtJQUNqQkMsa0JBQWtCO0FBQ3RCO0FBQ0E1QixnQkFBZ0IsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvanNvbi0yLWNzdi9saWIvY29uc3RhbnRzLmpzP2QxNmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leGNlbEJPTSA9IGV4cG9ydHMuZGVmYXVsdENzdjJKc29uT3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdEpzb24yQ3N2T3B0aW9ucyA9IGV4cG9ydHMuZXJyb3JzID0gdm9pZCAwO1xuZXhwb3J0cy5lcnJvcnMgPSB7XG4gICAgb3B0aW9uc1JlcXVpcmVkOiAnT3B0aW9ucyB3ZXJlIG5vdCBwYXNzZWQgYW5kIGFyZSByZXF1aXJlZC4nLFxuICAgIGpzb24yY3N2OiB7XG4gICAgICAgIGNhbm5vdENhbGxPbjogJ0Nhbm5vdCBjYWxsIGpzb24yY3N2IG9uJyxcbiAgICAgICAgZGF0YUNoZWNrRmFpbHVyZTogJ0RhdGEgcHJvdmlkZWQgd2FzIG5vdCBhbiBhcnJheSBvZiBkb2N1bWVudHMuJyxcbiAgICAgICAgbm90U2FtZVNjaGVtYTogJ05vdCBhbGwgZG9jdW1lbnRzIGhhdmUgdGhlIHNhbWUgc2NoZW1hLidcbiAgICB9LFxuICAgIGNzdjJqc29uOiB7XG4gICAgICAgIGNhbm5vdENhbGxPbjogJ0Nhbm5vdCBjYWxsIGNzdjJqc29uIG9uJyxcbiAgICAgICAgZGF0YUNoZWNrRmFpbHVyZTogJ0NTViBpcyBub3QgYSBzdHJpbmcuJ1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHRKc29uMkNzdk9wdGlvbnMgPSB7XG4gICAgYXJyYXlJbmRleGVzQXNLZXlzOiBmYWxzZSxcbiAgICBjaGVja1NjaGVtYURpZmZlcmVuY2VzOiBmYWxzZSxcbiAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgZmllbGQ6ICcsJyxcbiAgICAgICAgd3JhcDogJ1wiJyxcbiAgICAgICAgZW9sOiAnXFxuJ1xuICAgIH0sXG4gICAgZW1wdHlGaWVsZFZhbHVlOiB1bmRlZmluZWQsXG4gICAgZXNjYXBlSGVhZGVyTmVzdGVkRG90czogdHJ1ZSxcbiAgICBleGNlbEJPTTogZmFsc2UsXG4gICAgZXhjbHVkZUtleXM6IFtdLFxuICAgIGV4cGFuZE5lc3RlZE9iamVjdHM6IHRydWUsXG4gICAgZXhwYW5kQXJyYXlPYmplY3RzOiBmYWxzZSxcbiAgICBwcmVwZW5kSGVhZGVyOiB0cnVlLFxuICAgIHByZXZlbnRDc3ZJbmplY3Rpb246IGZhbHNlLFxuICAgIHNvcnRIZWFkZXI6IGZhbHNlLFxuICAgIHRyaW1GaWVsZFZhbHVlczogZmFsc2UsXG4gICAgdHJpbUhlYWRlckZpZWxkczogZmFsc2UsXG4gICAgdW53aW5kQXJyYXlzOiBmYWxzZSxcbiAgICB1c2VEYXRlSXNvODYwMUZvcm1hdDogZmFsc2UsXG4gICAgdXNlTG9jYWxlRm9ybWF0OiBmYWxzZSxcbiAgICB3cmFwQm9vbGVhbnM6IGZhbHNlLFxufTtcbmV4cG9ydHMuZGVmYXVsdENzdjJKc29uT3B0aW9ucyA9IHtcbiAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgZmllbGQ6ICcsJyxcbiAgICAgICAgd3JhcDogJ1wiJyxcbiAgICAgICAgZW9sOiAnXFxuJ1xuICAgIH0sXG4gICAgZXhjZWxCT006IGZhbHNlLFxuICAgIHByZXZlbnRDc3ZJbmplY3Rpb246IGZhbHNlLFxuICAgIHRyaW1GaWVsZFZhbHVlczogZmFsc2UsXG4gICAgdHJpbUhlYWRlckZpZWxkczogZmFsc2UsXG59O1xuZXhwb3J0cy5leGNlbEJPTSA9ICdcXHVmZWZmJztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4Y2VsQk9NIiwiZGVmYXVsdENzdjJKc29uT3B0aW9ucyIsImRlZmF1bHRKc29uMkNzdk9wdGlvbnMiLCJlcnJvcnMiLCJvcHRpb25zUmVxdWlyZWQiLCJqc29uMmNzdiIsImNhbm5vdENhbGxPbiIsImRhdGFDaGVja0ZhaWx1cmUiLCJub3RTYW1lU2NoZW1hIiwiY3N2Mmpzb24iLCJhcnJheUluZGV4ZXNBc0tleXMiLCJjaGVja1NjaGVtYURpZmZlcmVuY2VzIiwiZGVsaW1pdGVyIiwiZmllbGQiLCJ3cmFwIiwiZW9sIiwiZW1wdHlGaWVsZFZhbHVlIiwidW5kZWZpbmVkIiwiZXNjYXBlSGVhZGVyTmVzdGVkRG90cyIsImV4Y2x1ZGVLZXlzIiwiZXhwYW5kTmVzdGVkT2JqZWN0cyIsImV4cGFuZEFycmF5T2JqZWN0cyIsInByZXBlbmRIZWFkZXIiLCJwcmV2ZW50Q3N2SW5qZWN0aW9uIiwic29ydEhlYWRlciIsInRyaW1GaWVsZFZhbHVlcyIsInRyaW1IZWFkZXJGaWVsZHMiLCJ1bndpbmRBcnJheXMiLCJ1c2VEYXRlSXNvODYwMUZvcm1hdCIsInVzZUxvY2FsZUZvcm1hdCIsIndyYXBCb29sZWFucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-2-csv/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/json-2-csv/lib/converter.js":
/*!**************************************************!*\
  !*** ./node_modules/json-2-csv/lib/converter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.csv2json = exports.json2csv = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/json-2-csv/lib/constants.js\");\nconst json2csv_1 = __webpack_require__(/*! ./json2csv */ \"(ssr)/./node_modules/json-2-csv/lib/json2csv.js\");\nconst csv2json_1 = __webpack_require__(/*! ./csv2json */ \"(ssr)/./node_modules/json-2-csv/lib/csv2json.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/json-2-csv/lib/utils.js\");\nfunction json2csv(data, options) {\n    const builtOptions = (0, utils_1.buildJ2COptions)(options ?? {});\n    // Validate the parameters before calling the converter's convert function\n    (0, utils_1.validate)(data, utils_1.isObject, constants_1.errors.json2csv);\n    return (0, json2csv_1.Json2Csv)(builtOptions).convert(data);\n}\nexports.json2csv = json2csv;\nfunction csv2json(data, options) {\n    const builtOptions = (0, utils_1.buildC2JOptions)(options ?? {});\n    // Validate the parameters before calling the converter's convert function\n    (0, utils_1.validate)(data, utils_1.isString, constants_1.errors.csv2json);\n    return (0, csv2json_1.Csv2Json)(builtOptions).convert(data);\n}\nexports.csv2json = csv2json;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbi0yLWNzdi9saWIvY29udmVydGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUMzQyxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQyxxRUFBYTtBQUN6QyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxtRUFBWTtBQUN2QyxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQyxtRUFBWTtBQUN2QyxNQUFNRyxVQUFVSCxtQkFBT0EsQ0FBQyw2REFBUztBQUNqQyxTQUFTRixTQUFTTSxJQUFJLEVBQUVDLE9BQU87SUFDM0IsTUFBTUMsZUFBZSxDQUFDLEdBQUdILFFBQVFJLGVBQWUsRUFBRUYsV0FBVyxDQUFDO0lBQzlELDBFQUEwRTtJQUN6RSxJQUFHRixRQUFRSyxRQUFRLEVBQUVKLE1BQU1ELFFBQVFNLFFBQVEsRUFBRVYsWUFBWVcsTUFBTSxDQUFDWixRQUFRO0lBQ3pFLE9BQU8sQ0FBQyxHQUFHRyxXQUFXVSxRQUFRLEVBQUVMLGNBQWNNLE9BQU8sQ0FBQ1I7QUFDMUQ7QUFDQVQsZ0JBQWdCLEdBQUdHO0FBQ25CLFNBQVNELFNBQVNPLElBQUksRUFBRUMsT0FBTztJQUMzQixNQUFNQyxlQUFlLENBQUMsR0FBR0gsUUFBUVUsZUFBZSxFQUFFUixXQUFXLENBQUM7SUFDOUQsMEVBQTBFO0lBQ3pFLElBQUdGLFFBQVFLLFFBQVEsRUFBRUosTUFBTUQsUUFBUVcsUUFBUSxFQUFFZixZQUFZVyxNQUFNLENBQUNiLFFBQVE7SUFDekUsT0FBTyxDQUFDLEdBQUdLLFdBQVdhLFFBQVEsRUFBRVQsY0FBY00sT0FBTyxDQUFDUjtBQUMxRDtBQUNBVCxnQkFBZ0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2pzb24tMi1jc3YvbGliL2NvbnZlcnRlci5qcz8zZTIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3N2Mmpzb24gPSBleHBvcnRzLmpzb24yY3N2ID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBqc29uMmNzdl8xID0gcmVxdWlyZShcIi4vanNvbjJjc3ZcIik7XG5jb25zdCBjc3YyanNvbl8xID0gcmVxdWlyZShcIi4vY3N2Mmpzb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiBqc29uMmNzdihkYXRhLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYnVpbHRPcHRpb25zID0gKDAsIHV0aWxzXzEuYnVpbGRKMkNPcHRpb25zKShvcHRpb25zID8/IHt9KTtcbiAgICAvLyBWYWxpZGF0ZSB0aGUgcGFyYW1ldGVycyBiZWZvcmUgY2FsbGluZyB0aGUgY29udmVydGVyJ3MgY29udmVydCBmdW5jdGlvblxuICAgICgwLCB1dGlsc18xLnZhbGlkYXRlKShkYXRhLCB1dGlsc18xLmlzT2JqZWN0LCBjb25zdGFudHNfMS5lcnJvcnMuanNvbjJjc3YpO1xuICAgIHJldHVybiAoMCwganNvbjJjc3ZfMS5Kc29uMkNzdikoYnVpbHRPcHRpb25zKS5jb252ZXJ0KGRhdGEpO1xufVxuZXhwb3J0cy5qc29uMmNzdiA9IGpzb24yY3N2O1xuZnVuY3Rpb24gY3N2Mmpzb24oZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGJ1aWx0T3B0aW9ucyA9ICgwLCB1dGlsc18xLmJ1aWxkQzJKT3B0aW9ucykob3B0aW9ucyA/PyB7fSk7XG4gICAgLy8gVmFsaWRhdGUgdGhlIHBhcmFtZXRlcnMgYmVmb3JlIGNhbGxpbmcgdGhlIGNvbnZlcnRlcidzIGNvbnZlcnQgZnVuY3Rpb25cbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZSkoZGF0YSwgdXRpbHNfMS5pc1N0cmluZywgY29uc3RhbnRzXzEuZXJyb3JzLmNzdjJqc29uKTtcbiAgICByZXR1cm4gKDAsIGNzdjJqc29uXzEuQ3N2Mkpzb24pKGJ1aWx0T3B0aW9ucykuY29udmVydChkYXRhKTtcbn1cbmV4cG9ydHMuY3N2Mmpzb24gPSBjc3YyanNvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNzdjJqc29uIiwianNvbjJjc3YiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJqc29uMmNzdl8xIiwiY3N2Mmpzb25fMSIsInV0aWxzXzEiLCJkYXRhIiwib3B0aW9ucyIsImJ1aWx0T3B0aW9ucyIsImJ1aWxkSjJDT3B0aW9ucyIsInZhbGlkYXRlIiwiaXNPYmplY3QiLCJlcnJvcnMiLCJKc29uMkNzdiIsImNvbnZlcnQiLCJidWlsZEMySk9wdGlvbnMiLCJpc1N0cmluZyIsIkNzdjJKc29uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-2-csv/lib/converter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/json-2-csv/lib/csv2json.js":
/*!*************************************************!*\
  !*** ./node_modules/json-2-csv/lib/csv2json.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Csv2Json = void 0;\nconst doc_path_1 = __webpack_require__(/*! doc-path */ \"(ssr)/./node_modules/doc-path/lib/path.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/json-2-csv/lib/constants.js\");\nconst utils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/json-2-csv/lib/utils.js\"));\nconst Csv2Json = function(options) {\n    const escapedWrapDelimiterRegex = new RegExp(options.delimiter.wrap + options.delimiter.wrap, \"g\"), excelBOMRegex = new RegExp(\"^\" + constants_1.excelBOM), valueParserFn = options.parseValue && typeof options.parseValue === \"function\" ? options.parseValue : JSON.parse;\n    /**\n     * Trims the header key, if specified by the user via the provided options\n     */ function processHeaderKey(headerKey) {\n        headerKey = removeWrapDelimitersFromValue(headerKey);\n        if (options.trimHeaderFields) {\n            return headerKey.split(\".\").map((component)=>component.trim()).join(\".\");\n        }\n        return headerKey;\n    }\n    /**\n     * Generate the JSON heading from the CSV\n     */ function retrieveHeading(lines) {\n        let headerFields = [];\n        if (options.headerFields) {\n            headerFields = options.headerFields.map((headerField, index)=>({\n                    value: processHeaderKey(headerField),\n                    index\n                }));\n        } else {\n            // Generate and return the heading keys\n            const headerRow = lines[0];\n            headerFields = headerRow.map((headerKey, index)=>({\n                    value: processHeaderKey(headerKey),\n                    index\n                }));\n            // If the user provided keys, filter the generated keys to just the user provided keys so we also have the key index\n            if (options.keys) {\n                const keys = options.keys; // TypeScript type checking work around to get it to recognize the option is not undefined\n                headerFields = headerFields.filter((headerKey)=>keys.includes(headerKey.value));\n            }\n        }\n        return {\n            lines,\n            headerFields,\n            recordLines: []\n        };\n    }\n    /**\n     * Removes the Excel BOM value, if specified by the options object\n     */ function stripExcelBOM(csv) {\n        if (options.excelBOM) {\n            return csv.replace(excelBOMRegex, \"\");\n        }\n        return csv;\n    }\n    /**\n     * Helper function that splits a line so that we can handle wrapped fields\n     */ function splitLines(csv) {\n        // Parse out the line...\n        const lines = [], lastCharacterIndex = csv.length - 1, eolDelimiterLength = options.delimiter.eol.length, stateVariables = {\n            insideWrapDelimiter: false,\n            parsingValue: true,\n            justParsedDoubleQuote: false,\n            startIndex: 0\n        };\n        let splitLine = [], character, charBefore, charAfter, nextNChar, index = 0;\n        // Loop through each character in the line to identify where to split the values\n        while(index < csv.length){\n            // Current character\n            character = csv[index];\n            // Previous character\n            charBefore = index ? csv[index - 1] : \"\";\n            // Next character\n            charAfter = index < lastCharacterIndex ? csv[index + 1] : \"\";\n            // Next n characters, including the current character, where n = length(EOL delimiter)\n            // This allows for the checking of an EOL delimiter when if it is more than a single character (eg. '\\r\\n')\n            nextNChar = utils.getNCharacters(csv, index, eolDelimiterLength);\n            if ((nextNChar === options.delimiter.eol && !stateVariables.insideWrapDelimiter || index === lastCharacterIndex) && charBefore === options.delimiter.field) {\n                // If we reached an EOL delimiter or the end of the csv and the previous character is a field delimiter...\n                // If the start index is the current index (and since the previous character is a comma),\n                //   then the value being parsed is an empty value accordingly, add an empty string\n                if (nextNChar === options.delimiter.eol && stateVariables.startIndex === index) {\n                    splitLine.push(\"\");\n                } else if (character === options.delimiter.field) {\n                    // If we reached the end of the CSV, there's no new line, and the current character is a comma\n                    // then add an empty string for the current value\n                    splitLine.push(\"\");\n                } else {\n                    // Otherwise, there's a valid value, and the start index isn't the current index, grab the whole value\n                    splitLine.push(csv.substring(stateVariables.startIndex));\n                }\n                // Since the last character is a comma, there's still an additional implied field value trailing the comma.\n                //   Since this value is empty, we push an extra empty value\n                splitLine.push(\"\");\n                // Finally, push the split line values into the lines array and clear the split line\n                lines.push(splitLine);\n                splitLine = [];\n                stateVariables.startIndex = index + eolDelimiterLength;\n                stateVariables.parsingValue = true;\n                stateVariables.insideWrapDelimiter = charAfter === options.delimiter.wrap;\n            } else if (index === lastCharacterIndex && character === options.delimiter.field) {\n                // If we reach the end of the CSV and the current character is a field delimiter\n                // Parse the previously seen value and add it to the line\n                const parsedValue = csv.substring(stateVariables.startIndex, index);\n                splitLine.push(parsedValue);\n                // Then add an empty string to the line since the last character being a field delimiter indicates an empty field\n                splitLine.push(\"\");\n                lines.push(splitLine);\n            } else if (index === lastCharacterIndex || nextNChar === options.delimiter.eol && // if we aren't inside wrap delimiters or if we are but the character before was a wrap delimiter and we didn't just see two\n            (!stateVariables.insideWrapDelimiter || stateVariables.insideWrapDelimiter && charBefore === options.delimiter.wrap && !stateVariables.justParsedDoubleQuote)) {\n                // Otherwise if we reached the end of the line or csv (and current character is not a field delimiter)\n                const toIndex = index !== lastCharacterIndex || charBefore === options.delimiter.wrap ? index : undefined;\n                // Retrieve the remaining value and add it to the split line list of values\n                splitLine.push(csv.substring(stateVariables.startIndex, toIndex));\n                // Finally, push the split line values into the lines array and clear the split line\n                lines.push(splitLine);\n                splitLine = [];\n                stateVariables.startIndex = index + eolDelimiterLength;\n                stateVariables.parsingValue = true;\n                stateVariables.insideWrapDelimiter = charAfter === options.delimiter.wrap;\n            } else if (character === options.delimiter.wrap && charBefore === options.delimiter.field && !stateVariables.insideWrapDelimiter && !stateVariables.parsingValue) {\n                // If we reached a wrap delimiter after a comma and we aren't inside a wrap delimiter\n                stateVariables.startIndex = index;\n                stateVariables.insideWrapDelimiter = true;\n                stateVariables.parsingValue = true;\n                // If the next character(s) are an EOL delimiter, then skip them so we don't parse what we've seen as another value\n                if (utils.getNCharacters(csv, index + 1, eolDelimiterLength) === options.delimiter.eol) {\n                    index += options.delimiter.eol.length + 1; // Skip past EOL\n                }\n            } else if (charBefore === options.delimiter.field && character === options.delimiter.wrap && charAfter === options.delimiter.eol) {\n                // We reached the start of a wrapped new field that begins with an EOL delimiter\n                // Retrieve the remaining value and add it to the split line list of values\n                splitLine.push(csv.substring(stateVariables.startIndex, index - 1));\n                stateVariables.startIndex = index;\n                stateVariables.parsingValue = true;\n                stateVariables.insideWrapDelimiter = true;\n                stateVariables.justParsedDoubleQuote = true;\n                index += 1;\n            } else if ((charBefore !== options.delimiter.wrap || stateVariables.justParsedDoubleQuote && charBefore === options.delimiter.wrap) && character === options.delimiter.wrap && utils.getNCharacters(csv, index + 1, eolDelimiterLength) === options.delimiter.eol) {\n                // If we reach a wrap which is not preceded by a wrap delim and the next character is an EOL delim (ie. *\"\\n)\n                stateVariables.insideWrapDelimiter = false;\n                stateVariables.parsingValue = false;\n            // Next iteration will substring, add the value to the line, and push the line onto the array of lines\n            } else if (character === options.delimiter.wrap && (index === 0 || utils.getNCharacters(csv, index - eolDelimiterLength, eolDelimiterLength) === options.delimiter.eol && !stateVariables.insideWrapDelimiter)) {\n                // If the line starts with a wrap delimiter (ie. \"*)\n                stateVariables.insideWrapDelimiter = true;\n                stateVariables.parsingValue = true;\n                stateVariables.startIndex = index;\n            } else if (character === options.delimiter.wrap && charAfter === options.delimiter.field && stateVariables.insideWrapDelimiter) {\n                // If we reached a wrap delimiter with a field delimiter after it (ie. *\",)\n                splitLine.push(csv.substring(stateVariables.startIndex, index + 1));\n                stateVariables.startIndex = index + 2; // next value starts after the field delimiter\n                stateVariables.insideWrapDelimiter = false;\n                stateVariables.parsingValue = false;\n            } else if (character === options.delimiter.wrap && charBefore === options.delimiter.field && !stateVariables.insideWrapDelimiter && stateVariables.parsingValue) {\n                // If we reached a wrap delimiter with a field delimiter after it (ie. ,\"*)\n                splitLine.push(csv.substring(stateVariables.startIndex, index - 1));\n                stateVariables.insideWrapDelimiter = true;\n                stateVariables.parsingValue = true;\n                stateVariables.startIndex = index;\n            } else if (character === options.delimiter.wrap && charAfter === options.delimiter.wrap && index !== stateVariables.startIndex) {\n                // If we run into an escaped quote (ie. \"\") skip past the second quote\n                index += 2;\n                stateVariables.justParsedDoubleQuote = true;\n                continue;\n            } else if (character === options.delimiter.field && charBefore !== options.delimiter.wrap && charAfter !== options.delimiter.wrap && !stateVariables.insideWrapDelimiter && stateVariables.parsingValue) {\n                // If we reached a field delimiter and are not inside the wrap delimiters (ie. *,*)\n                splitLine.push(csv.substring(stateVariables.startIndex, index));\n                stateVariables.startIndex = index + 1;\n            } else if (character === options.delimiter.field && charBefore === options.delimiter.wrap && charAfter !== options.delimiter.wrap && !stateVariables.parsingValue) {\n                // If we reached a field delimiter, the previous character was a wrap delimiter, and the\n                //   next character is not a wrap delimiter (ie. \",*)\n                stateVariables.insideWrapDelimiter = false;\n                stateVariables.parsingValue = true;\n                stateVariables.startIndex = index + 1;\n            }\n            // Otherwise increment to the next character\n            index++;\n            // Reset the double quote state variable\n            stateVariables.justParsedDoubleQuote = false;\n        }\n        return lines;\n    }\n    /**\n     * Retrieves the record lines from the split CSV lines and sets it on the params object\n     */ function retrieveRecordLines(params) {\n        if (options.headerFields) {\n            params.recordLines = params.lines;\n        } else {\n            params.recordLines = params.lines.splice(1);\n        }\n        return params;\n    }\n    /**\n     * Retrieves the value for the record from the line at the provided key.\n     */ function retrieveRecordValueFromLine(headerField, line) {\n        // If there is a value at the key's index, use it; otherwise, null\n        const value = line[headerField.index];\n        // Perform any necessary value conversions on the record value\n        return processRecordValue(value);\n    }\n    /**\n     * Processes the record's value by parsing the data to ensure the CSV is\n     * converted to the JSON that created it.\n     */ function processRecordValue(fieldValue) {\n        // If the value is an array representation, convert it\n        const parsedJson = parseValue(fieldValue);\n        // If parsedJson is anything aside from an error, then we want to use the parsed value\n        // This allows us to interpret values like 'null' --> null, 'false' --> false\n        if (!utils.isError(parsedJson) && !utils.isInvalid(parsedJson)) {\n            return parsedJson;\n        } else if (fieldValue === \"undefined\") {\n            return undefined;\n        }\n        return fieldValue;\n    }\n    /**\n     * Trims the record value, if specified by the user via the options object\n     */ function trimRecordValue(fieldValue) {\n        if (options.trimFieldValues && fieldValue !== null) {\n            return fieldValue.trim();\n        }\n        return fieldValue;\n    }\n    /**\n     * Create a JSON document with the given keys (designated by the CSV header)\n     *   and the values (from the given line)\n     * @returns {Object} created json document\n     */ function createDocument(headerFields, line) {\n        // Reduce the keys into a JSON document representing the given line\n        return headerFields.reduce((document, headerField)=>{\n            // If there is a value at the key's index in the line, set the value; otherwise null\n            const value = retrieveRecordValueFromLine(headerField, line);\n            try {\n                // Otherwise add the key and value to the document\n                return (0, doc_path_1.setPath)(document, headerField.value, value);\n            } catch (error) {\n                // Catch any errors where key paths are null or '' and continue\n                return document;\n            }\n        }, {});\n    }\n    /**\n     * Removes the outermost wrap delimiters from a value, if they are present\n     * Otherwise, the non-wrapped value is returned as is\n     */ function removeWrapDelimitersFromValue(fieldValue) {\n        const firstChar = fieldValue[0], lastIndex = fieldValue.length - 1, lastChar = fieldValue[lastIndex];\n        // If the field starts and ends with a wrap delimiter\n        if (firstChar === options.delimiter.wrap && lastChar === options.delimiter.wrap) {\n            // Handle the case where the field is just a pair of wrap delimiters \n            return fieldValue.length <= 2 ? \"\" : fieldValue.substring(1, lastIndex);\n        }\n        return fieldValue;\n    }\n    /**\n     * Unescapes wrap delimiters by replacing duplicates with a single (eg. \"\" -> \")\n     * This is done in order to parse RFC 4180 compliant CSV back to JSON\n     */ function unescapeWrapDelimiterInField(fieldValue) {\n        return fieldValue.replace(escapedWrapDelimiterRegex, options.delimiter.wrap);\n    }\n    /**\n     * Main helper function to convert the CSV to the JSON document array\n     */ function transformRecordLines(params) {\n        // For each line, create the document and add it to the array of documents\n        return params.recordLines.reduce((generatedJsonObjects, line)=>{\n            line = line.map((fieldValue)=>{\n                // Perform the necessary operations on each line\n                fieldValue = removeWrapDelimitersFromValue(fieldValue);\n                fieldValue = unescapeWrapDelimiterInField(fieldValue);\n                fieldValue = trimRecordValue(fieldValue);\n                return fieldValue;\n            });\n            const generatedDocument = createDocument(params.headerFields, line);\n            return generatedJsonObjects.concat(generatedDocument);\n        }, []);\n    }\n    /**\n     * Attempts to parse the provided value. If it is not parsable, then an error is returned\n     */ function parseValue(value) {\n        try {\n            if (utils.isStringRepresentation(value, options) && !utils.isDateRepresentation(value)) {\n                return value;\n            }\n            const parsedJson = valueParserFn(value);\n            // If the parsed value is an array, then we also need to trim record values, if specified\n            if (Array.isArray(parsedJson)) {\n                return parsedJson.map(trimRecordValue);\n            }\n            return parsedJson;\n        } catch (err) {\n            return err;\n        }\n    }\n    /**\n     * Internally exported csv2json function\n     */ function convert(data) {\n        // Split the CSV into lines using the specified EOL option\n        const stripped = stripExcelBOM(data);\n        const split = splitLines(stripped);\n        const heading = retrieveHeading(split); // Retrieve the headings from the CSV, unless the user specified the keys\n        const lines = retrieveRecordLines(heading); // Retrieve the record lines from the CSV\n        return transformRecordLines(lines); // Retrieve the JSON document array\n    }\n    return {\n        convert\n    };\n};\nexports.Csv2Json = Csv2Json;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbi0yLWNzdi9saWIvY3N2Mmpzb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxxQkFBcUIsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxrQkFBa0IsSUFBTWYsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRWMsQ0FBQztJQUN6RmhCLE9BQU9jLGNBQWMsQ0FBQ1osR0FBRyxXQUFXO1FBQUVVLFlBQVk7UUFBTUssT0FBT0Q7SUFBRTtBQUNyRSxJQUFLLFNBQVNkLENBQUMsRUFBRWMsQ0FBQztJQUNkZCxDQUFDLENBQUMsVUFBVSxHQUFHYztBQUNuQjtBQUNBLElBQUlFLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBVUMsR0FBRztJQUMzRCxJQUFJQSxPQUFPQSxJQUFJVixVQUFVLEVBQUUsT0FBT1U7SUFDbEMsSUFBSUMsU0FBUyxDQUFDO0lBQ2QsSUFBSUQsT0FBTyxNQUFNO1FBQUEsSUFBSyxJQUFJZixLQUFLZSxJQUFLLElBQUlmLE1BQU0sYUFBYUosT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLEtBQUtmLElBQUlMLGdCQUFnQnFCLFFBQVFELEtBQUtmO0lBQUU7SUFDeElXLG1CQUFtQkssUUFBUUQ7SUFDM0IsT0FBT0M7QUFDWDtBQUNBcEIsOENBQTZDO0lBQUVpQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETyxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCLE1BQU1FLGFBQWFDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ3JDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLHFFQUFhO0FBQ3pDLE1BQU1FLFFBQVFYLGFBQWFTLG1CQUFPQSxDQUFDLDZEQUFTO0FBQzVDLE1BQU1GLFdBQVcsU0FBVUssT0FBTztJQUM5QixNQUFNQyw0QkFBNEIsSUFBSUMsT0FBT0YsUUFBUUcsU0FBUyxDQUFDQyxJQUFJLEdBQUdKLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFLE1BQU1DLGdCQUFnQixJQUFJSCxPQUFPLE1BQU1KLFlBQVlRLFFBQVEsR0FBR0MsZ0JBQWdCUCxRQUFRUSxVQUFVLElBQUksT0FBT1IsUUFBUVEsVUFBVSxLQUFLLGFBQWFSLFFBQVFRLFVBQVUsR0FBR0MsS0FBS0MsS0FBSztJQUM1UTs7S0FFQyxHQUNELFNBQVNDLGlCQUFpQkMsU0FBUztRQUMvQkEsWUFBWUMsOEJBQThCRDtRQUMxQyxJQUFJWixRQUFRYyxnQkFBZ0IsRUFBRTtZQUMxQixPQUFPRixVQUFVRyxLQUFLLENBQUMsS0FDbEJDLEdBQUcsQ0FBQyxDQUFDQyxZQUFjQSxVQUFVQyxJQUFJLElBQ2pDQyxJQUFJLENBQUM7UUFDZDtRQUNBLE9BQU9QO0lBQ1g7SUFDQTs7S0FFQyxHQUNELFNBQVNRLGdCQUFnQkMsS0FBSztRQUMxQixJQUFJQyxlQUFlLEVBQUU7UUFDckIsSUFBSXRCLFFBQVFzQixZQUFZLEVBQUU7WUFDdEJBLGVBQWV0QixRQUFRc0IsWUFBWSxDQUFDTixHQUFHLENBQUMsQ0FBQ08sYUFBYUMsUUFBVztvQkFDN0RyQyxPQUFPd0IsaUJBQWlCWTtvQkFDeEJDO2dCQUNKO1FBQ0osT0FDSztZQUNELHVDQUF1QztZQUN2QyxNQUFNQyxZQUFZSixLQUFLLENBQUMsRUFBRTtZQUMxQkMsZUFBZUcsVUFBVVQsR0FBRyxDQUFDLENBQUNKLFdBQVdZLFFBQVc7b0JBQ2hEckMsT0FBT3dCLGlCQUFpQkM7b0JBQ3hCWTtnQkFDSjtZQUNBLG9IQUFvSDtZQUNwSCxJQUFJeEIsUUFBUTBCLElBQUksRUFBRTtnQkFDZCxNQUFNQSxPQUFPMUIsUUFBUTBCLElBQUksRUFBRSwwRkFBMEY7Z0JBQ3JISixlQUFlQSxhQUFhSyxNQUFNLENBQUMsQ0FBQ2YsWUFBY2MsS0FBS0UsUUFBUSxDQUFDaEIsVUFBVXpCLEtBQUs7WUFDbkY7UUFDSjtRQUNBLE9BQU87WUFDSGtDO1lBQ0FDO1lBQ0FPLGFBQWEsRUFBRTtRQUNuQjtJQUNKO0lBQ0E7O0tBRUMsR0FDRCxTQUFTQyxjQUFjQyxHQUFHO1FBQ3RCLElBQUkvQixRQUFRTSxRQUFRLEVBQUU7WUFDbEIsT0FBT3lCLElBQUlDLE9BQU8sQ0FBQzNCLGVBQWU7UUFDdEM7UUFDQSxPQUFPMEI7SUFDWDtJQUNBOztLQUVDLEdBQ0QsU0FBU0UsV0FBV0YsR0FBRztRQUNuQix3QkFBd0I7UUFDeEIsTUFBTVYsUUFBUSxFQUFFLEVBQUVhLHFCQUFxQkgsSUFBSUksTUFBTSxHQUFHLEdBQUdDLHFCQUFxQnBDLFFBQVFHLFNBQVMsQ0FBQ2tDLEdBQUcsQ0FBQ0YsTUFBTSxFQUFFRyxpQkFBaUI7WUFDdkhDLHFCQUFxQjtZQUNyQkMsY0FBYztZQUNkQyx1QkFBdUI7WUFDdkJDLFlBQVk7UUFDaEI7UUFDQSxJQUFJQyxZQUFZLEVBQUUsRUFBRUMsV0FBV0MsWUFBWUMsV0FBV0MsV0FBV3ZCLFFBQVE7UUFDekUsZ0ZBQWdGO1FBQ2hGLE1BQU9BLFFBQVFPLElBQUlJLE1BQU0sQ0FBRTtZQUN2QixvQkFBb0I7WUFDcEJTLFlBQVliLEdBQUcsQ0FBQ1AsTUFBTTtZQUN0QixxQkFBcUI7WUFDckJxQixhQUFhckIsUUFBUU8sR0FBRyxDQUFDUCxRQUFRLEVBQUUsR0FBRztZQUN0QyxpQkFBaUI7WUFDakJzQixZQUFZdEIsUUFBUVUscUJBQXFCSCxHQUFHLENBQUNQLFFBQVEsRUFBRSxHQUFHO1lBQzFELHNGQUFzRjtZQUN0RiwyR0FBMkc7WUFDM0d1QixZQUFZaEQsTUFBTWlELGNBQWMsQ0FBQ2pCLEtBQUtQLE9BQU9ZO1lBQzdDLElBQUksQ0FBQ1csY0FBYy9DLFFBQVFHLFNBQVMsQ0FBQ2tDLEdBQUcsSUFBSSxDQUFDQyxlQUFlQyxtQkFBbUIsSUFDM0VmLFVBQVVVLGtCQUFpQixLQUFNVyxlQUFlN0MsUUFBUUcsU0FBUyxDQUFDOEMsS0FBSyxFQUFFO2dCQUN6RSwwR0FBMEc7Z0JBQzFHLHlGQUF5RjtnQkFDekYsbUZBQW1GO2dCQUNuRixJQUFJRixjQUFjL0MsUUFBUUcsU0FBUyxDQUFDa0MsR0FBRyxJQUFJQyxlQUFlSSxVQUFVLEtBQUtsQixPQUFPO29CQUM1RW1CLFVBQVVPLElBQUksQ0FBQztnQkFDbkIsT0FDSyxJQUFJTixjQUFjNUMsUUFBUUcsU0FBUyxDQUFDOEMsS0FBSyxFQUFFO29CQUM1Qyw4RkFBOEY7b0JBQzlGLGlEQUFpRDtvQkFDakROLFVBQVVPLElBQUksQ0FBQztnQkFDbkIsT0FDSztvQkFDRCxzR0FBc0c7b0JBQ3RHUCxVQUFVTyxJQUFJLENBQUNuQixJQUFJb0IsU0FBUyxDQUFDYixlQUFlSSxVQUFVO2dCQUMxRDtnQkFDQSwyR0FBMkc7Z0JBQzNHLDREQUE0RDtnQkFDNURDLFVBQVVPLElBQUksQ0FBQztnQkFDZixvRkFBb0Y7Z0JBQ3BGN0IsTUFBTTZCLElBQUksQ0FBQ1A7Z0JBQ1hBLFlBQVksRUFBRTtnQkFDZEwsZUFBZUksVUFBVSxHQUFHbEIsUUFBUVk7Z0JBQ3BDRSxlQUFlRSxZQUFZLEdBQUc7Z0JBQzlCRixlQUFlQyxtQkFBbUIsR0FBR08sY0FBYzlDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSTtZQUM3RSxPQUNLLElBQUlvQixVQUFVVSxzQkFBc0JVLGNBQWM1QyxRQUFRRyxTQUFTLENBQUM4QyxLQUFLLEVBQUU7Z0JBQzVFLGdGQUFnRjtnQkFDaEYseURBQXlEO2dCQUN6RCxNQUFNRyxjQUFjckIsSUFBSW9CLFNBQVMsQ0FBQ2IsZUFBZUksVUFBVSxFQUFFbEI7Z0JBQzdEbUIsVUFBVU8sSUFBSSxDQUFDRTtnQkFDZixpSEFBaUg7Z0JBQ2pIVCxVQUFVTyxJQUFJLENBQUM7Z0JBQ2Y3QixNQUFNNkIsSUFBSSxDQUFDUDtZQUNmLE9BQ0ssSUFBSW5CLFVBQVVVLHNCQUFzQmEsY0FBYy9DLFFBQVFHLFNBQVMsQ0FBQ2tDLEdBQUcsSUFDeEUsNEhBQTRIO1lBQzNILEVBQUNDLGVBQWVDLG1CQUFtQixJQUNoQ0QsZUFBZUMsbUJBQW1CLElBQUlNLGVBQWU3QyxRQUFRRyxTQUFTLENBQUNDLElBQUksSUFBSSxDQUFDa0MsZUFBZUcscUJBQXFCLEdBQUc7Z0JBQzNILHNHQUFzRztnQkFDdEcsTUFBTVksVUFBVTdCLFVBQVVVLHNCQUFzQlcsZUFBZTdDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHb0IsUUFBUWhEO2dCQUNoRywyRUFBMkU7Z0JBQzNFbUUsVUFBVU8sSUFBSSxDQUFDbkIsSUFBSW9CLFNBQVMsQ0FBQ2IsZUFBZUksVUFBVSxFQUFFVztnQkFDeEQsb0ZBQW9GO2dCQUNwRmhDLE1BQU02QixJQUFJLENBQUNQO2dCQUNYQSxZQUFZLEVBQUU7Z0JBQ2RMLGVBQWVJLFVBQVUsR0FBR2xCLFFBQVFZO2dCQUNwQ0UsZUFBZUUsWUFBWSxHQUFHO2dCQUM5QkYsZUFBZUMsbUJBQW1CLEdBQUdPLGNBQWM5QyxRQUFRRyxTQUFTLENBQUNDLElBQUk7WUFDN0UsT0FDSyxJQUFJd0MsY0FBYzVDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJeUMsZUFBZTdDLFFBQVFHLFNBQVMsQ0FBQzhDLEtBQUssSUFDbkYsQ0FBQ1gsZUFBZUMsbUJBQW1CLElBQUksQ0FBQ0QsZUFBZUUsWUFBWSxFQUFFO2dCQUNyRSxxRkFBcUY7Z0JBQ3JGRixlQUFlSSxVQUFVLEdBQUdsQjtnQkFDNUJjLGVBQWVDLG1CQUFtQixHQUFHO2dCQUNyQ0QsZUFBZUUsWUFBWSxHQUFHO2dCQUM5QixtSEFBbUg7Z0JBQ25ILElBQUl6QyxNQUFNaUQsY0FBYyxDQUFDakIsS0FBS1AsUUFBUSxHQUFHWSx3QkFBd0JwQyxRQUFRRyxTQUFTLENBQUNrQyxHQUFHLEVBQUU7b0JBQ3BGYixTQUFTeEIsUUFBUUcsU0FBUyxDQUFDa0MsR0FBRyxDQUFDRixNQUFNLEdBQUcsR0FBRyxnQkFBZ0I7Z0JBQy9EO1lBQ0osT0FDSyxJQUFJVSxlQUFlN0MsUUFBUUcsU0FBUyxDQUFDOEMsS0FBSyxJQUFJTCxjQUFjNUMsUUFBUUcsU0FBUyxDQUFDQyxJQUFJLElBQUkwQyxjQUFjOUMsUUFBUUcsU0FBUyxDQUFDa0MsR0FBRyxFQUFFO2dCQUM1SCxnRkFBZ0Y7Z0JBQ2hGLDJFQUEyRTtnQkFDM0VNLFVBQVVPLElBQUksQ0FBQ25CLElBQUlvQixTQUFTLENBQUNiLGVBQWVJLFVBQVUsRUFBRWxCLFFBQVE7Z0JBQ2hFYyxlQUFlSSxVQUFVLEdBQUdsQjtnQkFDNUJjLGVBQWVFLFlBQVksR0FBRztnQkFDOUJGLGVBQWVDLG1CQUFtQixHQUFHO2dCQUNyQ0QsZUFBZUcscUJBQXFCLEdBQUc7Z0JBQ3ZDakIsU0FBUztZQUNiLE9BQ0ssSUFBSSxDQUFDcUIsZUFBZTdDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJa0MsZUFBZUcscUJBQXFCLElBQUlJLGVBQWU3QyxRQUFRRyxTQUFTLENBQUNDLElBQUksS0FDNUh3QyxjQUFjNUMsUUFBUUcsU0FBUyxDQUFDQyxJQUFJLElBQUlMLE1BQU1pRCxjQUFjLENBQUNqQixLQUFLUCxRQUFRLEdBQUdZLHdCQUF3QnBDLFFBQVFHLFNBQVMsQ0FBQ2tDLEdBQUcsRUFBRTtnQkFDNUgsNkdBQTZHO2dCQUM3R0MsZUFBZUMsbUJBQW1CLEdBQUc7Z0JBQ3JDRCxlQUFlRSxZQUFZLEdBQUc7WUFDOUIsc0dBQXNHO1lBQzFHLE9BQ0ssSUFBSUksY0FBYzVDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFLb0IsQ0FBQUEsVUFBVSxLQUFLekIsTUFBTWlELGNBQWMsQ0FBQ2pCLEtBQUtQLFFBQVFZLG9CQUFvQkEsd0JBQXdCcEMsUUFBUUcsU0FBUyxDQUFDa0MsR0FBRyxJQUFJLENBQUNDLGVBQWVDLG1CQUFtQixHQUFHO2dCQUMxTSxvREFBb0Q7Z0JBQ3BERCxlQUFlQyxtQkFBbUIsR0FBRztnQkFDckNELGVBQWVFLFlBQVksR0FBRztnQkFDOUJGLGVBQWVJLFVBQVUsR0FBR2xCO1lBQ2hDLE9BQ0ssSUFBSW9CLGNBQWM1QyxRQUFRRyxTQUFTLENBQUNDLElBQUksSUFBSTBDLGNBQWM5QyxRQUFRRyxTQUFTLENBQUM4QyxLQUFLLElBQUlYLGVBQWVDLG1CQUFtQixFQUFFO2dCQUMxSCwyRUFBMkU7Z0JBQzNFSSxVQUFVTyxJQUFJLENBQUNuQixJQUFJb0IsU0FBUyxDQUFDYixlQUFlSSxVQUFVLEVBQUVsQixRQUFRO2dCQUNoRWMsZUFBZUksVUFBVSxHQUFHbEIsUUFBUSxHQUFHLDhDQUE4QztnQkFDckZjLGVBQWVDLG1CQUFtQixHQUFHO2dCQUNyQ0QsZUFBZUUsWUFBWSxHQUFHO1lBQ2xDLE9BQ0ssSUFBSUksY0FBYzVDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJeUMsZUFBZTdDLFFBQVFHLFNBQVMsQ0FBQzhDLEtBQUssSUFDbkYsQ0FBQ1gsZUFBZUMsbUJBQW1CLElBQUlELGVBQWVFLFlBQVksRUFBRTtnQkFDcEUsMkVBQTJFO2dCQUMzRUcsVUFBVU8sSUFBSSxDQUFDbkIsSUFBSW9CLFNBQVMsQ0FBQ2IsZUFBZUksVUFBVSxFQUFFbEIsUUFBUTtnQkFDaEVjLGVBQWVDLG1CQUFtQixHQUFHO2dCQUNyQ0QsZUFBZUUsWUFBWSxHQUFHO2dCQUM5QkYsZUFBZUksVUFBVSxHQUFHbEI7WUFDaEMsT0FDSyxJQUFJb0IsY0FBYzVDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJMEMsY0FBYzlDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJb0IsVUFBVWMsZUFBZUksVUFBVSxFQUFFO2dCQUMxSCxzRUFBc0U7Z0JBQ3RFbEIsU0FBUztnQkFDVGMsZUFBZUcscUJBQXFCLEdBQUc7Z0JBQ3ZDO1lBQ0osT0FDSyxJQUFJRyxjQUFjNUMsUUFBUUcsU0FBUyxDQUFDOEMsS0FBSyxJQUFJSixlQUFlN0MsUUFBUUcsU0FBUyxDQUFDQyxJQUFJLElBQ25GMEMsY0FBYzlDLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJLENBQUNrQyxlQUFlQyxtQkFBbUIsSUFDM0VELGVBQWVFLFlBQVksRUFBRTtnQkFDN0IsbUZBQW1GO2dCQUNuRkcsVUFBVU8sSUFBSSxDQUFDbkIsSUFBSW9CLFNBQVMsQ0FBQ2IsZUFBZUksVUFBVSxFQUFFbEI7Z0JBQ3hEYyxlQUFlSSxVQUFVLEdBQUdsQixRQUFRO1lBQ3hDLE9BQ0ssSUFBSW9CLGNBQWM1QyxRQUFRRyxTQUFTLENBQUM4QyxLQUFLLElBQUlKLGVBQWU3QyxRQUFRRyxTQUFTLENBQUNDLElBQUksSUFDbkYwQyxjQUFjOUMsUUFBUUcsU0FBUyxDQUFDQyxJQUFJLElBQUksQ0FBQ2tDLGVBQWVFLFlBQVksRUFBRTtnQkFDdEUsd0ZBQXdGO2dCQUN4RixxREFBcUQ7Z0JBQ3JERixlQUFlQyxtQkFBbUIsR0FBRztnQkFDckNELGVBQWVFLFlBQVksR0FBRztnQkFDOUJGLGVBQWVJLFVBQVUsR0FBR2xCLFFBQVE7WUFDeEM7WUFDQSw0Q0FBNEM7WUFDNUNBO1lBQ0Esd0NBQXdDO1lBQ3hDYyxlQUFlRyxxQkFBcUIsR0FBRztRQUMzQztRQUNBLE9BQU9wQjtJQUNYO0lBQ0E7O0tBRUMsR0FDRCxTQUFTaUMsb0JBQW9CQyxNQUFNO1FBQy9CLElBQUl2RCxRQUFRc0IsWUFBWSxFQUFFO1lBQ3RCaUMsT0FBTzFCLFdBQVcsR0FBRzBCLE9BQU9sQyxLQUFLO1FBQ3JDLE9BQ0s7WUFDRGtDLE9BQU8xQixXQUFXLEdBQUcwQixPQUFPbEMsS0FBSyxDQUFDbUMsTUFBTSxDQUFDO1FBQzdDO1FBQ0EsT0FBT0Q7SUFDWDtJQUNBOztLQUVDLEdBQ0QsU0FBU0UsNEJBQTRCbEMsV0FBVyxFQUFFbUMsSUFBSTtRQUNsRCxrRUFBa0U7UUFDbEUsTUFBTXZFLFFBQVF1RSxJQUFJLENBQUNuQyxZQUFZQyxLQUFLLENBQUM7UUFDckMsOERBQThEO1FBQzlELE9BQU9tQyxtQkFBbUJ4RTtJQUM5QjtJQUNBOzs7S0FHQyxHQUNELFNBQVN3RSxtQkFBbUJDLFVBQVU7UUFDbEMsc0RBQXNEO1FBQ3RELE1BQU1DLGFBQWFyRCxXQUFXb0Q7UUFDOUIsc0ZBQXNGO1FBQ3RGLDZFQUE2RTtRQUM3RSxJQUFJLENBQUM3RCxNQUFNK0QsT0FBTyxDQUFDRCxlQUFlLENBQUM5RCxNQUFNZ0UsU0FBUyxDQUFDRixhQUFhO1lBQzVELE9BQU9BO1FBQ1gsT0FDSyxJQUFJRCxlQUFlLGFBQWE7WUFDakMsT0FBT3BGO1FBQ1g7UUFDQSxPQUFPb0Y7SUFDWDtJQUNBOztLQUVDLEdBQ0QsU0FBU0ksZ0JBQWdCSixVQUFVO1FBQy9CLElBQUk1RCxRQUFRaUUsZUFBZSxJQUFJTCxlQUFlLE1BQU07WUFDaEQsT0FBT0EsV0FBVzFDLElBQUk7UUFDMUI7UUFDQSxPQUFPMEM7SUFDWDtJQUNBOzs7O0tBSUMsR0FDRCxTQUFTTSxlQUFlNUMsWUFBWSxFQUFFb0MsSUFBSTtRQUN0QyxtRUFBbUU7UUFDbkUsT0FBT3BDLGFBQWE2QyxNQUFNLENBQUMsQ0FBQ0MsVUFBVTdDO1lBQ2xDLG9GQUFvRjtZQUNwRixNQUFNcEMsUUFBUXNFLDRCQUE0QmxDLGFBQWFtQztZQUN2RCxJQUFJO2dCQUNBLGtEQUFrRDtnQkFDbEQsT0FBTyxDQUFDLEdBQUc5RCxXQUFXeUUsT0FBTyxFQUFFRCxVQUFVN0MsWUFBWXBDLEtBQUssRUFBRUE7WUFDaEUsRUFDQSxPQUFPbUYsT0FBTztnQkFDViwrREFBK0Q7Z0JBQy9ELE9BQU9GO1lBQ1g7UUFDSixHQUFHLENBQUM7SUFDUjtJQUNBOzs7S0FHQyxHQUNELFNBQVN2RCw4QkFBOEIrQyxVQUFVO1FBQzdDLE1BQU1XLFlBQVlYLFVBQVUsQ0FBQyxFQUFFLEVBQUVZLFlBQVlaLFdBQVd6QixNQUFNLEdBQUcsR0FBR3NDLFdBQVdiLFVBQVUsQ0FBQ1ksVUFBVTtRQUNwRyxxREFBcUQ7UUFDckQsSUFBSUQsY0FBY3ZFLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxJQUFJcUUsYUFBYXpFLFFBQVFHLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFO1lBQzdFLHFFQUFxRTtZQUNyRSxPQUFPd0QsV0FBV3pCLE1BQU0sSUFBSSxJQUFJLEtBQUt5QixXQUFXVCxTQUFTLENBQUMsR0FBR3FCO1FBQ2pFO1FBQ0EsT0FBT1o7SUFDWDtJQUNBOzs7S0FHQyxHQUNELFNBQVNjLDZCQUE2QmQsVUFBVTtRQUM1QyxPQUFPQSxXQUFXNUIsT0FBTyxDQUFDL0IsMkJBQTJCRCxRQUFRRyxTQUFTLENBQUNDLElBQUk7SUFDL0U7SUFDQTs7S0FFQyxHQUNELFNBQVN1RSxxQkFBcUJwQixNQUFNO1FBQ2hDLDBFQUEwRTtRQUMxRSxPQUFPQSxPQUFPMUIsV0FBVyxDQUFDc0MsTUFBTSxDQUFDLENBQUNTLHNCQUFzQmxCO1lBQ3BEQSxPQUFPQSxLQUFLMUMsR0FBRyxDQUFDLENBQUM0QztnQkFDYixnREFBZ0Q7Z0JBQ2hEQSxhQUFhL0MsOEJBQThCK0M7Z0JBQzNDQSxhQUFhYyw2QkFBNkJkO2dCQUMxQ0EsYUFBYUksZ0JBQWdCSjtnQkFDN0IsT0FBT0E7WUFDWDtZQUNBLE1BQU1pQixvQkFBb0JYLGVBQWVYLE9BQU9qQyxZQUFZLEVBQUVvQztZQUM5RCxPQUFPa0IscUJBQXFCRSxNQUFNLENBQUNEO1FBQ3ZDLEdBQUcsRUFBRTtJQUNUO0lBQ0E7O0tBRUMsR0FDRCxTQUFTckUsV0FBV3JCLEtBQUs7UUFDckIsSUFBSTtZQUNBLElBQUlZLE1BQU1nRixzQkFBc0IsQ0FBQzVGLE9BQU9hLFlBQVksQ0FBQ0QsTUFBTWlGLG9CQUFvQixDQUFDN0YsUUFBUTtnQkFDcEYsT0FBT0E7WUFDWDtZQUNBLE1BQU0wRSxhQUFhdEQsY0FBY3BCO1lBQ2pDLHlGQUF5RjtZQUN6RixJQUFJOEYsTUFBTUMsT0FBTyxDQUFDckIsYUFBYTtnQkFDM0IsT0FBT0EsV0FBVzdDLEdBQUcsQ0FBQ2dEO1lBQzFCO1lBQ0EsT0FBT0g7UUFDWCxFQUNBLE9BQU9zQixLQUFLO1lBQ1IsT0FBT0E7UUFDWDtJQUNKO0lBQ0E7O0tBRUMsR0FDRCxTQUFTQyxRQUFRQyxJQUFJO1FBQ2pCLDBEQUEwRDtRQUMxRCxNQUFNQyxXQUFXeEQsY0FBY3VEO1FBQy9CLE1BQU10RSxRQUFRa0IsV0FBV3FEO1FBQ3pCLE1BQU1DLFVBQVVuRSxnQkFBZ0JMLFFBQVEseUVBQXlFO1FBQ2pILE1BQU1NLFFBQVFpQyxvQkFBb0JpQyxVQUFVLHlDQUF5QztRQUNyRixPQUFPWixxQkFBcUJ0RCxRQUFRLG1DQUFtQztJQUMzRTtJQUNBLE9BQU87UUFDSCtEO0lBQ0o7QUFDSjtBQUNBMUYsZ0JBQWdCLEdBQUdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9qc29uLTItY3N2L2xpYi9jc3YyanNvbi5qcz9mMGNmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Dc3YySnNvbiA9IHZvaWQgMDtcbmNvbnN0IGRvY19wYXRoXzEgPSByZXF1aXJlKFwiZG9jLXBhdGhcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IHV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtcbmNvbnN0IENzdjJKc29uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBjb25zdCBlc2NhcGVkV3JhcERlbGltaXRlclJlZ2V4ID0gbmV3IFJlZ0V4cChvcHRpb25zLmRlbGltaXRlci53cmFwICsgb3B0aW9ucy5kZWxpbWl0ZXIud3JhcCwgJ2cnKSwgZXhjZWxCT01SZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgY29uc3RhbnRzXzEuZXhjZWxCT00pLCB2YWx1ZVBhcnNlckZuID0gb3B0aW9ucy5wYXJzZVZhbHVlICYmIHR5cGVvZiBvcHRpb25zLnBhcnNlVmFsdWUgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnBhcnNlVmFsdWUgOiBKU09OLnBhcnNlO1xuICAgIC8qKlxuICAgICAqIFRyaW1zIHRoZSBoZWFkZXIga2V5LCBpZiBzcGVjaWZpZWQgYnkgdGhlIHVzZXIgdmlhIHRoZSBwcm92aWRlZCBvcHRpb25zXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcktleShoZWFkZXJLZXkpIHtcbiAgICAgICAgaGVhZGVyS2V5ID0gcmVtb3ZlV3JhcERlbGltaXRlcnNGcm9tVmFsdWUoaGVhZGVyS2V5KTtcbiAgICAgICAgaWYgKG9wdGlvbnMudHJpbUhlYWRlckZpZWxkcykge1xuICAgICAgICAgICAgcmV0dXJuIGhlYWRlcktleS5zcGxpdCgnLicpXG4gICAgICAgICAgICAgICAgLm1hcCgoY29tcG9uZW50KSA9PiBjb21wb25lbnQudHJpbSgpKVxuICAgICAgICAgICAgICAgIC5qb2luKCcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWRlcktleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgdGhlIEpTT04gaGVhZGluZyBmcm9tIHRoZSBDU1ZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXRyaWV2ZUhlYWRpbmcobGluZXMpIHtcbiAgICAgICAgbGV0IGhlYWRlckZpZWxkcyA9IFtdO1xuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJGaWVsZHMpIHtcbiAgICAgICAgICAgIGhlYWRlckZpZWxkcyA9IG9wdGlvbnMuaGVhZGVyRmllbGRzLm1hcCgoaGVhZGVyRmllbGQsIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9jZXNzSGVhZGVyS2V5KGhlYWRlckZpZWxkKSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gR2VuZXJhdGUgYW5kIHJldHVybiB0aGUgaGVhZGluZyBrZXlzXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJSb3cgPSBsaW5lc1swXTtcbiAgICAgICAgICAgIGhlYWRlckZpZWxkcyA9IGhlYWRlclJvdy5tYXAoKGhlYWRlcktleSwgaW5kZXgpID0+ICh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHByb2Nlc3NIZWFkZXJLZXkoaGVhZGVyS2V5KSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgcHJvdmlkZWQga2V5cywgZmlsdGVyIHRoZSBnZW5lcmF0ZWQga2V5cyB0byBqdXN0IHRoZSB1c2VyIHByb3ZpZGVkIGtleXMgc28gd2UgYWxzbyBoYXZlIHRoZSBrZXkgaW5kZXhcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gb3B0aW9ucy5rZXlzOyAvLyBUeXBlU2NyaXB0IHR5cGUgY2hlY2tpbmcgd29yayBhcm91bmQgdG8gZ2V0IGl0IHRvIHJlY29nbml6ZSB0aGUgb3B0aW9uIGlzIG5vdCB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBoZWFkZXJGaWVsZHMgPSBoZWFkZXJGaWVsZHMuZmlsdGVyKChoZWFkZXJLZXkpID0+IGtleXMuaW5jbHVkZXMoaGVhZGVyS2V5LnZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpbmVzLFxuICAgICAgICAgICAgaGVhZGVyRmllbGRzLFxuICAgICAgICAgICAgcmVjb3JkTGluZXM6IFtdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBFeGNlbCBCT00gdmFsdWUsIGlmIHNwZWNpZmllZCBieSB0aGUgb3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHJpcEV4Y2VsQk9NKGNzdikge1xuICAgICAgICBpZiAob3B0aW9ucy5leGNlbEJPTSkge1xuICAgICAgICAgICAgcmV0dXJuIGNzdi5yZXBsYWNlKGV4Y2VsQk9NUmVnZXgsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3N2O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBzcGxpdHMgYSBsaW5lIHNvIHRoYXQgd2UgY2FuIGhhbmRsZSB3cmFwcGVkIGZpZWxkc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0TGluZXMoY3N2KSB7XG4gICAgICAgIC8vIFBhcnNlIG91dCB0aGUgbGluZS4uLlxuICAgICAgICBjb25zdCBsaW5lcyA9IFtdLCBsYXN0Q2hhcmFjdGVySW5kZXggPSBjc3YubGVuZ3RoIC0gMSwgZW9sRGVsaW1pdGVyTGVuZ3RoID0gb3B0aW9ucy5kZWxpbWl0ZXIuZW9sLmxlbmd0aCwgc3RhdGVWYXJpYWJsZXMgPSB7XG4gICAgICAgICAgICBpbnNpZGVXcmFwRGVsaW1pdGVyOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNpbmdWYWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgIGp1c3RQYXJzZWREb3VibGVRdW90ZTogZmFsc2UsXG4gICAgICAgICAgICBzdGFydEluZGV4OiAwXG4gICAgICAgIH07XG4gICAgICAgIGxldCBzcGxpdExpbmUgPSBbXSwgY2hhcmFjdGVyLCBjaGFyQmVmb3JlLCBjaGFyQWZ0ZXIsIG5leHROQ2hhciwgaW5kZXggPSAwO1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBjaGFyYWN0ZXIgaW4gdGhlIGxpbmUgdG8gaWRlbnRpZnkgd2hlcmUgdG8gc3BsaXQgdGhlIHZhbHVlc1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBjc3YubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBDdXJyZW50IGNoYXJhY3RlclxuICAgICAgICAgICAgY2hhcmFjdGVyID0gY3N2W2luZGV4XTtcbiAgICAgICAgICAgIC8vIFByZXZpb3VzIGNoYXJhY3RlclxuICAgICAgICAgICAgY2hhckJlZm9yZSA9IGluZGV4ID8gY3N2W2luZGV4IC0gMV0gOiAnJztcbiAgICAgICAgICAgIC8vIE5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICBjaGFyQWZ0ZXIgPSBpbmRleCA8IGxhc3RDaGFyYWN0ZXJJbmRleCA/IGNzdltpbmRleCArIDFdIDogJyc7XG4gICAgICAgICAgICAvLyBOZXh0IG4gY2hhcmFjdGVycywgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGNoYXJhY3Rlciwgd2hlcmUgbiA9IGxlbmd0aChFT0wgZGVsaW1pdGVyKVxuICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgZm9yIHRoZSBjaGVja2luZyBvZiBhbiBFT0wgZGVsaW1pdGVyIHdoZW4gaWYgaXQgaXMgbW9yZSB0aGFuIGEgc2luZ2xlIGNoYXJhY3RlciAoZWcuICdcXHJcXG4nKVxuICAgICAgICAgICAgbmV4dE5DaGFyID0gdXRpbHMuZ2V0TkNoYXJhY3RlcnMoY3N2LCBpbmRleCwgZW9sRGVsaW1pdGVyTGVuZ3RoKTtcbiAgICAgICAgICAgIGlmICgobmV4dE5DaGFyID09PSBvcHRpb25zLmRlbGltaXRlci5lb2wgJiYgIXN0YXRlVmFyaWFibGVzLmluc2lkZVdyYXBEZWxpbWl0ZXIgfHxcbiAgICAgICAgICAgICAgICBpbmRleCA9PT0gbGFzdENoYXJhY3RlckluZGV4KSAmJiBjaGFyQmVmb3JlID09PSBvcHRpb25zLmRlbGltaXRlci5maWVsZCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYW4gRU9MIGRlbGltaXRlciBvciB0aGUgZW5kIG9mIHRoZSBjc3YgYW5kIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgaXMgYSBmaWVsZCBkZWxpbWl0ZXIuLi5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc3RhcnQgaW5kZXggaXMgdGhlIGN1cnJlbnQgaW5kZXggKGFuZCBzaW5jZSB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIGlzIGEgY29tbWEpLFxuICAgICAgICAgICAgICAgIC8vICAgdGhlbiB0aGUgdmFsdWUgYmVpbmcgcGFyc2VkIGlzIGFuIGVtcHR5IHZhbHVlIGFjY29yZGluZ2x5LCBhZGQgYW4gZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICAgICAgaWYgKG5leHROQ2hhciA9PT0gb3B0aW9ucy5kZWxpbWl0ZXIuZW9sICYmIHN0YXRlVmFyaWFibGVzLnN0YXJ0SW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0TGluZS5wdXNoKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyID09PSBvcHRpb25zLmRlbGltaXRlci5maWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIENTViwgdGhlcmUncyBubyBuZXcgbGluZSwgYW5kIHRoZSBjdXJyZW50IGNoYXJhY3RlciBpcyBhIGNvbW1hXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gYWRkIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRMaW5lLnB1c2goJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGVyZSdzIGEgdmFsaWQgdmFsdWUsIGFuZCB0aGUgc3RhcnQgaW5kZXggaXNuJ3QgdGhlIGN1cnJlbnQgaW5kZXgsIGdyYWIgdGhlIHdob2xlIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0TGluZS5wdXNoKGNzdi5zdWJzdHJpbmcoc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbGFzdCBjaGFyYWN0ZXIgaXMgYSBjb21tYSwgdGhlcmUncyBzdGlsbCBhbiBhZGRpdGlvbmFsIGltcGxpZWQgZmllbGQgdmFsdWUgdHJhaWxpbmcgdGhlIGNvbW1hLlxuICAgICAgICAgICAgICAgIC8vICAgU2luY2UgdGhpcyB2YWx1ZSBpcyBlbXB0eSwgd2UgcHVzaCBhbiBleHRyYSBlbXB0eSB2YWx1ZVxuICAgICAgICAgICAgICAgIHNwbGl0TGluZS5wdXNoKCcnKTtcbiAgICAgICAgICAgICAgICAvLyBGaW5hbGx5LCBwdXNoIHRoZSBzcGxpdCBsaW5lIHZhbHVlcyBpbnRvIHRoZSBsaW5lcyBhcnJheSBhbmQgY2xlYXIgdGhlIHNwbGl0IGxpbmVcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKHNwbGl0TGluZSk7XG4gICAgICAgICAgICAgICAgc3BsaXRMaW5lID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCA9IGluZGV4ICsgZW9sRGVsaW1pdGVyTGVuZ3RoO1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLnBhcnNpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlciA9IGNoYXJBZnRlciA9PT0gb3B0aW9ucy5kZWxpbWl0ZXIud3JhcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSBsYXN0Q2hhcmFjdGVySW5kZXggJiYgY2hhcmFjdGVyID09PSBvcHRpb25zLmRlbGltaXRlci5maWVsZCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoIHRoZSBlbmQgb2YgdGhlIENTViBhbmQgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIGEgZmllbGQgZGVsaW1pdGVyXG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIHByZXZpb3VzbHkgc2VlbiB2YWx1ZSBhbmQgYWRkIGl0IHRvIHRoZSBsaW5lXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBjc3Yuc3Vic3RyaW5nKHN0YXRlVmFyaWFibGVzLnN0YXJ0SW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBzcGxpdExpbmUucHVzaChwYXJzZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVGhlbiBhZGQgYW4gZW1wdHkgc3RyaW5nIHRvIHRoZSBsaW5lIHNpbmNlIHRoZSBsYXN0IGNoYXJhY3RlciBiZWluZyBhIGZpZWxkIGRlbGltaXRlciBpbmRpY2F0ZXMgYW4gZW1wdHkgZmllbGRcbiAgICAgICAgICAgICAgICBzcGxpdExpbmUucHVzaCgnJyk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChzcGxpdExpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IGxhc3RDaGFyYWN0ZXJJbmRleCB8fCBuZXh0TkNoYXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLmVvbCAmJlxuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGFyZW4ndCBpbnNpZGUgd3JhcCBkZWxpbWl0ZXJzIG9yIGlmIHdlIGFyZSBidXQgdGhlIGNoYXJhY3RlciBiZWZvcmUgd2FzIGEgd3JhcCBkZWxpbWl0ZXIgYW5kIHdlIGRpZG4ndCBqdXN0IHNlZSB0d29cbiAgICAgICAgICAgICAgICAoIXN0YXRlVmFyaWFibGVzLmluc2lkZVdyYXBEZWxpbWl0ZXIgfHxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlciAmJiBjaGFyQmVmb3JlID09PSBvcHRpb25zLmRlbGltaXRlci53cmFwICYmICFzdGF0ZVZhcmlhYmxlcy5qdXN0UGFyc2VkRG91YmxlUXVvdGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGlmIHdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgbGluZSBvciBjc3YgKGFuZCBjdXJyZW50IGNoYXJhY3RlciBpcyBub3QgYSBmaWVsZCBkZWxpbWl0ZXIpXG4gICAgICAgICAgICAgICAgY29uc3QgdG9JbmRleCA9IGluZGV4ICE9PSBsYXN0Q2hhcmFjdGVySW5kZXggfHwgY2hhckJlZm9yZSA9PT0gb3B0aW9ucy5kZWxpbWl0ZXIud3JhcCA/IGluZGV4IDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSByZW1haW5pbmcgdmFsdWUgYW5kIGFkZCBpdCB0byB0aGUgc3BsaXQgbGluZSBsaXN0IG9mIHZhbHVlc1xuICAgICAgICAgICAgICAgIHNwbGl0TGluZS5wdXNoKGNzdi5zdWJzdHJpbmcoc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCwgdG9JbmRleCkpO1xuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIHB1c2ggdGhlIHNwbGl0IGxpbmUgdmFsdWVzIGludG8gdGhlIGxpbmVzIGFycmF5IGFuZCBjbGVhciB0aGUgc3BsaXQgbGluZVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goc3BsaXRMaW5lKTtcbiAgICAgICAgICAgICAgICBzcGxpdExpbmUgPSBbXTtcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5zdGFydEluZGV4ID0gaW5kZXggKyBlb2xEZWxpbWl0ZXJMZW5ndGg7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMucGFyc2luZ1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5pbnNpZGVXcmFwRGVsaW1pdGVyID0gY2hhckFmdGVyID09PSBvcHRpb25zLmRlbGltaXRlci53cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyID09PSBvcHRpb25zLmRlbGltaXRlci53cmFwICYmIGNoYXJCZWZvcmUgPT09IG9wdGlvbnMuZGVsaW1pdGVyLmZpZWxkICYmXG4gICAgICAgICAgICAgICAgIXN0YXRlVmFyaWFibGVzLmluc2lkZVdyYXBEZWxpbWl0ZXIgJiYgIXN0YXRlVmFyaWFibGVzLnBhcnNpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSB3cmFwIGRlbGltaXRlciBhZnRlciBhIGNvbW1hIGFuZCB3ZSBhcmVuJ3QgaW5zaWRlIGEgd3JhcCBkZWxpbWl0ZXJcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5zdGFydEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMucGFyc2luZ1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCBjaGFyYWN0ZXIocykgYXJlIGFuIEVPTCBkZWxpbWl0ZXIsIHRoZW4gc2tpcCB0aGVtIHNvIHdlIGRvbid0IHBhcnNlIHdoYXQgd2UndmUgc2VlbiBhcyBhbm90aGVyIHZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKHV0aWxzLmdldE5DaGFyYWN0ZXJzKGNzdiwgaW5kZXggKyAxLCBlb2xEZWxpbWl0ZXJMZW5ndGgpID09PSBvcHRpb25zLmRlbGltaXRlci5lb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gb3B0aW9ucy5kZWxpbWl0ZXIuZW9sLmxlbmd0aCArIDE7IC8vIFNraXAgcGFzdCBFT0xcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyQmVmb3JlID09PSBvcHRpb25zLmRlbGltaXRlci5maWVsZCAmJiBjaGFyYWN0ZXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiYgY2hhckFmdGVyID09PSBvcHRpb25zLmRlbGltaXRlci5lb2wpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSByZWFjaGVkIHRoZSBzdGFydCBvZiBhIHdyYXBwZWQgbmV3IGZpZWxkIHRoYXQgYmVnaW5zIHdpdGggYW4gRU9MIGRlbGltaXRlclxuICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSByZW1haW5pbmcgdmFsdWUgYW5kIGFkZCBpdCB0byB0aGUgc3BsaXQgbGluZSBsaXN0IG9mIHZhbHVlc1xuICAgICAgICAgICAgICAgIHNwbGl0TGluZS5wdXNoKGNzdi5zdWJzdHJpbmcoc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCwgaW5kZXggLSAxKSk7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLnBhcnNpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuanVzdFBhcnNlZERvdWJsZVF1b3RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKGNoYXJCZWZvcmUgIT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgfHwgc3RhdGVWYXJpYWJsZXMuanVzdFBhcnNlZERvdWJsZVF1b3RlICYmIGNoYXJCZWZvcmUgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXApICYmXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyID09PSBvcHRpb25zLmRlbGltaXRlci53cmFwICYmIHV0aWxzLmdldE5DaGFyYWN0ZXJzKGNzdiwgaW5kZXggKyAxLCBlb2xEZWxpbWl0ZXJMZW5ndGgpID09PSBvcHRpb25zLmRlbGltaXRlci5lb2wpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaCBhIHdyYXAgd2hpY2ggaXMgbm90IHByZWNlZGVkIGJ5IGEgd3JhcCBkZWxpbSBhbmQgdGhlIG5leHQgY2hhcmFjdGVyIGlzIGFuIEVPTCBkZWxpbSAoaWUuICpcIlxcbilcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5pbnNpZGVXcmFwRGVsaW1pdGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMucGFyc2luZ1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gTmV4dCBpdGVyYXRpb24gd2lsbCBzdWJzdHJpbmcsIGFkZCB0aGUgdmFsdWUgdG8gdGhlIGxpbmUsIGFuZCBwdXNoIHRoZSBsaW5lIG9udG8gdGhlIGFycmF5IG9mIGxpbmVzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiYgKGluZGV4ID09PSAwIHx8IHV0aWxzLmdldE5DaGFyYWN0ZXJzKGNzdiwgaW5kZXggLSBlb2xEZWxpbWl0ZXJMZW5ndGgsIGVvbERlbGltaXRlckxlbmd0aCkgPT09IG9wdGlvbnMuZGVsaW1pdGVyLmVvbCAmJiAhc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlcikpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbGluZSBzdGFydHMgd2l0aCBhIHdyYXAgZGVsaW1pdGVyIChpZS4gXCIqKVxuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLmluc2lkZVdyYXBEZWxpbWl0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLnBhcnNpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyID09PSBvcHRpb25zLmRlbGltaXRlci53cmFwICYmIGNoYXJBZnRlciA9PT0gb3B0aW9ucy5kZWxpbWl0ZXIuZmllbGQgJiYgc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlcikge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSB3cmFwIGRlbGltaXRlciB3aXRoIGEgZmllbGQgZGVsaW1pdGVyIGFmdGVyIGl0IChpZS4gKlwiLClcbiAgICAgICAgICAgICAgICBzcGxpdExpbmUucHVzaChjc3Yuc3Vic3RyaW5nKHN0YXRlVmFyaWFibGVzLnN0YXJ0SW5kZXgsIGluZGV4ICsgMSkpO1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLnN0YXJ0SW5kZXggPSBpbmRleCArIDI7IC8vIG5leHQgdmFsdWUgc3RhcnRzIGFmdGVyIHRoZSBmaWVsZCBkZWxpbWl0ZXJcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5pbnNpZGVXcmFwRGVsaW1pdGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMucGFyc2luZ1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiYgY2hhckJlZm9yZSA9PT0gb3B0aW9ucy5kZWxpbWl0ZXIuZmllbGQgJiZcbiAgICAgICAgICAgICAgICAhc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlciAmJiBzdGF0ZVZhcmlhYmxlcy5wYXJzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgd3JhcCBkZWxpbWl0ZXIgd2l0aCBhIGZpZWxkIGRlbGltaXRlciBhZnRlciBpdCAoaWUuICxcIiopXG4gICAgICAgICAgICAgICAgc3BsaXRMaW5lLnB1c2goY3N2LnN1YnN0cmluZyhzdGF0ZVZhcmlhYmxlcy5zdGFydEluZGV4LCBpbmRleCAtIDEpKTtcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5pbnNpZGVXcmFwRGVsaW1pdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5wYXJzaW5nVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLnN0YXJ0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gb3B0aW9ucy5kZWxpbWl0ZXIud3JhcCAmJiBjaGFyQWZ0ZXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiYgaW5kZXggIT09IHN0YXRlVmFyaWFibGVzLnN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBydW4gaW50byBhbiBlc2NhcGVkIHF1b3RlIChpZS4gXCJcIikgc2tpcCBwYXN0IHRoZSBzZWNvbmQgcXVvdGVcbiAgICAgICAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLmp1c3RQYXJzZWREb3VibGVRdW90ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLmZpZWxkICYmIGNoYXJCZWZvcmUgIT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiZcbiAgICAgICAgICAgICAgICBjaGFyQWZ0ZXIgIT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiYgIXN0YXRlVmFyaWFibGVzLmluc2lkZVdyYXBEZWxpbWl0ZXIgJiZcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5wYXJzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgZmllbGQgZGVsaW1pdGVyIGFuZCBhcmUgbm90IGluc2lkZSB0aGUgd3JhcCBkZWxpbWl0ZXJzIChpZS4gKiwqKVxuICAgICAgICAgICAgICAgIHNwbGl0TGluZS5wdXNoKGNzdi5zdWJzdHJpbmcoc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCwgaW5kZXgpKTtcbiAgICAgICAgICAgICAgICBzdGF0ZVZhcmlhYmxlcy5zdGFydEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyID09PSBvcHRpb25zLmRlbGltaXRlci5maWVsZCAmJiBjaGFyQmVmb3JlID09PSBvcHRpb25zLmRlbGltaXRlci53cmFwICYmXG4gICAgICAgICAgICAgICAgY2hhckFmdGVyICE9PSBvcHRpb25zLmRlbGltaXRlci53cmFwICYmICFzdGF0ZVZhcmlhYmxlcy5wYXJzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgZmllbGQgZGVsaW1pdGVyLCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIHdhcyBhIHdyYXAgZGVsaW1pdGVyLCBhbmQgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBuZXh0IGNoYXJhY3RlciBpcyBub3QgYSB3cmFwIGRlbGltaXRlciAoaWUuIFwiLCopXG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuaW5zaWRlV3JhcERlbGltaXRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN0YXRlVmFyaWFibGVzLnBhcnNpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuc3RhcnRJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBpbmNyZW1lbnQgdG8gdGhlIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGRvdWJsZSBxdW90ZSBzdGF0ZSB2YXJpYWJsZVxuICAgICAgICAgICAgc3RhdGVWYXJpYWJsZXMuanVzdFBhcnNlZERvdWJsZVF1b3RlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHJlY29yZCBsaW5lcyBmcm9tIHRoZSBzcGxpdCBDU1YgbGluZXMgYW5kIHNldHMgaXQgb24gdGhlIHBhcmFtcyBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXRyaWV2ZVJlY29yZExpbmVzKHBhcmFtcykge1xuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJGaWVsZHMpIHsgLy8gVGhpcyBvcHRpb24gaXMgcGFzc2VkIGZvciBpbnN0YW5jZXMgd2hlcmUgdGhlIENTViBoYXMgbm8gaGVhZGVyIGxpbmVcbiAgICAgICAgICAgIHBhcmFtcy5yZWNvcmRMaW5lcyA9IHBhcmFtcy5saW5lcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLy8gQWxsIGxpbmVzIGV4Y2VwdCBmb3IgdGhlIGhlYWRlciBsaW5lXG4gICAgICAgICAgICBwYXJhbXMucmVjb3JkTGluZXMgPSBwYXJhbXMubGluZXMuc3BsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgZm9yIHRoZSByZWNvcmQgZnJvbSB0aGUgbGluZSBhdCB0aGUgcHJvdmlkZWQga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldHJpZXZlUmVjb3JkVmFsdWVGcm9tTGluZShoZWFkZXJGaWVsZCwgbGluZSkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHZhbHVlIGF0IHRoZSBrZXkncyBpbmRleCwgdXNlIGl0OyBvdGhlcndpc2UsIG51bGxcbiAgICAgICAgY29uc3QgdmFsdWUgPSBsaW5lW2hlYWRlckZpZWxkLmluZGV4XTtcbiAgICAgICAgLy8gUGVyZm9ybSBhbnkgbmVjZXNzYXJ5IHZhbHVlIGNvbnZlcnNpb25zIG9uIHRoZSByZWNvcmQgdmFsdWVcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NSZWNvcmRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyB0aGUgcmVjb3JkJ3MgdmFsdWUgYnkgcGFyc2luZyB0aGUgZGF0YSB0byBlbnN1cmUgdGhlIENTViBpc1xuICAgICAqIGNvbnZlcnRlZCB0byB0aGUgSlNPTiB0aGF0IGNyZWF0ZWQgaXQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlY29yZFZhbHVlKGZpZWxkVmFsdWUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGFuIGFycmF5IHJlcHJlc2VudGF0aW9uLCBjb252ZXJ0IGl0XG4gICAgICAgIGNvbnN0IHBhcnNlZEpzb24gPSBwYXJzZVZhbHVlKGZpZWxkVmFsdWUpO1xuICAgICAgICAvLyBJZiBwYXJzZWRKc29uIGlzIGFueXRoaW5nIGFzaWRlIGZyb20gYW4gZXJyb3IsIHRoZW4gd2Ugd2FudCB0byB1c2UgdGhlIHBhcnNlZCB2YWx1ZVxuICAgICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBpbnRlcnByZXQgdmFsdWVzIGxpa2UgJ251bGwnIC0tPiBudWxsLCAnZmFsc2UnIC0tPiBmYWxzZVxuICAgICAgICBpZiAoIXV0aWxzLmlzRXJyb3IocGFyc2VkSnNvbikgJiYgIXV0aWxzLmlzSW52YWxpZChwYXJzZWRKc29uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZEpzb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmllbGRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaW1zIHRoZSByZWNvcmQgdmFsdWUsIGlmIHNwZWNpZmllZCBieSB0aGUgdXNlciB2aWEgdGhlIG9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVJlY29yZFZhbHVlKGZpZWxkVmFsdWUpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMudHJpbUZpZWxkVmFsdWVzICYmIGZpZWxkVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgSlNPTiBkb2N1bWVudCB3aXRoIHRoZSBnaXZlbiBrZXlzIChkZXNpZ25hdGVkIGJ5IHRoZSBDU1YgaGVhZGVyKVxuICAgICAqICAgYW5kIHRoZSB2YWx1ZXMgKGZyb20gdGhlIGdpdmVuIGxpbmUpXG4gICAgICogQHJldHVybnMge09iamVjdH0gY3JlYXRlZCBqc29uIGRvY3VtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnQoaGVhZGVyRmllbGRzLCBsaW5lKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUga2V5cyBpbnRvIGEgSlNPTiBkb2N1bWVudCByZXByZXNlbnRpbmcgdGhlIGdpdmVuIGxpbmVcbiAgICAgICAgcmV0dXJuIGhlYWRlckZpZWxkcy5yZWR1Y2UoKGRvY3VtZW50LCBoZWFkZXJGaWVsZCkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSB2YWx1ZSBhdCB0aGUga2V5J3MgaW5kZXggaW4gdGhlIGxpbmUsIHNldCB0aGUgdmFsdWU7IG90aGVyd2lzZSBudWxsXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJldHJpZXZlUmVjb3JkVmFsdWVGcm9tTGluZShoZWFkZXJGaWVsZCwgbGluZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgdGhlIGtleSBhbmQgdmFsdWUgdG8gdGhlIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBkb2NfcGF0aF8xLnNldFBhdGgpKGRvY3VtZW50LCBoZWFkZXJGaWVsZC52YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2F0Y2ggYW55IGVycm9ycyB3aGVyZSBrZXkgcGF0aHMgYXJlIG51bGwgb3IgJycgYW5kIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIG91dGVybW9zdCB3cmFwIGRlbGltaXRlcnMgZnJvbSBhIHZhbHVlLCBpZiB0aGV5IGFyZSBwcmVzZW50XG4gICAgICogT3RoZXJ3aXNlLCB0aGUgbm9uLXdyYXBwZWQgdmFsdWUgaXMgcmV0dXJuZWQgYXMgaXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVXcmFwRGVsaW1pdGVyc0Zyb21WYWx1ZShmaWVsZFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0Q2hhciA9IGZpZWxkVmFsdWVbMF0sIGxhc3RJbmRleCA9IGZpZWxkVmFsdWUubGVuZ3RoIC0gMSwgbGFzdENoYXIgPSBmaWVsZFZhbHVlW2xhc3RJbmRleF07XG4gICAgICAgIC8vIElmIHRoZSBmaWVsZCBzdGFydHMgYW5kIGVuZHMgd2l0aCBhIHdyYXAgZGVsaW1pdGVyXG4gICAgICAgIGlmIChmaXJzdENoYXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXAgJiYgbGFzdENoYXIgPT09IG9wdGlvbnMuZGVsaW1pdGVyLndyYXApIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgZmllbGQgaXMganVzdCBhIHBhaXIgb2Ygd3JhcCBkZWxpbWl0ZXJzIFxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUubGVuZ3RoIDw9IDIgPyAnJyA6IGZpZWxkVmFsdWUuc3Vic3RyaW5nKDEsIGxhc3RJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuZXNjYXBlcyB3cmFwIGRlbGltaXRlcnMgYnkgcmVwbGFjaW5nIGR1cGxpY2F0ZXMgd2l0aCBhIHNpbmdsZSAoZWcuIFwiXCIgLT4gXCIpXG4gICAgICogVGhpcyBpcyBkb25lIGluIG9yZGVyIHRvIHBhcnNlIFJGQyA0MTgwIGNvbXBsaWFudCBDU1YgYmFjayB0byBKU09OXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGVXcmFwRGVsaW1pdGVySW5GaWVsZChmaWVsZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnJlcGxhY2UoZXNjYXBlZFdyYXBEZWxpbWl0ZXJSZWdleCwgb3B0aW9ucy5kZWxpbWl0ZXIud3JhcCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1haW4gaGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgdGhlIENTViB0byB0aGUgSlNPTiBkb2N1bWVudCBhcnJheVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJlY29yZExpbmVzKHBhcmFtcykge1xuICAgICAgICAvLyBGb3IgZWFjaCBsaW5lLCBjcmVhdGUgdGhlIGRvY3VtZW50IGFuZCBhZGQgaXQgdG8gdGhlIGFycmF5IG9mIGRvY3VtZW50c1xuICAgICAgICByZXR1cm4gcGFyYW1zLnJlY29yZExpbmVzLnJlZHVjZSgoZ2VuZXJhdGVkSnNvbk9iamVjdHMsIGxpbmUpID0+IHtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLm1hcCgoZmllbGRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIG5lY2Vzc2FyeSBvcGVyYXRpb25zIG9uIGVhY2ggbGluZVxuICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUgPSByZW1vdmVXcmFwRGVsaW1pdGVyc0Zyb21WYWx1ZShmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gdW5lc2NhcGVXcmFwRGVsaW1pdGVySW5GaWVsZChmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gdHJpbVJlY29yZFZhbHVlKGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWREb2N1bWVudCA9IGNyZWF0ZURvY3VtZW50KHBhcmFtcy5oZWFkZXJGaWVsZHMsIGxpbmUpO1xuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlZEpzb25PYmplY3RzLmNvbmNhdChnZW5lcmF0ZWREb2N1bWVudCk7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gcGFyc2UgdGhlIHByb3ZpZGVkIHZhbHVlLiBJZiBpdCBpcyBub3QgcGFyc2FibGUsIHRoZW4gYW4gZXJyb3IgaXMgcmV0dXJuZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmdSZXByZXNlbnRhdGlvbih2YWx1ZSwgb3B0aW9ucykgJiYgIXV0aWxzLmlzRGF0ZVJlcHJlc2VudGF0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEpzb24gPSB2YWx1ZVBhcnNlckZuKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBwYXJzZWQgdmFsdWUgaXMgYW4gYXJyYXksIHRoZW4gd2UgYWxzbyBuZWVkIHRvIHRyaW0gcmVjb3JkIHZhbHVlcywgaWYgc3BlY2lmaWVkXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJzZWRKc29uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRKc29uLm1hcCh0cmltUmVjb3JkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZEpzb247XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbGx5IGV4cG9ydGVkIGNzdjJqc29uIGZ1bmN0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29udmVydChkYXRhKSB7XG4gICAgICAgIC8vIFNwbGl0IHRoZSBDU1YgaW50byBsaW5lcyB1c2luZyB0aGUgc3BlY2lmaWVkIEVPTCBvcHRpb25cbiAgICAgICAgY29uc3Qgc3RyaXBwZWQgPSBzdHJpcEV4Y2VsQk9NKGRhdGEpO1xuICAgICAgICBjb25zdCBzcGxpdCA9IHNwbGl0TGluZXMoc3RyaXBwZWQpO1xuICAgICAgICBjb25zdCBoZWFkaW5nID0gcmV0cmlldmVIZWFkaW5nKHNwbGl0KTsgLy8gUmV0cmlldmUgdGhlIGhlYWRpbmdzIGZyb20gdGhlIENTViwgdW5sZXNzIHRoZSB1c2VyIHNwZWNpZmllZCB0aGUga2V5c1xuICAgICAgICBjb25zdCBsaW5lcyA9IHJldHJpZXZlUmVjb3JkTGluZXMoaGVhZGluZyk7IC8vIFJldHJpZXZlIHRoZSByZWNvcmQgbGluZXMgZnJvbSB0aGUgQ1NWXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1SZWNvcmRMaW5lcyhsaW5lcyk7IC8vIFJldHJpZXZlIHRoZSBKU09OIGRvY3VtZW50IGFycmF5XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnZlcnQsXG4gICAgfTtcbn07XG5leHBvcnRzLkNzdjJKc29uID0gQ3N2Mkpzb247XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZXhwb3J0cyIsIkNzdjJKc29uIiwiZG9jX3BhdGhfMSIsInJlcXVpcmUiLCJjb25zdGFudHNfMSIsInV0aWxzIiwib3B0aW9ucyIsImVzY2FwZWRXcmFwRGVsaW1pdGVyUmVnZXgiLCJSZWdFeHAiLCJkZWxpbWl0ZXIiLCJ3cmFwIiwiZXhjZWxCT01SZWdleCIsImV4Y2VsQk9NIiwidmFsdWVQYXJzZXJGbiIsInBhcnNlVmFsdWUiLCJKU09OIiwicGFyc2UiLCJwcm9jZXNzSGVhZGVyS2V5IiwiaGVhZGVyS2V5IiwicmVtb3ZlV3JhcERlbGltaXRlcnNGcm9tVmFsdWUiLCJ0cmltSGVhZGVyRmllbGRzIiwic3BsaXQiLCJtYXAiLCJjb21wb25lbnQiLCJ0cmltIiwiam9pbiIsInJldHJpZXZlSGVhZGluZyIsImxpbmVzIiwiaGVhZGVyRmllbGRzIiwiaGVhZGVyRmllbGQiLCJpbmRleCIsImhlYWRlclJvdyIsImtleXMiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInJlY29yZExpbmVzIiwic3RyaXBFeGNlbEJPTSIsImNzdiIsInJlcGxhY2UiLCJzcGxpdExpbmVzIiwibGFzdENoYXJhY3RlckluZGV4IiwibGVuZ3RoIiwiZW9sRGVsaW1pdGVyTGVuZ3RoIiwiZW9sIiwic3RhdGVWYXJpYWJsZXMiLCJpbnNpZGVXcmFwRGVsaW1pdGVyIiwicGFyc2luZ1ZhbHVlIiwianVzdFBhcnNlZERvdWJsZVF1b3RlIiwic3RhcnRJbmRleCIsInNwbGl0TGluZSIsImNoYXJhY3RlciIsImNoYXJCZWZvcmUiLCJjaGFyQWZ0ZXIiLCJuZXh0TkNoYXIiLCJnZXROQ2hhcmFjdGVycyIsImZpZWxkIiwicHVzaCIsInN1YnN0cmluZyIsInBhcnNlZFZhbHVlIiwidG9JbmRleCIsInJldHJpZXZlUmVjb3JkTGluZXMiLCJwYXJhbXMiLCJzcGxpY2UiLCJyZXRyaWV2ZVJlY29yZFZhbHVlRnJvbUxpbmUiLCJsaW5lIiwicHJvY2Vzc1JlY29yZFZhbHVlIiwiZmllbGRWYWx1ZSIsInBhcnNlZEpzb24iLCJpc0Vycm9yIiwiaXNJbnZhbGlkIiwidHJpbVJlY29yZFZhbHVlIiwidHJpbUZpZWxkVmFsdWVzIiwiY3JlYXRlRG9jdW1lbnQiLCJyZWR1Y2UiLCJkb2N1bWVudCIsInNldFBhdGgiLCJlcnJvciIsImZpcnN0Q2hhciIsImxhc3RJbmRleCIsImxhc3RDaGFyIiwidW5lc2NhcGVXcmFwRGVsaW1pdGVySW5GaWVsZCIsInRyYW5zZm9ybVJlY29yZExpbmVzIiwiZ2VuZXJhdGVkSnNvbk9iamVjdHMiLCJnZW5lcmF0ZWREb2N1bWVudCIsImNvbmNhdCIsImlzU3RyaW5nUmVwcmVzZW50YXRpb24iLCJpc0RhdGVSZXByZXNlbnRhdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImVyciIsImNvbnZlcnQiLCJkYXRhIiwic3RyaXBwZWQiLCJoZWFkaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-2-csv/lib/csv2json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/json-2-csv/lib/json2csv.js":
/*!*************************************************!*\
  !*** ./node_modules/json-2-csv/lib/json2csv.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Json2Csv = void 0;\nconst doc_path_1 = __webpack_require__(/*! doc-path */ \"(ssr)/./node_modules/doc-path/lib/path.js\");\nconst deeks_1 = __webpack_require__(/*! deeks */ \"(ssr)/./node_modules/deeks/lib/deeks.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/json-2-csv/lib/constants.js\");\nconst utils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/json-2-csv/lib/utils.js\"));\nconst Json2Csv = function(options) {\n    const wrapDelimiterCheckRegex = new RegExp(options.delimiter.wrap, \"g\"), crlfSearchRegex = /\\r?\\n|\\r/, customValueParser = options.parseValue && typeof options.parseValue === \"function\" ? options.parseValue : null, expandingWithoutUnwinding = options.expandArrayObjects && !options.unwindArrays, deeksOptions = {\n        arrayIndexesAsKeys: options.arrayIndexesAsKeys,\n        expandNestedObjects: options.expandNestedObjects,\n        expandArrayObjects: expandingWithoutUnwinding,\n        ignoreEmptyArraysWhenExpanding: expandingWithoutUnwinding,\n        escapeNestedDots: true\n    };\n    /** HEADER FIELD FUNCTIONS **/ /**\n     * Returns the list of data field names of all documents in the provided list\n     */ function getFieldNameList(data) {\n        // If keys weren't specified, then we'll use the list of keys generated by the deeks module\n        return (0, deeks_1.deepKeysFromList)(data, deeksOptions);\n    }\n    /**\n     * Processes the schemas by checking for schema differences, if so desired.\n     * If schema differences are not to be checked, then it resolves the unique\n     * list of field names.\n     */ function processSchemas(documentSchemas) {\n        // If there are no document schemas then there is nothing to diff and no unique fields to get\n        if (documentSchemas.length === 0) {\n            return [];\n        }\n        // If the user wants to check for the same schema (regardless of schema ordering)\n        if (options.checkSchemaDifferences) {\n            return checkSchemaDifferences(documentSchemas);\n        } else {\n            // Otherwise, we do not care if the schemas are different, so we should get the unique list of keys\n            const uniqueFieldNames = utils.unique(utils.flatten(documentSchemas));\n            return uniqueFieldNames;\n        }\n    }\n    /**\n     * This function performs the schema difference check, if the user specifies that it should be checked.\n     * If there are no field names, then there are no differences.\n     * Otherwise, we get the first schema and the remaining list of schemas\n     */ function checkSchemaDifferences(documentSchemas) {\n        // have multiple documents - ensure only one schema (regardless of field ordering)\n        const firstDocSchema = documentSchemas[0], restOfDocumentSchemas = documentSchemas.slice(1), schemaDifferences = computeNumberOfSchemaDifferences(firstDocSchema, restOfDocumentSchemas);\n        // If there are schema inconsistencies, throw a schema not the same error\n        if (schemaDifferences) {\n            throw new Error(constants_1.errors.json2csv.notSameSchema);\n        }\n        return firstDocSchema;\n    }\n    /**\n     * Computes the number of schema differences\n     */ function computeNumberOfSchemaDifferences(firstDocSchema, restOfDocumentSchemas) {\n        return restOfDocumentSchemas.reduce((schemaDifferences, documentSchema)=>{\n            // If there is a difference between the schemas, increment the counter of schema inconsistencies\n            const numberOfDifferences = utils.computeSchemaDifferences(firstDocSchema, documentSchema).length;\n            return numberOfDifferences > 0 ? schemaDifferences + 1 : schemaDifferences;\n        }, 0);\n    }\n    /**\n     * If so specified, this filters the detected key paths to exclude any keys that have been specified\n     */ function filterExcludedKeys(keyPaths) {\n        if (options.excludeKeys) {\n            return keyPaths.filter((keyPath)=>{\n                for (const excludedKey of options.excludeKeys){\n                    // Only match if the excludedKey appears at the beginning of the string so we don't accidentally match a key farther down in a key path\n                    const regex = excludedKey instanceof RegExp ? excludedKey : new RegExp(`^${excludedKey}`);\n                    if (excludedKey === keyPath || keyPath.match(regex)) {\n                        return false; // Exclude the key\n                    }\n                }\n                return true; // Otherwise, include the key\n            });\n        }\n        return keyPaths;\n    }\n    /**\n     * If so specified, this sorts the header field names alphabetically\n     */ function sortHeaderFields(fieldNames) {\n        if (options.sortHeader && typeof options.sortHeader === \"function\") {\n            return fieldNames.sort(options.sortHeader);\n        } else if (options.sortHeader) {\n            return fieldNames.sort();\n        }\n        return fieldNames;\n    }\n    /**\n     * Trims the header fields, if the user desires them to be trimmed.\n     */ function trimHeaderFields(params) {\n        if (options.trimHeaderFields) {\n            params.headerFields = params.headerFields.map((field)=>field.split(\".\").map((component)=>component.trim()).join(\".\"));\n        }\n        return params;\n    }\n    /**\n     * Wrap the headings, if desired by the user.\n     */ function wrapHeaderFields(params) {\n        // only perform this if we are actually prepending the header\n        if (options.prependHeader) {\n            params.headerFields = params.headerFields.map(function(headingKey) {\n                return wrapFieldValueIfNecessary(headingKey);\n            });\n        }\n        return params;\n    }\n    /**\n     * Generates the CSV header string by joining the headerFields by the field delimiter\n     */ function generateCsvHeader(params) {\n        // #185 - generate a keys list to avoid finding native Map() methods\n        const fieldTitleMapKeys = Object.keys(options.fieldTitleMap);\n        params.header = params.headerFields.map(function(field) {\n            let headerKey = field;\n            // If a custom field title was provided for this field, use that\n            if (fieldTitleMapKeys.includes(field)) {\n                headerKey = options.fieldTitleMap[field];\n            } else if (!options.escapeHeaderNestedDots) {\n                // Otherwise, if the user doesn't want nested dots in keys to be escaped, then unescape them\n                headerKey = headerKey.replace(/\\\\\\./g, \".\");\n            }\n            return headerKey;\n        }).join(options.delimiter.field);\n        return params;\n    }\n    function convertKeysToHeaderFields() {\n        if (!options.keys) return [];\n        return options.keys.map((key)=>{\n            if (typeof key === \"object\" && \"field\" in key) {\n                options.fieldTitleMap[key.field] = key.title ?? key.field;\n                return key.field;\n            }\n            return key;\n        });\n    }\n    function extractWildcardMatchKeys() {\n        if (!options.keys) return [];\n        return options.keys.flatMap((item)=>{\n            if (typeof item === \"string\") {\n                // Exclude plain strings that were passed in options.keys\n                return [];\n            } else if (item?.wildcardMatch) {\n                // Return \"field\" value for objects with wildcardMatch: true\n                return item.field;\n            }\n            // Exclude other objects\n            return [];\n        });\n    }\n    /**\n     * Retrieve the headings for all documents and return it.\n     * This checks that all documents have the same schema.\n     */ function retrieveHeaderFields(data) {\n        const wildcardMatchKeys = extractWildcardMatchKeys();\n        const keyStrings = convertKeysToHeaderFields();\n        const fieldNames = getFieldNameList(data);\n        const processed = processSchemas(fieldNames);\n        if (options.keys) {\n            options.keys = keyStrings;\n            const matchedKeys = keyStrings.flatMap((userProvidedKey)=>{\n                // If this is not a wildcard matched key, then just return and include it in the resulting key list\n                if (!wildcardMatchKeys.includes(userProvidedKey)) {\n                    return userProvidedKey;\n                }\n                // Otherwise, identify all detected keys that match with the provided wildcard key:\n                const matches = [];\n                const regex = new RegExp(`^${userProvidedKey}`);\n                for (const detectedKey of processed){\n                    if (userProvidedKey === detectedKey || detectedKey.match(regex)) {\n                        matches.push(detectedKey);\n                    }\n                }\n                return matches;\n            });\n            if (!options.unwindArrays) {\n                const filtered = filterExcludedKeys(matchedKeys);\n                return sortHeaderFields(filtered);\n            }\n        }\n        const filtered = filterExcludedKeys(processed);\n        return sortHeaderFields(filtered);\n    }\n    /** RECORD FIELD FUNCTIONS **/ function stillNeedsUnwind(params) {\n        for (const record of params.records){\n            for (const field of params.headerFields){\n                const value = (0, doc_path_1.evaluatePath)(record, field);\n                if (Array.isArray(value)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Unwinds objects in arrays within record objects if the user specifies the\n     * expandArrayObjects option. If not specified, this passes the params\n     * argument through to the next function in the promise chain.\n     *\n     * The `finalPass` parameter is used to trigger one last pass to ensure no more\n     * arrays need to be expanded\n     */ function unwindRecordsIfNecessary(params, finalPass = false) {\n        if (options.unwindArrays) {\n            // Unwind each document at each header field\n            params.headerFields.forEach((headerField)=>{\n                params.records = utils.unwind(params.records, headerField);\n            });\n            params.headerFields = retrieveHeaderFields(params.records);\n            // Continue unwinding if any nested arrays remain\n            if (stillNeedsUnwind(params)) {\n                return unwindRecordsIfNecessary(params, finalPass);\n            }\n            // Run a final time in case the earlier unwinding exposed additional\n            // arrays to unwind...\n            if (!finalPass) {\n                return unwindRecordsIfNecessary(params, true);\n            }\n            // If keys were provided, set the headerFields back to the provided keys after unwinding:\n            if (options.keys) {\n                const userSelectedFields = convertKeysToHeaderFields();\n                params.headerFields = filterExcludedKeys(userSelectedFields);\n            }\n            return params;\n        }\n        return params;\n    }\n    /**\n     * Main function which handles the processing of a record, or document to be converted to CSV format\n     * This function specifies and performs the necessary operations in the necessary order\n     * in order to obtain the data and convert it to CSV form while maintaining RFC 4180 compliance.\n     * * Order of operations:\n     * - Get fields from provided key list (as array of actual values)\n     * - Convert the values to csv/string representation [possible option here for custom converters?]\n     * - Trim fields\n     * - Determine if they need to be wrapped (& wrap if necessary)\n     * - Combine values for each line (by joining by field delimiter)\n     */ function processRecords(params) {\n        params.recordString = params.records.map((record)=>{\n            // Retrieve data for each of the headerFields from this record\n            const recordFieldData = retrieveRecordFieldData(record, params.headerFields), // Process the data in this record and return the\n            processedRecordData = recordFieldData.map((fieldValue)=>{\n                fieldValue = trimRecordFieldValue(fieldValue);\n                fieldValue = preventCsvInjection(fieldValue);\n                let stringified = customValueParser ? customValueParser(fieldValue, recordFieldValueToString) : recordFieldValueToString(fieldValue);\n                stringified = wrapFieldValueIfNecessary(stringified);\n                return stringified;\n            });\n            // Join the record data by the field delimiter\n            return generateCsvRowFromRecord(processedRecordData);\n        }).join(options.delimiter.eol);\n        return params;\n    }\n    /**\n     * Helper function intended to process *just* array values when the expandArrayObjects setting is set to true\n     */ function processRecordFieldDataForExpandedArrayObject(recordFieldValue) {\n        const filteredRecordFieldValue = utils.removeEmptyFields(recordFieldValue);\n        // If we have an array and it's either empty of full of empty values, then use an empty value representation\n        if (!recordFieldValue.length || !filteredRecordFieldValue.length) {\n            return options.emptyFieldValue || \"\";\n        } else if (filteredRecordFieldValue.length === 1) {\n            // Otherwise, we have an array of actual values...\n            // Since we are expanding array objects, we will want to key in on values of objects.\n            return filteredRecordFieldValue[0]; // Extract the single value in the array\n        }\n        return recordFieldValue;\n    }\n    /**\n     * Gets all field values from a particular record for the given list of fields\n     */ function retrieveRecordFieldData(record, fields) {\n        const recordValues = [];\n        fields.forEach((field)=>{\n            let recordFieldValue = (0, doc_path_1.evaluatePath)(record, field);\n            if (!utils.isUndefined(options.emptyFieldValue) && utils.isEmptyField(recordFieldValue)) {\n                recordFieldValue = options.emptyFieldValue;\n            } else if (options.expandArrayObjects && Array.isArray(recordFieldValue)) {\n                recordFieldValue = processRecordFieldDataForExpandedArrayObject(recordFieldValue);\n            }\n            recordValues.push(recordFieldValue);\n        });\n        return recordValues;\n    }\n    /**\n     * Converts a record field value to its string representation\n     */ function recordFieldValueToString(fieldValue) {\n        const isDate = fieldValue instanceof Date; // store to avoid checking twice\n        if (fieldValue === null || Array.isArray(fieldValue) || typeof fieldValue === \"object\" && !isDate) {\n            return JSON.stringify(fieldValue);\n        } else if (typeof fieldValue === \"undefined\") {\n            return \"undefined\";\n        } else if (isDate && options.useDateIso8601Format) {\n            return fieldValue.toISOString();\n        } else {\n            return !options.useLocaleFormat ? fieldValue.toString() : fieldValue.toLocaleString();\n        }\n    }\n    /**\n     * Trims the record field value, if specified by the user's provided options\n     */ function trimRecordFieldValue(fieldValue) {\n        if (options.trimFieldValues) {\n            if (Array.isArray(fieldValue)) {\n                return fieldValue.map(trimRecordFieldValue);\n            } else if (typeof fieldValue === \"string\") {\n                return fieldValue.trim();\n            }\n            return fieldValue;\n        }\n        return fieldValue;\n    }\n    /**\n     * Prevent CSV injection on strings if specified by the user's provided options.\n     * Mitigation will be done by ensuring that the first character doesn't being with:\n     * Equals (=), Plus (+), Minus (-), At (@), Tab (0x09), Carriage return (0x0D).\n     * More info: https://owasp.org/www-community/attacks/CSV_Injection\n     */ function preventCsvInjection(fieldValue) {\n        if (options.preventCsvInjection) {\n            if (Array.isArray(fieldValue)) {\n                return fieldValue.map(preventCsvInjection);\n            } else if (typeof fieldValue === \"string\" && !utils.isNumber(fieldValue)) {\n                return fieldValue.replace(/^[=+\\-@\\t\\r]+/g, \"\");\n            }\n            return fieldValue;\n        }\n        return fieldValue;\n    }\n    /**\n     * Escapes quotation marks in the field value, if necessary, and appropriately\n     * wraps the record field value if it contains a comma (field delimiter),\n     * quotation mark (wrap delimiter), or a line break (CRLF)\n     */ function wrapFieldValueIfNecessary(fieldValue) {\n        const wrapDelimiter = options.delimiter.wrap;\n        // eg. includes quotation marks (default delimiter)\n        if (fieldValue.includes(options.delimiter.wrap)) {\n            // add an additional quotation mark before each quotation mark appearing in the field value\n            fieldValue = fieldValue.replace(wrapDelimiterCheckRegex, wrapDelimiter + wrapDelimiter);\n        }\n        // if the field contains a comma (field delimiter), quotation mark (wrap delimiter), line break, or CRLF\n        //   then enclose it in quotation marks (wrap delimiter)\n        if (fieldValue.includes(options.delimiter.field) || fieldValue.includes(options.delimiter.wrap) || fieldValue.match(crlfSearchRegex) || options.wrapBooleans && (fieldValue === \"true\" || fieldValue === \"false\")) {\n            // wrap the field's value in a wrap delimiter (quotation marks by default)\n            fieldValue = wrapDelimiter + fieldValue + wrapDelimiter;\n        }\n        return fieldValue;\n    }\n    /**\n     * Generates the CSV record string by joining the field values together by the field delimiter\n     */ function generateCsvRowFromRecord(recordFieldValues) {\n        return recordFieldValues.join(options.delimiter.field);\n    }\n    /** CSV COMPONENT COMBINER/FINAL PROCESSOR **/ /**\n     * Performs the final CSV construction by combining the fields in the appropriate\n     * order depending on the provided options values and sends the generated CSV\n     * back to the user\n     */ function generateCsvFromComponents(params) {\n        const header = params.header, records = params.recordString, // If we are prepending the header, then add an EOL, otherwise just return the records\n        csv = (options.excelBOM ? constants_1.excelBOM : \"\") + (options.prependHeader ? header + options.delimiter.eol : \"\") + records;\n        return csv;\n    }\n    /** MAIN CONVERTER FUNCTION **/ /**\n     * Internally exported json2csv function\n     */ function convert(data) {\n        // Single document, not an array\n        if (!Array.isArray(data)) {\n            data = [\n                data\n            ]; // Convert to an array of the given document\n        }\n        // Retrieve the heading and then generate the CSV with the keys that are identified\n        const headerFields = {\n            headerFields: retrieveHeaderFields(data),\n            records: data,\n            header: \"\",\n            recordString: \"\"\n        };\n        const unwinded = unwindRecordsIfNecessary(headerFields);\n        const processed = processRecords(unwinded);\n        const wrapped = wrapHeaderFields(processed);\n        const trimmed = trimHeaderFields(wrapped);\n        const generated = generateCsvHeader(trimmed);\n        return generateCsvFromComponents(generated);\n    }\n    return {\n        convert\n    };\n};\nexports.Json2Csv = Json2Csv;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-2-csv/lib/json2csv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/json-2-csv/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/json-2-csv/lib/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isInvalid = exports.flatten = exports.unique = exports.arrayDifference = exports.isError = exports.isUndefined = exports.isNull = exports.isObject = exports.isString = exports.isNumber = exports.unwind = exports.getNCharacters = exports.removeEmptyFields = exports.isEmptyField = exports.computeSchemaDifferences = exports.isDateRepresentation = exports.isStringRepresentation = exports.deepCopy = exports.validate = exports.buildC2JOptions = exports.buildJ2COptions = void 0;\nconst doc_path_1 = __webpack_require__(/*! doc-path */ \"(ssr)/./node_modules/doc-path/lib/path.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/json-2-csv/lib/constants.js\");\nconst dateStringRegex = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/, MAX_ARRAY_LENGTH = 100000;\n/**\n * Build the options to be passed to the appropriate function\n * If a user does not provide custom options, then we use our default\n * If options are provided, then we set each valid key that was passed\n */ function buildJ2COptions(opts) {\n    return {\n        ...constants_1.defaultJson2CsvOptions,\n        ...opts,\n        delimiter: {\n            field: opts?.delimiter?.field ?? constants_1.defaultJson2CsvOptions.delimiter.field,\n            wrap: opts?.delimiter?.wrap || constants_1.defaultJson2CsvOptions.delimiter.wrap,\n            eol: opts?.delimiter?.eol || constants_1.defaultJson2CsvOptions.delimiter.eol\n        },\n        fieldTitleMap: Object.create({})\n    };\n}\nexports.buildJ2COptions = buildJ2COptions;\n/**\n * Build the options to be passed to the appropriate function\n * If a user does not provide custom options, then we use our default\n * If options are provided, then we set each valid key that was passed\n */ function buildC2JOptions(opts) {\n    return {\n        ...constants_1.defaultCsv2JsonOptions,\n        ...opts,\n        delimiter: {\n            field: opts?.delimiter?.field ?? constants_1.defaultCsv2JsonOptions.delimiter.field,\n            wrap: opts?.delimiter?.wrap || constants_1.defaultCsv2JsonOptions.delimiter.wrap,\n            eol: opts?.delimiter?.eol || constants_1.defaultCsv2JsonOptions.delimiter.eol\n        }\n    };\n}\nexports.buildC2JOptions = buildC2JOptions;\nfunction validate(data, validationFn, errorMessages) {\n    if (!data) throw new Error(`${errorMessages.cannotCallOn} ${data}.`);\n    if (!validationFn(data)) throw new Error(errorMessages.dataCheckFailure);\n    return true;\n}\nexports.validate = validate;\n/**\n * Utility function to deep copy an object, used by the module tests\n */ function deepCopy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nexports.deepCopy = deepCopy;\n/**\n * Helper function that determines whether the provided value is a representation\n *   of a string. Given the RFC4180 requirements, that means that the value is\n *   wrapped in value wrap delimiters (usually a quotation mark on each side).\n */ function isStringRepresentation(fieldValue, options) {\n    const firstChar = fieldValue[0], lastIndex = fieldValue.length - 1, lastChar = fieldValue[lastIndex];\n    // If the field starts and ends with a wrap delimiter\n    return firstChar === options.delimiter.wrap && lastChar === options.delimiter.wrap;\n}\nexports.isStringRepresentation = isStringRepresentation;\n/**\n * Helper function that determines whether the provided value is a representation\n *   of a date.\n */ function isDateRepresentation(fieldValue) {\n    return dateStringRegex.test(fieldValue);\n}\nexports.isDateRepresentation = isDateRepresentation;\n/**\n * Helper function that determines the schema differences between two objects.\n */ function computeSchemaDifferences(schemaA, schemaB) {\n    return arrayDifference(schemaA, schemaB).concat(arrayDifference(schemaB, schemaA));\n}\nexports.computeSchemaDifferences = computeSchemaDifferences;\n/**\n * Utility function to check if a field is considered empty so that the emptyFieldValue can be used instead\n */ function isEmptyField(fieldValue) {\n    return isUndefined(fieldValue) || isNull(fieldValue) || fieldValue === \"\";\n}\nexports.isEmptyField = isEmptyField;\n/**\n * Helper function that removes empty field values from an array.\n */ function removeEmptyFields(fields) {\n    return fields.filter((field)=>!isEmptyField(field));\n}\nexports.removeEmptyFields = removeEmptyFields;\n/**\n * Helper function that retrieves the next n characters from the start index in\n *   the string including the character at the start index. This is used to\n *   check if are currently at an EOL value, since it could be multiple\n *   characters in length (eg. '\\r\\n')\n */ function getNCharacters(str, start, n) {\n    return str.substring(start, start + n);\n}\nexports.getNCharacters = getNCharacters;\n/**\n * The following unwind functionality is a heavily modified version of @edwincen's\n * unwind extension for lodash. Since lodash is a large package to require in,\n * and all of the required functionality was already being imported, either\n * natively or with doc-path, I decided to rewrite the majority of the logic\n * so that an additional dependency would not be required. The original code\n * with the lodash dependency can be found here:\n *\n * https://github.com/edwincen/unwind/blob/master/index.js\n */ /**\n * Core function that unwinds an item at the provided path\n */ function unwindItem(accumulator, item, fieldPath) {\n    const valueToUnwind = (0, doc_path_1.evaluatePath)(item, fieldPath);\n    let cloned = deepCopy(item);\n    if (Array.isArray(valueToUnwind) && valueToUnwind.length) {\n        valueToUnwind.forEach((val)=>{\n            cloned = deepCopy(item);\n            accumulator.push((0, doc_path_1.setPath)(cloned, fieldPath, val));\n        });\n    } else if (Array.isArray(valueToUnwind) && valueToUnwind.length === 0) {\n        // Push an empty string so the value is empty since there are no values\n        (0, doc_path_1.setPath)(cloned, fieldPath, \"\");\n        accumulator.push(cloned);\n    } else {\n        accumulator.push(cloned);\n    }\n}\n/**\n * Main unwind function which takes an array and a field to unwind.\n */ function unwind(array, field) {\n    const result = [];\n    array.forEach((item)=>{\n        unwindItem(result, item, field);\n    });\n    return result;\n}\nexports.unwind = unwind;\n/**\n * Checks whether value can be converted to a number\n */ function isNumber(value) {\n    return !isNaN(Number(value));\n}\nexports.isNumber = isNumber;\n/*\n * Helper functions which were created to remove underscorejs from this package.\n */ function isString(value) {\n    return typeof value === \"string\";\n}\nexports.isString = isString;\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\nexports.isObject = isObject;\nfunction isNull(value) {\n    return value === null;\n}\nexports.isNull = isNull;\nfunction isUndefined(value) {\n    return typeof value === \"undefined\";\n}\nexports.isUndefined = isUndefined;\nfunction isError(value) {\n    // TODO(mrodrig): test this possible change\n    // return value instanceof Error;\n    return Object.prototype.toString.call(value) === \"[object Error]\";\n}\nexports.isError = isError;\nfunction arrayDifference(a, b) {\n    return a.filter((x)=>!b.includes(x));\n}\nexports.arrayDifference = arrayDifference;\nfunction unique(array) {\n    return [\n        ...new Set(array)\n    ];\n}\nexports.unique = unique;\nfunction flatten(array) {\n    // Node 11+ - use the native array flattening function\n    if (array.flat) {\n        return array.flat();\n    }\n    // #167 - allow browsers to flatten very long 200k+ element arrays\n    if (array.length > MAX_ARRAY_LENGTH) {\n        let safeArray = [];\n        for(let a = 0; a < array.length; a += MAX_ARRAY_LENGTH){\n            safeArray = safeArray.concat(...array.slice(a, a + MAX_ARRAY_LENGTH));\n        }\n        return safeArray;\n    }\n    return array.reduce((accumulator, value)=>accumulator.concat(value), []);\n}\nexports.flatten = flatten;\n/**\n * Used to help avoid incorrect values returned by JSON.parse when converting\n * CSV back to JSON, such as '39e1804' which JSON.parse converts to Infinity\n */ function isInvalid(parsedJson) {\n    return parsedJson === Infinity || parsedJson === -Infinity;\n}\nexports.isInvalid = isInvalid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-2-csv/lib/utils.js\n");

/***/ })

};
;