"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/slate-react";
exports.ids = ["vendor-chunks/slate-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/slate-react/dist/index.es.js":
/*!***************************************************!*\
  !*** ./node_modules/slate-react/dist/index.es.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultElement: () => (/* binding */ DefaultElement),\n/* harmony export */   DefaultLeaf: () => (/* binding */ DefaultLeaf),\n/* harmony export */   DefaultPlaceholder: () => (/* binding */ DefaultPlaceholder),\n/* harmony export */   DefaultText: () => (/* binding */ DefaultText),\n/* harmony export */   Editable: () => (/* binding */ Editable),\n/* harmony export */   NODE_TO_INDEX: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX),\n/* harmony export */   NODE_TO_PARENT: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT),\n/* harmony export */   ReactEditor: () => (/* binding */ ReactEditor),\n/* harmony export */   Slate: () => (/* binding */ Slate),\n/* harmony export */   useComposing: () => (/* binding */ useComposing),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useElement: () => (/* binding */ useElement),\n/* harmony export */   useElementIf: () => (/* binding */ useElementIf),\n/* harmony export */   useFocused: () => (/* binding */ useFocused),\n/* harmony export */   useReadOnly: () => (/* binding */ useReadOnly),\n/* harmony export */   useSelected: () => (/* binding */ useSelected),\n/* harmony export */   useSlate: () => (/* binding */ useSlate),\n/* harmony export */   useSlateSelection: () => (/* binding */ useSlateSelection),\n/* harmony export */   useSlateSelector: () => (/* binding */ useSlateSelector),\n/* harmony export */   useSlateStatic: () => (/* binding */ useSlateStatic),\n/* harmony export */   useSlateWithV: () => (/* binding */ useSlateWithV),\n/* harmony export */   withReact: () => (/* binding */ withReact)\n/* harmony export */ });\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! direction */ \"(ssr)/./node_modules/direction/index.js\");\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(direction__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/debounce */ \"(ssr)/./node_modules/lodash/debounce.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/throttle */ \"(ssr)/./node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! scroll-into-view-if-needed */ \"(ssr)/./node_modules/scroll-into-view-if-needed/dist/index.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! slate-dom */ \"(ssr)/./node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @juggle/resize-observer */ \"(ssr)/./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * A React context for sharing the editor object.\n */ var EditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */ var useSlateStatic = ()=>{\n    var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n    if (!editor) {\n        throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n    }\n    return editor;\n};\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = slate_dom__WEBPACK_IMPORTED_MODULE_4__.DOMEditor;\nfunction ownKeys$7(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$7(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$7(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = (value)=>(value === null || value === void 0 ? void 0 : value.constructor.name) === \"DataTransfer\";\nfunction createAndroidInputManager(_ref) {\n    var { editor, scheduleOnDOMSelectionChange, onDOMSelectionChange } = _ref;\n    var flushing = false;\n    var compositionEndTimeoutId = null;\n    var flushTimeoutId = null;\n    var actionTimeoutId = null;\n    var idCounter = 0;\n    var insertPositionHint = false;\n    var applyPendingSelection = ()=>{\n        var pendingSelection = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n        if (pendingSelection) {\n            var { selection } = editor;\n            var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, pendingSelection);\n            if (normalized && (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(normalized, selection))) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, normalized);\n            }\n        }\n    };\n    var performAction = ()=>{\n        var action = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n        if (!action) {\n            return;\n        }\n        if (action.at) {\n            var target = slate__WEBPACK_IMPORTED_MODULE_7__.Point.isPoint(action.at) ? (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizePoint)(editor, action.at) : (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, action.at);\n            if (!target) {\n                return;\n            }\n            var _targetRange = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, target);\n            if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, _targetRange)) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, target);\n            }\n        }\n        action.run();\n    };\n    var flush = ()=>{\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        if (actionTimeoutId) {\n            clearTimeout(actionTimeoutId);\n            actionTimeoutId = null;\n        }\n        if (!hasPendingDiffs() && !hasPendingAction()) {\n            applyPendingSelection();\n            return;\n        }\n        if (!flushing) {\n            flushing = true;\n            setTimeout(()=>flushing = false);\n        }\n        if (hasPendingAction()) {\n            flushing = \"action\";\n        }\n        var selectionRef = editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection, {\n            affinity: \"forward\"\n        });\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n        debug(\"flush\", slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor), slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor));\n        var scheduleSelectionChange = hasPendingDiffs();\n        var diff;\n        while(diff = (_EDITOR_TO_PENDING_DI = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]){\n            var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n            var pendingMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n            if (pendingMarks !== undefined) {\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n                editor.marks = pendingMarks;\n            }\n            if (pendingMarks && insertPositionHint === false) {\n                insertPositionHint = null;\n            }\n            var range = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.targetRange)(diff);\n            if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, range)) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n            }\n            if (diff.diff.text) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, diff.diff.text);\n            } else {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n            }\n            // Remove diff only after we have applied it to account for it when transforming\n            // pending ranges.\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter((_ref2)=>{\n                var { id } = _ref2;\n                return id !== diff.id;\n            }));\n            if (!(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.verifyDiffState)(editor, diff)) {\n                scheduleSelectionChange = false;\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n                flushing = \"action\";\n                // Ensure we don't restore the pending user (dom) selection\n                // since the document and dom state do not match.\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n                scheduleOnDOMSelectionChange.cancel();\n                onDOMSelectionChange.cancel();\n                selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n            }\n        }\n        var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n        if (selection && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, editor.selection))) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, selection);\n        }\n        if (hasPendingAction()) {\n            performAction();\n            return;\n        }\n        // COMPAT: The selectionChange event is fired after the action is performed,\n        // so we have to manually schedule it to ensure we don't 'throw away' the selection\n        // while rendering if we have pending changes.\n        if (scheduleSelectionChange) {\n            scheduleOnDOMSelectionChange();\n        }\n        scheduleOnDOMSelectionChange.flush();\n        onDOMSelectionChange.flush();\n        applyPendingSelection();\n        var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n        if (userMarks !== undefined) {\n            editor.marks = userMarks;\n            editor.onChange();\n        }\n    };\n    var handleCompositionEnd = (_event)=>{\n        if (compositionEndTimeoutId) {\n            clearTimeout(compositionEndTimeoutId);\n        }\n        compositionEndTimeoutId = setTimeout(()=>{\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n            flush();\n        }, RESOLVE_DELAY);\n    };\n    var handleCompositionStart = (_event)=>{\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n        if (compositionEndTimeoutId) {\n            clearTimeout(compositionEndTimeoutId);\n            compositionEndTimeoutId = null;\n        }\n    };\n    var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n        var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var placeholderElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n        if (!placeholderElement) {\n            return;\n        }\n        if (hasPendingDiffs() || forceHide) {\n            placeholderElement.style.display = \"none\";\n            return;\n        }\n        placeholderElement.style.removeProperty(\"display\");\n    };\n    var storeDiff = (path, diff)=>{\n        var _EDITOR_TO_PENDING_DI3;\n        var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n        var target = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, path);\n        var idx = pendingDiffs.findIndex((change)=>slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n        if (idx < 0) {\n            var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeStringDiff)(target.text, diff);\n            if (normalized) {\n                pendingDiffs.push({\n                    path,\n                    diff,\n                    id: idCounter++\n                });\n            }\n            updatePlaceholderVisibility();\n            return;\n        }\n        var merged = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.mergeStringDiffs)(target.text, pendingDiffs[idx].diff, diff);\n        if (!merged) {\n            pendingDiffs.splice(idx, 1);\n            updatePlaceholderVisibility();\n            return;\n        }\n        pendingDiffs[idx] = _objectSpread$7(_objectSpread$7({}, pendingDiffs[idx]), {}, {\n            diff: merged\n        });\n    };\n    var scheduleAction = function scheduleAction(run) {\n        var { at } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        insertPositionHint = false;\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        if (hasPendingAction()) {\n            flush();\n        }\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.set(editor, {\n            at,\n            run\n        });\n        // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n        // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n        // in this case and thus never actually perform the action.\n        actionTimeoutId = setTimeout(flush);\n    };\n    var handleDOMBeforeInput = (event)=>{\n        var _targetRange2;\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n            return;\n        }\n        var { inputType: type } = event;\n        var targetRange = null;\n        var data = event.dataTransfer || event.data || undefined;\n        if (insertPositionHint !== false && type !== \"insertText\" && type !== \"insertCompositionText\") {\n            insertPositionHint = false;\n        }\n        var [nativeTargetRange] = event.getTargetRanges();\n        if (nativeTargetRange) {\n            targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n                exactMatch: false,\n                suppressThrow: true\n            });\n        }\n        // COMPAT: SelectionChange event is fired after the action is performed, so we\n        // have to manually get the selection here to ensure it's up-to-date.\n        var window1 = ReactEditor.getWindow(editor);\n        var domSelection = window1.getSelection();\n        if (!targetRange && domSelection) {\n            nativeTargetRange = domSelection;\n            targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n                exactMatch: false,\n                suppressThrow: true\n            });\n        }\n        targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n        if (!targetRange) {\n            return;\n        }\n        // By default, the input manager tries to store text diffs so that we can\n        // defer flushing them at a later point in time. We don't want to flush\n        // for every input event as this can be expensive. However, there are some\n        // scenarios where we cannot safely store the text diff and must instead\n        // schedule an action to let Slate normalize the editor state.\n        var canStoreDiff = true;\n        if (type.startsWith(\"delete\")) {\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n                var [_start, _end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n                var _leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _start.path);\n                if (_leaf.text.length === _start.offset && _end.offset === 0) {\n                    var next = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.next(editor, {\n                        at: _start.path,\n                        match: slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText\n                    });\n                    if (next && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(next[1], _end.path)) {\n                        targetRange = {\n                            anchor: _end,\n                            focus: _end\n                        };\n                    }\n                }\n            }\n            var direction = type.endsWith(\"Backward\") ? \"backward\" : \"forward\";\n            var [start, end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n            var [leaf, path] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.leaf(editor, start.path);\n            var diff = {\n                text: \"\",\n                start: start.offset,\n                end: end.offset\n            };\n            var pendingDiffs = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor);\n            var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((change)=>slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n            var diffs = relevantPendingDiffs ? [\n                relevantPendingDiffs.diff,\n                diff\n            ] : [\n                diff\n            ];\n            var text = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.applyStringDiff)(leaf.text, ...diffs);\n            if (text.length === 0) {\n                // Text leaf will be removed, so we need to schedule an\n                // action to remove it so that Slate can normalize instead\n                // of storing as a diff\n                canStoreDiff = false;\n            }\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n                if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n                    var point = {\n                        path: targetRange.anchor.path,\n                        offset: start.offset\n                    };\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, point, point);\n                    handleUserSelect(range);\n                    return storeDiff(targetRange.anchor.path, {\n                        text: \"\",\n                        end: end.offset,\n                        start: start.offset\n                    });\n                }\n                return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                        direction\n                    }), {\n                    at: targetRange\n                });\n            }\n        }\n        switch(type){\n            case \"deleteByComposition\":\n            case \"deleteByCut\":\n            case \"deleteByDrag\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteContent\":\n            case \"deleteContentForward\":\n                {\n                    var { anchor } = targetRange;\n                    if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange)) {\n                        var targetNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n                        if (anchor.offset < targetNode.text.length) {\n                            return storeDiff(anchor.path, {\n                                text: \"\",\n                                start: anchor.offset,\n                                end: anchor.offset + 1\n                            });\n                        }\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteContentBackward\":\n                {\n                    var _nativeTargetRange;\n                    var { anchor: _anchor } = targetRange;\n                    // If we have a mismatch between the native and slate selection being collapsed\n                    // we are most likely deleting a zero-width placeholder and thus should perform it\n                    // as an action to ensure correct behavior (mostly happens with mark placeholders)\n                    var nativeCollapsed = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMSelection)(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n                    if (canStoreDiff && nativeCollapsed && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n                        return storeDiff(_anchor.path, {\n                            text: \"\",\n                            start: _anchor.offset - 1,\n                            end: _anchor.offset\n                        });\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteEntireSoftLine\":\n                {\n                    return scheduleAction(()=>{\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                    }, {\n                        at: targetRange\n                    });\n                }\n            case \"deleteHardLineBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"block\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteSoftLineBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteHardLineForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"block\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteSoftLineForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteWordBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"word\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteWordForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"word\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"insertLineBreak\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"insertParagraph\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"insertCompositionText\":\n            case \"deleteCompositionText\":\n            case \"insertFromComposition\":\n            case \"insertFromDrop\":\n            case \"insertFromPaste\":\n            case \"insertFromYank\":\n            case \"insertReplacementText\":\n            case \"insertText\":\n                {\n                    if (isDataTransfer(data)) {\n                        return scheduleAction(()=>ReactEditor.insertData(editor, data), {\n                            at: targetRange\n                        });\n                    }\n                    var _text = data !== null && data !== void 0 ? data : \"\";\n                    // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n                    // the placeholder itself and thus includes the zero-width space inside edit events.\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n                        _text = _text.replace(\"\\uFEFF\", \"\");\n                    }\n                    // Pastes from the Android clipboard will generate `insertText` events.\n                    // If the copied text contains any newlines, Android will append an\n                    // extra newline to the end of the copied text.\n                    if (type === \"insertText\" && /.*\\n.*\\n$/.test(_text)) {\n                        _text = _text.slice(0, -1);\n                    }\n                    // If the text includes a newline, split it at newlines and paste each component\n                    // string, with soft breaks in between each.\n                    if (_text.includes(\"\\n\")) {\n                        return scheduleAction(()=>{\n                            var parts = _text.split(\"\\n\");\n                            parts.forEach((line, i)=>{\n                                if (line) {\n                                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, line);\n                                }\n                                if (i !== parts.length - 1) {\n                                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                                }\n                            });\n                        }, {\n                            at: targetRange\n                        });\n                    }\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n                        var [_start2, _end2] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n                        var _diff = {\n                            start: _start2.offset,\n                            end: _end2.offset,\n                            text: _text\n                        };\n                        // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n                        // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n                        // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n                        // text events are fired with the correct target ranges, only the final 'insertComposition'\n                        // isn't, so we can adjust the target range start offset if we are confident this is the\n                        // swiftkey insert causing the issue.\n                        if (_text && insertPositionHint && type === \"insertCompositionText\") {\n                            var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n                            var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n                            if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                                _diff.start -= 1;\n                                insertPositionHint = null;\n                                scheduleFlush();\n                            } else {\n                                insertPositionHint = false;\n                            }\n                        } else if (type === \"insertText\") {\n                            if (insertPositionHint === null) {\n                                insertPositionHint = _diff;\n                            } else if (insertPositionHint && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                                insertPositionHint = _objectSpread$7(_objectSpread$7({}, insertPositionHint), {}, {\n                                    text: insertPositionHint.text + _text\n                                });\n                            } else {\n                                insertPositionHint = false;\n                            }\n                        } else {\n                            insertPositionHint = false;\n                        }\n                        if (canStoreDiff) {\n                            storeDiff(_start2.path, _diff);\n                            return;\n                        }\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text), {\n                        at: targetRange\n                    });\n                }\n        }\n    };\n    var hasPendingAction = ()=>{\n        return !!slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n    };\n    var hasPendingDiffs = ()=>{\n        var _EDITOR_TO_PENDING_DI4;\n        return !!((_EDITOR_TO_PENDING_DI4 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n    };\n    var hasPendingChanges = ()=>{\n        return hasPendingAction() || hasPendingDiffs();\n    };\n    var isFlushing = ()=>{\n        return flushing;\n    };\n    var handleUserSelect = (range)=>{\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.set(editor, range);\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        var { selection } = editor;\n        if (!range) {\n            return;\n        }\n        var pathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path, range.anchor.path);\n        var parentPathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n        if (pathChanged && insertPositionHint || parentPathChanged) {\n            insertPositionHint = false;\n        }\n        if (pathChanged || hasPendingDiffs()) {\n            flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n        }\n    };\n    var handleInput = ()=>{\n        if (hasPendingAction() || !hasPendingDiffs()) {\n            flush();\n        }\n    };\n    var handleKeyDown = (_)=>{\n        // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n        // directly next to a non-contenteditable element (= the placeholder).\n        // The only event fired soon enough for us to allow hiding the placeholder\n        // without swiftkey picking it up is the keydown event, so we have to hide it\n        // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n        if (!hasPendingDiffs()) {\n            updatePlaceholderVisibility(true);\n            setTimeout(updatePlaceholderVisibility);\n        }\n    };\n    var scheduleFlush = ()=>{\n        if (!hasPendingAction()) {\n            actionTimeoutId = setTimeout(flush);\n        }\n    };\n    var handleDomMutations = (mutations)=>{\n        if (hasPendingDiffs() || hasPendingAction()) {\n            return;\n        }\n        if (mutations.some((mutation)=>(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations))) {\n            var _EDITOR_TO_FORCE_REND;\n            // Cause a re-render to restore the dom state if we encounter tracked mutations without\n            // a corresponding pending action.\n            (_EDITOR_TO_FORCE_REND = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n        }\n    };\n    return {\n        flush,\n        scheduleFlush,\n        hasPendingDiffs,\n        hasPendingAction,\n        hasPendingChanges,\n        isFlushing,\n        handleUserSelect,\n        handleCompositionEnd,\n        handleCompositionStart,\n        handleDOMBeforeInput,\n        handleKeyDown,\n        handleDomMutations,\n        handleInput\n    };\n}\nfunction useIsMounted() {\n    var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        isMountedRef.current = true;\n        return ()=>{\n            isMountedRef.current = false;\n        };\n    }, []);\n    return isMountedRef.current;\n}\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */ var useIsomorphicLayoutEffect = slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_3__.useEffect;\nfunction useMutationObserver(node, callback, options) {\n    var [mutationObserver] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>new MutationObserver(callback));\n    useIsomorphicLayoutEffect(()=>{\n        // Discard mutations caused during render phase. This works due to react calling\n        // useLayoutEffect synchronously after the render phase before the next tick.\n        mutationObserver.takeRecords();\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (!node.current) {\n            throw new Error(\"Failed to attach MutationObserver, `node` is undefined\");\n        }\n        mutationObserver.observe(node.current, options);\n        return ()=>mutationObserver.disconnect();\n    }, [\n        mutationObserver,\n        node,\n        options\n    ]);\n}\nvar _excluded$2 = [\n    \"node\"\n];\nfunction ownKeys$6(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$6(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$6(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar MUTATION_OBSERVER_CONFIG$1 = {\n    subtree: true,\n    childList: true,\n    characterData: true\n};\nvar useAndroidInputManager = !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? ()=>null : (_ref)=>{\n    var { node } = _ref, options = _objectWithoutProperties(_ref, _excluded$2);\n    if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n        return null;\n    }\n    var editor = useSlateStatic();\n    var isMounted = useIsMounted();\n    var [inputManager] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>createAndroidInputManager(_objectSpread$6({\n            editor\n        }, options)));\n    useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n    if (isMounted) {\n        inputManager.flush();\n    }\n    return inputManager;\n};\nfunction ownKeys$5(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$5(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$5(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n/**\n * Leaf content strings.\n */ var String$1 = (props)=>{\n    var { isLast, leaf, parent, text } = props;\n    var editor = useSlateStatic();\n    var path = ReactEditor.findPath(editor, text);\n    var parentPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(path);\n    var isMarkPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]);\n    // COMPAT: Render text inside void nodes with a zero-width space.\n    // So the node can contain selection but the text is not visible.\n    if (editor.isVoid(parent)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            length: slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(parent).length\n        });\n    }\n    // COMPAT: If this is the last text node in an empty block, render a zero-\n    // width space that will convert into a line break when copying and pasting\n    // to support expected plain text.\n    if (leaf.text === \"\" && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.string(editor, parentPath) === \"\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            isLineBreak: true,\n            isMarkPlaceholder: isMarkPlaceholder\n        });\n    }\n    // COMPAT: If the text is empty, it's because it's on the edge of an inline\n    // node, so we render a zero-width space so that the selection can be\n    // inserted next to it still.\n    if (leaf.text === \"\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            isMarkPlaceholder: isMarkPlaceholder\n        });\n    }\n    // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n    // so we need to add an extra trailing new lines to prevent that.\n    if (isLast && leaf.text.slice(-1) === \"\\n\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n            isTrailing: true,\n            text: leaf.text\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n        text: leaf.text\n    });\n};\n/**\n * Leaf strings with text in them.\n */ var TextString = (props)=>{\n    var { text, isTrailing = false } = props;\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var getTextContent = ()=>{\n        return \"\".concat(text !== null && text !== void 0 ? text : \"\").concat(isTrailing ? \"\\n\" : \"\");\n    };\n    var [initialText] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(getTextContent);\n    // This is the actual text rendering boundary where we interface with the DOM\n    // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n    // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n    // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n    // exactly if and only if its current content does not match our current virtual DOM.\n    // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n    // eg makes native spellcheck opt out from checking the text node.\n    // useLayoutEffect: updating our span before browser paint\n    useIsomorphicLayoutEffect(()=>{\n        // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n        var textWithTrailing = getTextContent();\n        if (ref.current && ref.current.textContent !== textWithTrailing) {\n            ref.current.textContent = textWithTrailing;\n        }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n    });\n    // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n    // We defer to the layout effect above to update the `textContent` of the span element when needed.\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText$1, {\n        ref: ref\n    }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, ref)=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n        \"data-slate-string\": true,\n        ref: ref\n    }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */ var ZeroWidthString = (props)=>{\n    var { length = 0, isLineBreak = false, isMarkPlaceholder = false } = props;\n    var attributes = {\n        \"data-slate-zero-width\": isLineBreak ? \"n\" : \"z\",\n        \"data-slate-length\": length\n    };\n    if (isMarkPlaceholder) {\n        attributes[\"data-slate-mark-placeholder\"] = true;\n    }\n    // FIXME: Inserting the \\uFEFF on iOS breaks capitalization at the start of an\n    // empty editor (https://github.com/ianstormtaylor/slate/issues/5199).\n    //\n    // However, not inserting the \\uFEFF on iOS causes the editor to crash when\n    // inserting any text using an IME at the start of a block. This appears to\n    // be because accepting an IME suggestion when at the start of a block (no\n    // preceding \\uFEFF) removes one or more DOM elements that `toSlateRange`\n    // depends on. (https://github.com/ianstormtaylor/slate/issues/5703)\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$5({}, attributes), !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !isLineBreak ? \"\\uFEFF\" : null, isLineBreak ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null) : null);\n};\nfunction ownKeys$4(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$4(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$4(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n    if (placeholderResizeObserver.current) {\n        placeholderResizeObserver.current.disconnect();\n        if (releaseObserver) {\n            placeholderResizeObserver.current = null;\n        }\n    }\n}\nfunction clearTimeoutRef(timeoutRef) {\n    if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n    }\n}\nvar defaultRenderLeaf = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultLeaf, _objectSpread$4({}, props));\n/**\n * Individual leaves in a text node with unique formatting.\n */ var Leaf = (props)=>{\n    var { leaf, isLast, text, parent, renderPlaceholder, renderLeaf = defaultRenderLeaf, leafPosition } = props;\n    var editor = useSlateStatic();\n    var placeholderResizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var placeholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var [showPlaceholder, setShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    var showPlaceholderTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var callbackPlaceholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((placeholderEl)=>{\n        disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n        if (placeholderEl == null) {\n            var _leaf$onPlaceholderRe;\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n            (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n        } else {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n            if (!placeholderResizeObserver.current) {\n                // Create a new observer and observe the placeholder element.\n                var ResizeObserver$1 = window.ResizeObserver || _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__.ResizeObserver;\n                placeholderResizeObserver.current = new ResizeObserver$1(()=>{\n                    var _leaf$onPlaceholderRe2;\n                    (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n                });\n            }\n            placeholderResizeObserver.current.observe(placeholderEl);\n            placeholderRef.current = placeholderEl;\n        }\n    }, [\n        placeholderRef,\n        leaf,\n        editor\n    ]);\n    var children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(String$1, {\n        isLast: isLast,\n        leaf: leaf,\n        parent: parent,\n        text: text\n    });\n    var leafIsPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (leafIsPlaceholder) {\n            if (!showPlaceholderTimeoutRef.current) {\n                // Delay the placeholder, so it will not render in a selection\n                showPlaceholderTimeoutRef.current = setTimeout(()=>{\n                    setShowPlaceholder(true);\n                    showPlaceholderTimeoutRef.current = null;\n                }, PLACEHOLDER_DELAY);\n            }\n        } else {\n            clearTimeoutRef(showPlaceholderTimeoutRef);\n            setShowPlaceholder(false);\n        }\n        return ()=>clearTimeoutRef(showPlaceholderTimeoutRef);\n    }, [\n        leafIsPlaceholder,\n        setShowPlaceholder\n    ]);\n    if (leafIsPlaceholder && showPlaceholder) {\n        var placeholderProps = {\n            children: leaf.placeholder,\n            attributes: {\n                \"data-slate-placeholder\": true,\n                style: {\n                    position: \"absolute\",\n                    top: 0,\n                    pointerEvents: \"none\",\n                    width: \"100%\",\n                    maxWidth: \"100%\",\n                    display: \"block\",\n                    opacity: \"0.333\",\n                    userSelect: \"none\",\n                    textDecoration: \"none\",\n                    // Fixes https://github.com/udecode/plate/issues/2315\n                    WebkitUserModify: slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT ? \"inherit\" : undefined\n                },\n                contentEditable: false,\n                ref: callbackPlaceholderRef\n            }\n        };\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children, renderPlaceholder(placeholderProps));\n    }\n    // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n    // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n    // contenteditable behaviors. (2019/05/08)\n    var attributes = {\n        \"data-slate-leaf\": true\n    };\n    return renderLeaf({\n        attributes,\n        children,\n        leaf,\n        text,\n        leafPosition\n    });\n};\nvar MemoizedLeaf = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Leaf, (prev, next)=>{\n    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(next.leaf, prev.leaf) && next.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL] === prev.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = (props)=>{\n    var { attributes, children } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$4({}, attributes), children);\n};\n/**\n * Create a selector that updates when an `update` function is called, and\n * which only causes the component to render when the result of `selector`\n * differs from the previous result according to `equalityFn`.\n *\n * If `selector` is memoized using `useCallback`, then it will only be called\n * when it changes or when `update` is called. Otherwise, `selector` will be\n * called every time the component renders.\n *\n * @example\n * const [state, update] = useGenericSelector(selector, equalityFn)\n *\n * useIsomorphicLayoutEffect(() => {\n *   return addEventListener(update)\n * }, [addEventListener, update])\n *\n * return state\n */ function useGenericSelector(selector, equalityFn) {\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(()=>null);\n    var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var selectedState;\n    try {\n        if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n            var selectorResult = selector();\n            if (equalityFn(latestSelectedState.current, selectorResult)) {\n                selectedState = latestSelectedState.current;\n            } else {\n                selectedState = selectorResult;\n            }\n        } else {\n            selectedState = latestSelectedState.current;\n        }\n    } catch (err) {\n        if (latestSubscriptionCallbackError.current && isError(err)) {\n            err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n        }\n        throw err;\n    }\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n    var update = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        try {\n            var newSelectedState = latestSelector.current();\n            if (equalityFn(latestSelectedState.current, newSelectedState)) {\n                return;\n            }\n            latestSelectedState.current = newSelectedState;\n        } catch (err) {\n            // we ignore all errors here, since when the component\n            // is re-rendered, the selectors are called again, and\n            // will throw again, if neither props nor store state\n            // changed\n            if (err instanceof Error) {\n                latestSubscriptionCallbackError.current = err;\n            } else {\n                latestSubscriptionCallbackError.current = new Error(String(err));\n            }\n        }\n        forceRender();\n    // don't rerender on equalityFn change since we want to be able to define it inline\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return [\n        selectedState,\n        update\n    ];\n}\nfunction isError(error) {\n    return error instanceof Error;\n}\n/**\n * A React context for sharing the `decorate` prop of the editable and\n * subscribing to changes on this prop.\n */ var DecorateContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar useDecorations = (node, parentDecorations)=>{\n    var editor = useSlateStatic();\n    var { decorate, addEventListener } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(DecorateContext);\n    // Not memoized since we want nodes to be decorated on each render\n    var selector = ()=>{\n        var path = ReactEditor.findPath(editor, node);\n        return decorate([\n            node,\n            path\n        ]);\n    };\n    var equalityFn = slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(node) ? slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTextDecorationsEqual : slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual;\n    var [decorations, update] = useGenericSelector(selector, equalityFn);\n    useIsomorphicLayoutEffect(()=>{\n        var unsubscribe = addEventListener(update);\n        update();\n        return unsubscribe;\n    }, [\n        addEventListener,\n        update\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>[\n            ...decorations,\n            ...parentDecorations\n        ], [\n        decorations,\n        parentDecorations\n    ]);\n};\nvar useDecorateContext = (decorateProp)=>{\n    var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Set());\n    var latestDecorate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(decorateProp);\n    useIsomorphicLayoutEffect(()=>{\n        latestDecorate.current = decorateProp;\n        eventListeners.current.forEach((listener)=>listener());\n    }, [\n        decorateProp\n    ]);\n    var decorate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((entry)=>latestDecorate.current(entry), []);\n    var addEventListener = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((callback)=>{\n        eventListeners.current.add(callback);\n        return ()=>{\n            eventListeners.current.delete(callback);\n        };\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({\n            decorate,\n            addEventListener\n        }), [\n        decorate,\n        addEventListener\n    ]);\n};\nfunction ownKeys$3(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$3(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$3(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar defaultRenderText = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultText, _objectSpread$3({}, props));\n/**\n * Text.\n */ var Text = (props)=>{\n    var { decorations: parentDecorations, isLast, parent, renderPlaceholder, renderLeaf, renderText = defaultRenderText, text } = props;\n    var editor = useSlateStatic();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var decorations = useDecorations(text, parentDecorations);\n    var decoratedLeaves = slate__WEBPACK_IMPORTED_MODULE_7__.Text.decorations(text, decorations);\n    var key = ReactEditor.findKey(editor, text);\n    var children = [];\n    for(var i = 0; i < decoratedLeaves.length; i++){\n        var { leaf, position } = decoratedLeaves[i];\n        children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedLeaf, {\n            isLast: isLast && i === decoratedLeaves.length - 1,\n            key: \"\".concat(key.id, \"-\").concat(i),\n            renderPlaceholder: renderPlaceholder,\n            leaf: leaf,\n            leafPosition: position,\n            text: text,\n            parent: parent,\n            renderLeaf: renderLeaf\n        }));\n    }\n    // Update element-related weak maps with the DOM element ref.\n    var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((span)=>{\n        var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        if (span) {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(text, span);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(span, text);\n        } else {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(text);\n            if (ref.current) {\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.delete(ref.current);\n            }\n        }\n        ref.current = span;\n    }, [\n        ref,\n        editor,\n        key,\n        text\n    ]);\n    var attributes = {\n        \"data-slate-node\": \"text\",\n        ref: callbackRef\n    };\n    return renderText({\n        text,\n        children,\n        attributes\n    });\n};\nvar MemoizedText = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Text, (prev, next)=>{\n    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderText === prev.renderText && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTextDecorationsEqual)(next.decorations, prev.decorations);\n});\nvar DefaultText = (props)=>{\n    var { attributes, children } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$3({}, attributes), children);\n};\nfunction ownKeys$2(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$2(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar defaultRenderElement = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultElement, _objectSpread$2({}, props));\n/**\n * Element.\n */ var Element = (props)=>{\n    var { decorations: parentDecorations, element, renderElement = defaultRenderElement, renderChunk, renderPlaceholder, renderLeaf, renderText } = props;\n    var editor = useSlateStatic();\n    var readOnly = useReadOnly();\n    var isInline = editor.isInline(element);\n    var decorations = useDecorations(element, parentDecorations);\n    var key = ReactEditor.findKey(editor, element);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((ref)=>{\n        // Update element-related weak maps with the DOM element ref.\n        var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        if (ref) {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(element, ref);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref, element);\n        } else {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(element);\n        }\n    }, [\n        editor,\n        key,\n        element\n    ]);\n    var children = useChildren({\n        decorations,\n        node: element,\n        renderElement,\n        renderChunk,\n        renderPlaceholder,\n        renderLeaf,\n        renderText\n    });\n    // Attributes that the developer must mix into the element in their\n    // custom node renderer component.\n    var attributes = {\n        \"data-slate-node\": \"element\",\n        ref\n    };\n    if (isInline) {\n        attributes[\"data-slate-inline\"] = true;\n    }\n    // If it's a block node with inline children, add the proper `dir` attribute\n    // for text direction.\n    if (!isInline && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, element)) {\n        var text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element);\n        var dir = direction__WEBPACK_IMPORTED_MODULE_0___default()(text);\n        if (dir === \"rtl\") {\n            attributes.dir = dir;\n        }\n    }\n    // If it's a void node, wrap the children in extra void-specific elements.\n    if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, element)) {\n        attributes[\"data-slate-void\"] = true;\n        if (!readOnly && isInline) {\n            attributes.contentEditable = false;\n        }\n        var Tag = isInline ? \"span\" : \"div\";\n        var [[_text]] = slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(element);\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, {\n            \"data-slate-spacer\": true,\n            style: {\n                height: \"0\",\n                color: \"transparent\",\n                outline: \"none\",\n                position: \"absolute\"\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n            renderPlaceholder: renderPlaceholder,\n            decorations: [],\n            isLast: false,\n            parent: element,\n            text: _text\n        }));\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(_text, 0);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(_text, element);\n    }\n    return renderElement({\n        attributes,\n        children,\n        element\n    });\n};\nvar MemoizedElement = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Element, (prev, next)=>{\n    return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderChunk === next.renderChunk && prev.renderText === next.renderText && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual)(prev.decorations, next.decorations);\n});\n/**\n * The default element renderer.\n */ var DefaultElement = (props)=>{\n    var { attributes, children, element } = props;\n    var editor = useSlateStatic();\n    var Tag = editor.isInline(element) ? \"span\" : \"div\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, _objectSpread$2(_objectSpread$2({}, attributes), {}, {\n        style: {\n            position: \"relative\"\n        }\n    }), children);\n};\n/**\n * Traverse and modify a chunk tree\n */ class ChunkTreeHelper {\n    constructor(chunkTree, _ref){\n        var { chunkSize, debug } = _ref;\n        /**\n     * The root of the chunk tree\n     */ _defineProperty(this, \"root\", void 0);\n        /**\n     * The ideal size of a chunk\n     */ _defineProperty(this, \"chunkSize\", void 0);\n        /**\n     * Whether debug mode is enabled\n     *\n     * If enabled, the pointer state will be checked for internal consistency\n     * after each mutating operation.\n     */ _defineProperty(this, \"debug\", void 0);\n        /**\n     * Whether the traversal has reached the end of the chunk tree\n     *\n     * When this is true, the pointerChunk and pointerIndex point to the last\n     * top-level node in the chunk tree, although pointerNode returns null.\n     */ _defineProperty(this, \"reachedEnd\", void 0);\n        /**\n     * The chunk containing the current node\n     */ _defineProperty(this, \"pointerChunk\", void 0);\n        /**\n     * The index of the current node within pointerChunk\n     *\n     * Can be -1 to indicate that the pointer is before the start of the tree.\n     */ _defineProperty(this, \"pointerIndex\", void 0);\n        /**\n     * Similar to a Slate path; tracks the path of pointerChunk relative to the\n     * root.\n     *\n     * Used to move the pointer from the current chunk to the parent chunk more\n     * efficiently.\n     */ _defineProperty(this, \"pointerIndexStack\", void 0);\n        /**\n     * Indexing the current chunk's children has a slight time cost, which adds up\n     * when traversing very large trees, so the current node is cached.\n     *\n     * A value of undefined means that the current node is not cached. This\n     * property must be set to undefined whenever the pointer is moved, unless\n     * the pointer is guaranteed to point to the same node that it did previously.\n     */ _defineProperty(this, \"cachedPointerNode\", void 0);\n        this.root = chunkTree;\n        this.chunkSize = chunkSize;\n        // istanbul ignore next\n        this.debug = debug !== null && debug !== void 0 ? debug : false;\n        this.pointerChunk = chunkTree;\n        this.pointerIndex = -1;\n        this.pointerIndexStack = [];\n        this.reachedEnd = false;\n        this.validateState();\n    }\n    /**\n   * Move the pointer to the next leaf in the chunk tree\n   */ readLeaf() {\n        // istanbul ignore next\n        if (this.reachedEnd) return null;\n        // Get the next sibling or aunt node\n        while(true){\n            if (this.pointerIndex + 1 < this.pointerSiblings.length) {\n                this.pointerIndex++;\n                this.cachedPointerNode = undefined;\n                break;\n            } else if (this.pointerChunk.type === \"root\") {\n                this.reachedEnd = true;\n                return null;\n            } else {\n                this.exitChunk();\n            }\n        }\n        this.validateState();\n        // If the next sibling or aunt is a chunk, descend into it\n        this.enterChunkUntilLeaf(false);\n        return this.pointerNode;\n    }\n    /**\n   * Move the pointer to the previous leaf in the chunk tree\n   */ returnToPreviousLeaf() {\n        // If we were at the end of the tree, descend into the end of the last\n        // chunk in the tree\n        if (this.reachedEnd) {\n            this.reachedEnd = false;\n            this.enterChunkUntilLeaf(true);\n            return;\n        }\n        // Get the previous sibling or aunt node\n        while(true){\n            if (this.pointerIndex >= 1) {\n                this.pointerIndex--;\n                this.cachedPointerNode = undefined;\n                break;\n            } else if (this.pointerChunk.type === \"root\") {\n                this.pointerIndex = -1;\n                return;\n            } else {\n                this.exitChunk();\n            }\n        }\n        this.validateState();\n        // If the previous sibling or aunt is a chunk, descend into it\n        this.enterChunkUntilLeaf(true);\n    }\n    /**\n   * Insert leaves before the current leaf, leaving the pointer unchanged\n   */ insertBefore(leaves) {\n        this.returnToPreviousLeaf();\n        this.insertAfter(leaves);\n        this.readLeaf();\n    }\n    /**\n   * Insert leaves after the current leaf, leaving the pointer on the last\n   * inserted leaf\n   *\n   * The insertion algorithm first checks for any chunk we're currently at the\n   * end of that can receive additional leaves. Next, it tries to insert leaves\n   * at the starts of any subsequent chunks.\n   *\n   * Any remaining leaves are passed to rawInsertAfter to be chunked and\n   * inserted at the highest possible level.\n   */ insertAfter(leaves) {\n        // istanbul ignore next\n        if (leaves.length === 0) return;\n        var beforeDepth = 0;\n        var afterDepth = 0;\n        // While at the end of a chunk, insert any leaves that will fit, and then\n        // exit the chunk\n        while(this.pointerChunk.type === \"chunk\" && this.pointerIndex === this.pointerSiblings.length - 1){\n            var remainingCapacity = this.chunkSize - this.pointerSiblings.length;\n            var toInsertCount = Math.min(remainingCapacity, leaves.length);\n            if (toInsertCount > 0) {\n                var leavesToInsert = leaves.splice(0, toInsertCount);\n                this.rawInsertAfter(leavesToInsert, beforeDepth);\n            }\n            this.exitChunk();\n            beforeDepth++;\n        }\n        if (leaves.length === 0) return;\n        // Save the pointer so that we can come back here after inserting leaves\n        // into the starts of subsequent blocks\n        var rawInsertPointer = this.savePointer();\n        // If leaves are inserted into the start of a subsequent block, then we\n        // eventually need to restore the pointer to the last such inserted leaf\n        var finalPointer = null;\n        // Move the pointer into the chunk containing the next leaf, if it exists\n        if (this.readLeaf()) {\n            // While at the start of a chunk, insert any leaves that will fit, and\n            // then exit the chunk\n            while(this.pointerChunk.type === \"chunk\" && this.pointerIndex === 0){\n                var _remainingCapacity = this.chunkSize - this.pointerSiblings.length;\n                var _toInsertCount = Math.min(_remainingCapacity, leaves.length);\n                if (_toInsertCount > 0) {\n                    var _leavesToInsert = leaves.splice(-_toInsertCount, _toInsertCount);\n                    // Insert the leaves at the start of the chunk\n                    this.pointerIndex = -1;\n                    this.cachedPointerNode = undefined;\n                    this.rawInsertAfter(_leavesToInsert, afterDepth);\n                    // If this is the first batch of insertions at the start of a\n                    // subsequent chunk, set the final pointer to the last inserted leaf\n                    if (!finalPointer) {\n                        finalPointer = this.savePointer();\n                    }\n                }\n                this.exitChunk();\n                afterDepth++;\n            }\n        }\n        this.restorePointer(rawInsertPointer);\n        // If there are leaves left to insert, insert them between the end of the\n        // previous chunk and the start of the first subsequent chunk, or wherever\n        // the pointer ended up after the first batch of insertions\n        var minDepth = Math.max(beforeDepth, afterDepth);\n        this.rawInsertAfter(leaves, minDepth);\n        if (finalPointer) {\n            this.restorePointer(finalPointer);\n        }\n        this.validateState();\n    }\n    /**\n   * Remove the current node and decrement the pointer, deleting any ancestor\n   * chunk that becomes empty as a result\n   */ remove() {\n        this.pointerSiblings.splice(this.pointerIndex--, 1);\n        this.cachedPointerNode = undefined;\n        if (this.pointerSiblings.length === 0 && this.pointerChunk.type === \"chunk\") {\n            this.exitChunk();\n            this.remove();\n        } else {\n            this.invalidateChunk();\n        }\n        this.validateState();\n    }\n    /**\n   * Add the current chunk and all ancestor chunks to the list of modified\n   * chunks\n   */ invalidateChunk() {\n        for(var c = this.pointerChunk; c.type === \"chunk\"; c = c.parent){\n            this.root.modifiedChunks.add(c);\n        }\n    }\n    /**\n   * Whether the pointer is at the start of the tree\n   */ get atStart() {\n        return this.pointerChunk.type === \"root\" && this.pointerIndex === -1;\n    }\n    /**\n   * The siblings of the current node\n   */ get pointerSiblings() {\n        return this.pointerChunk.children;\n    }\n    /**\n   * Get the current node (uncached)\n   *\n   * If the pointer is at the start or end of the document, returns null.\n   *\n   * Usually, the current node is a chunk leaf, although it can be a chunk\n   * while insertions are in progress.\n   */ getPointerNode() {\n        if (this.reachedEnd || this.pointerIndex === -1) {\n            return null;\n        }\n        return this.pointerSiblings[this.pointerIndex];\n    }\n    /**\n   * Cached getter for the current node\n   */ get pointerNode() {\n        if (this.cachedPointerNode !== undefined) return this.cachedPointerNode;\n        var pointerNode = this.getPointerNode();\n        this.cachedPointerNode = pointerNode;\n        return pointerNode;\n    }\n    /**\n   * Get the path of a chunk relative to the root, returning null if the chunk\n   * is not connected to the root\n   */ getChunkPath(chunk) {\n        var path = [];\n        for(var c = chunk; c.type === \"chunk\"; c = c.parent){\n            var index = c.parent.children.indexOf(c);\n            // istanbul ignore next\n            if (index === -1) {\n                return null;\n            }\n            path.unshift(index);\n        }\n        return path;\n    }\n    /**\n   * Save the current pointer to be restored later\n   */ savePointer() {\n        if (this.atStart) return \"start\";\n        // istanbul ignore next\n        if (!this.pointerNode) {\n            throw new Error(\"Cannot save pointer when pointerNode is null\");\n        }\n        return {\n            chunk: this.pointerChunk,\n            node: this.pointerNode\n        };\n    }\n    /**\n   * Restore the pointer to a previous state\n   */ restorePointer(savedPointer) {\n        if (savedPointer === \"start\") {\n            this.pointerChunk = this.root;\n            this.pointerIndex = -1;\n            this.pointerIndexStack = [];\n            this.reachedEnd = false;\n            this.cachedPointerNode = undefined;\n            return;\n        }\n        // Since nodes may have been inserted or removed prior to the saved\n        // pointer since it was saved, the index and index stack must be\n        // recomputed. This is slow, but this is fine since restoring a pointer is\n        // not a frequent operation.\n        var { chunk, node } = savedPointer;\n        var index = chunk.children.indexOf(node);\n        // istanbul ignore next\n        if (index === -1) {\n            throw new Error(\"Cannot restore point because saved node is no longer in saved chunk\");\n        }\n        var indexStack = this.getChunkPath(chunk);\n        // istanbul ignore next\n        if (!indexStack) {\n            throw new Error(\"Cannot restore point because saved chunk is no longer connected to root\");\n        }\n        this.pointerChunk = chunk;\n        this.pointerIndex = index;\n        this.pointerIndexStack = indexStack;\n        this.reachedEnd = false;\n        this.cachedPointerNode = node;\n        this.validateState();\n    }\n    /**\n   * Assuming the current node is a chunk, move the pointer into that chunk\n   *\n   * @param end If true, place the pointer on the last node of the chunk.\n   * Otherwise, place the pointer on the first node.\n   */ enterChunk(end) {\n        var _this$pointerNode;\n        // istanbul ignore next\n        if (((_this$pointerNode = this.pointerNode) === null || _this$pointerNode === void 0 ? void 0 : _this$pointerNode.type) !== \"chunk\") {\n            throw new Error(\"Cannot enter non-chunk\");\n        }\n        this.pointerIndexStack.push(this.pointerIndex);\n        this.pointerChunk = this.pointerNode;\n        this.pointerIndex = end ? this.pointerSiblings.length - 1 : 0;\n        this.cachedPointerNode = undefined;\n        this.validateState();\n        // istanbul ignore next\n        if (this.pointerChunk.children.length === 0) {\n            throw new Error(\"Cannot enter empty chunk\");\n        }\n    }\n    /**\n   * Assuming the current node is a chunk, move the pointer into that chunk\n   * repeatedly until the current node is a leaf\n   *\n   * @param end If true, place the pointer on the last node of the chunk.\n   * Otherwise, place the pointer on the first node.\n   */ enterChunkUntilLeaf(end) {\n        while(((_this$pointerNode2 = this.pointerNode) === null || _this$pointerNode2 === void 0 ? void 0 : _this$pointerNode2.type) === \"chunk\"){\n            var _this$pointerNode2;\n            this.enterChunk(end);\n        }\n    }\n    /**\n   * Move the pointer to the parent chunk\n   */ exitChunk() {\n        // istanbul ignore next\n        if (this.pointerChunk.type === \"root\") {\n            throw new Error(\"Cannot exit root\");\n        }\n        var previousPointerChunk = this.pointerChunk;\n        this.pointerChunk = previousPointerChunk.parent;\n        this.pointerIndex = this.pointerIndexStack.pop();\n        this.cachedPointerNode = undefined;\n        this.validateState();\n    }\n    /**\n   * Insert leaves immediately after the current node, leaving the pointer on\n   * the last inserted leaf\n   *\n   * Leaves are chunked according to the number of nodes already in the parent\n   * plus the number of nodes being inserted, or the minimum depth if larger\n   */ rawInsertAfter(leaves, minDepth) {\n        if (leaves.length === 0) return;\n        var groupIntoChunks = (leaves, parent, perChunk)=>{\n            if (perChunk === 1) return leaves;\n            var chunks = [];\n            for(var i = 0; i < this.chunkSize; i++){\n                var chunkNodes = leaves.slice(i * perChunk, (i + 1) * perChunk);\n                if (chunkNodes.length === 0) break;\n                var chunk = {\n                    type: \"chunk\",\n                    key: new slate_dom__WEBPACK_IMPORTED_MODULE_4__.Key(),\n                    parent,\n                    children: []\n                };\n                chunk.children = groupIntoChunks(chunkNodes, chunk, perChunk / this.chunkSize);\n                chunks.push(chunk);\n            }\n            return chunks;\n        };\n        // Determine the chunking depth based on the number of existing nodes in\n        // the chunk and the number of nodes being inserted\n        var newTotal = this.pointerSiblings.length + leaves.length;\n        var depthForTotal = 0;\n        for(var i = this.chunkSize; i < newTotal; i *= this.chunkSize){\n            depthForTotal++;\n        }\n        // A depth of 0 means no chunking\n        var depth = Math.max(depthForTotal, minDepth);\n        var perTopLevelChunk = Math.pow(this.chunkSize, depth);\n        var chunks = groupIntoChunks(leaves, this.pointerChunk, perTopLevelChunk);\n        this.pointerSiblings.splice(this.pointerIndex + 1, 0, ...chunks);\n        this.pointerIndex += chunks.length;\n        this.cachedPointerNode = undefined;\n        this.invalidateChunk();\n        this.validateState();\n    }\n    /**\n   * If debug mode is enabled, ensure that the state is internally consistent\n   */ // istanbul ignore next\n    validateState() {\n        if (!this.debug) return;\n        var validateDescendant = (node)=>{\n            if (node.type === \"chunk\") {\n                var { parent, children } = node;\n                if (!parent.children.includes(node)) {\n                    throw new Error(\"Debug: Chunk \".concat(node.key.id, \" has an incorrect parent property\"));\n                }\n                children.forEach(validateDescendant);\n            }\n        };\n        this.root.children.forEach(validateDescendant);\n        if (this.cachedPointerNode !== undefined && this.cachedPointerNode !== this.getPointerNode()) {\n            throw new Error(\"Debug: The cached pointer is incorrect and has not been invalidated\");\n        }\n        var actualIndexStack = this.getChunkPath(this.pointerChunk);\n        if (!actualIndexStack) {\n            throw new Error(\"Debug: The pointer chunk is not connected to the root\");\n        }\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(this.pointerIndexStack, actualIndexStack)) {\n            throw new Error(\"Debug: The cached index stack [\".concat(this.pointerIndexStack.join(\", \"), \"] does not match the path of the pointer chunk [\").concat(actualIndexStack.join(\", \"), \"]\"));\n        }\n    }\n}\n/**\n * Traverse an array of children, providing helpers useful for reconciling the\n * children array with a chunk tree\n */ class ChildrenHelper {\n    constructor(editor, children){\n        _defineProperty(this, \"editor\", void 0);\n        _defineProperty(this, \"children\", void 0);\n        /**\n     * Sparse array of Slate node keys, each index corresponding to an index in\n     * the children array\n     *\n     * Fetching the key for a Slate node is expensive, so we cache them here.\n     */ _defineProperty(this, \"cachedKeys\", void 0);\n        /**\n     * The index of the next node to be read in the children array\n     */ _defineProperty(this, \"pointerIndex\", void 0);\n        this.editor = editor;\n        this.children = children;\n        this.cachedKeys = new Array(children.length);\n        this.pointerIndex = 0;\n    }\n    /**\n   * Read a given number of nodes, advancing the pointer by that amount\n   */ read(n) {\n        // PERF: If only one child was requested (the most common case), use array\n        // indexing instead of slice\n        if (n === 1) {\n            return [\n                this.children[this.pointerIndex++]\n            ];\n        }\n        var slicedChildren = this.remaining(n);\n        this.pointerIndex += n;\n        return slicedChildren;\n    }\n    /**\n   * Get the remaining children without advancing the pointer\n   *\n   * @param [maxChildren] Limit the number of children returned.\n   */ remaining(maxChildren) {\n        if (maxChildren === undefined) {\n            return this.children.slice(this.pointerIndex);\n        }\n        return this.children.slice(this.pointerIndex, this.pointerIndex + maxChildren);\n    }\n    /**\n   * Whether all children have been read\n   */ get reachedEnd() {\n        return this.pointerIndex >= this.children.length;\n    }\n    /**\n   * Determine whether a node with a given key appears in the unread part of the\n   * children array, and return its index relative to the current pointer if so\n   *\n   * Searching for the node object itself using indexOf is most efficient, but\n   * will fail to locate nodes that have been modified. In this case, nodes\n   * should be identified by their keys instead.\n   *\n   * Searching an array of keys using indexOf is very inefficient since fetching\n   * the keys for all children in advance is very slow. Insead, if the node\n   * search fails to return a value, fetch the keys of each remaining child one\n   * by one and compare it to the known key.\n   */ lookAhead(node, key) {\n        var elementResult = this.children.indexOf(node, this.pointerIndex);\n        if (elementResult > -1) return elementResult - this.pointerIndex;\n        for(var i = this.pointerIndex; i < this.children.length; i++){\n            var candidateNode = this.children[i];\n            var candidateKey = this.findKey(candidateNode, i);\n            if (candidateKey === key) return i - this.pointerIndex;\n        }\n        return -1;\n    }\n    /**\n   * Convert an array of Slate nodes to an array of chunk leaves, each\n   * containing the node and its key\n   */ toChunkLeaves(nodes, startIndex) {\n        return nodes.map((node, i)=>({\n                type: \"leaf\",\n                node,\n                key: this.findKey(node, startIndex + i),\n                index: startIndex + i\n            }));\n    }\n    /**\n   * Get the key for a Slate node, cached using the node's index\n   */ findKey(node, index) {\n        var cachedKey = this.cachedKeys[index];\n        if (cachedKey) return cachedKey;\n        var key = ReactEditor.findKey(this.editor, node);\n        this.cachedKeys[index] = key;\n        return key;\n    }\n}\n/**\n * Update the chunk tree to match the children array, inserting, removing and\n * updating differing nodes\n */ var reconcileChildren = (editor, _ref)=>{\n    var { chunkTree, children, chunkSize, rerenderChildren = [], onInsert, onUpdate, onIndexChange, debug } = _ref;\n    chunkTree.modifiedChunks.clear();\n    var chunkTreeHelper = new ChunkTreeHelper(chunkTree, {\n        chunkSize,\n        debug\n    });\n    var childrenHelper = new ChildrenHelper(editor, children);\n    var treeLeaf;\n    // Read leaves from the tree one by one, each one representing a single Slate\n    // node. Each leaf from the tree is compared to the current node in the\n    // children array to determine whether nodes have been inserted, removed or\n    // updated.\n    var _loop = function _loop() {\n        // Check where the tree node appears in the children array. In the most\n        // common case (where no insertions or removals have occurred), this will be\n        // 0. If the node has been removed, this will be -1. If new nodes have been\n        // inserted before the node, or if the node has been moved to a later\n        // position in the same children array, this will be a positive number.\n        var lookAhead = childrenHelper.lookAhead(treeLeaf.node, treeLeaf.key);\n        // If the node was moved, we want to remove it and insert it later, rather\n        // then re-inserting all intermediate nodes before it.\n        var wasMoved = lookAhead > 0 && chunkTree.movedNodeKeys.has(treeLeaf.key);\n        // If the tree leaf was moved or removed, remove it\n        if (lookAhead === -1 || wasMoved) {\n            chunkTreeHelper.remove();\n            return 1; // continue\n        }\n        // Get the matching Slate node and any nodes that may have been inserted\n        // prior to it. Insert these into the chunk tree.\n        var insertedChildrenStartIndex = childrenHelper.pointerIndex;\n        var insertedChildren = childrenHelper.read(lookAhead + 1);\n        var matchingChild = insertedChildren.pop();\n        if (insertedChildren.length) {\n            var _leavesToInsert = childrenHelper.toChunkLeaves(insertedChildren, insertedChildrenStartIndex);\n            chunkTreeHelper.insertBefore(_leavesToInsert);\n            insertedChildren.forEach((node, relativeIndex)=>{\n                onInsert === null || onInsert === void 0 || onInsert(node, insertedChildrenStartIndex + relativeIndex);\n            });\n        }\n        var matchingChildIndex = childrenHelper.pointerIndex - 1;\n        // Make sure the chunk tree contains the most recent version of the Slate\n        // node\n        if (treeLeaf.node !== matchingChild) {\n            treeLeaf.node = matchingChild;\n            chunkTreeHelper.invalidateChunk();\n            onUpdate === null || onUpdate === void 0 || onUpdate(matchingChild, matchingChildIndex);\n        }\n        // Update the index if it has changed\n        if (treeLeaf.index !== matchingChildIndex) {\n            treeLeaf.index = matchingChildIndex;\n            onIndexChange === null || onIndexChange === void 0 || onIndexChange(matchingChild, matchingChildIndex);\n        }\n        // Manually invalidate chunks containing specific children that we want to\n        // re-render\n        if (rerenderChildren.includes(matchingChildIndex)) {\n            chunkTreeHelper.invalidateChunk();\n        }\n    };\n    while(treeLeaf = chunkTreeHelper.readLeaf()){\n        if (_loop()) continue;\n    }\n    // If there are still Slate nodes remaining from the children array that were\n    // not matched to nodes in the tree, insert them at the end of the tree\n    if (!childrenHelper.reachedEnd) {\n        var remainingChildren = childrenHelper.remaining();\n        var leavesToInsert = childrenHelper.toChunkLeaves(remainingChildren, childrenHelper.pointerIndex);\n        // Move the pointer back to the final leaf in the tree, or the start of the\n        // tree if the tree is currently empty\n        chunkTreeHelper.returnToPreviousLeaf();\n        chunkTreeHelper.insertAfter(leavesToInsert);\n        remainingChildren.forEach((node, relativeIndex)=>{\n            onInsert === null || onInsert === void 0 || onInsert(node, childrenHelper.pointerIndex + relativeIndex);\n        });\n    }\n    chunkTree.movedNodeKeys.clear();\n};\nfunction ownKeys$1(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$1(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$1(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar KEY_TO_CHUNK_TREE = new WeakMap();\n/**\n * Get or create the chunk tree for a Slate node\n *\n * If the reconcile option is provided, the chunk tree will be updated to\n * match the current children of the node. The children are chunked\n * automatically using the given chunk size.\n */ var getChunkTreeForNode = function getChunkTreeForNode(editor, node) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var key = ReactEditor.findKey(editor, node);\n    var chunkTree = KEY_TO_CHUNK_TREE.get(key);\n    if (!chunkTree) {\n        chunkTree = {\n            type: \"root\",\n            movedNodeKeys: new Set(),\n            modifiedChunks: new Set(),\n            children: []\n        };\n        KEY_TO_CHUNK_TREE.set(key, chunkTree);\n    }\n    if (options.reconcile) {\n        reconcileChildren(editor, _objectSpread$1({\n            chunkTree,\n            children: node.children\n        }, options.reconcile));\n    }\n    return chunkTree;\n};\nvar defaultRenderChunk = (_ref)=>{\n    var { children } = _ref;\n    return children;\n};\nvar ChunkAncestor = (props)=>{\n    var { root, ancestor, renderElement, renderChunk = defaultRenderChunk } = props;\n    return ancestor.children.map((chunkNode)=>{\n        if (chunkNode.type === \"chunk\") {\n            var key = chunkNode.key.id;\n            var renderedChunk = renderChunk({\n                highest: ancestor === root,\n                lowest: chunkNode.children.some((c)=>c.type === \"leaf\"),\n                attributes: {\n                    \"data-slate-chunk\": true\n                },\n                children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedChunk, {\n                    root: root,\n                    ancestor: chunkNode,\n                    renderElement: renderElement,\n                    renderChunk: renderChunk\n                })\n            });\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n                key: key\n            }, renderedChunk);\n        }\n        // Only blocks containing no inlines are chunked\n        var element = chunkNode.node;\n        return renderElement(element, chunkNode.index, chunkNode.key);\n    });\n};\nvar ChunkTree = ChunkAncestor;\nvar MemoizedChunk = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(ChunkAncestor, (prev, next)=>prev.root === next.root && prev.renderElement === next.renderElement && prev.renderChunk === next.renderChunk && !next.root.modifiedChunks.has(next.ancestor));\nvar ElementContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current element.\n */ var useElement = ()=>{\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ElementContext);\n    if (!context) {\n        throw new Error(\"The `useElement` hook must be used inside `renderElement`.\");\n    }\n    return context;\n};\n/**\n * Get the current element, or return null if not inside `renderElement`.\n */ var useElementIf = ()=>(0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ElementContext);\n/**\n * Children.\n */ var useChildren = (props)=>{\n    var { decorations, node, renderElement, renderChunk, renderPlaceholder, renderText, renderLeaf } = props;\n    var editor = useSlateStatic();\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.set(editor, false);\n    var isEditor = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(node);\n    var isBlock = !isEditor && slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isInline(node);\n    var isLeafBlock = isBlock && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, node);\n    var chunkSize = isLeafBlock ? null : editor.getChunkSize(node);\n    var chunking = !!chunkSize;\n    var { decorationsByChild, childrenToRedecorate } = useDecorationsByChild(editor, node, decorations);\n    // Update the index and parent of each child.\n    // PERF: If chunking is enabled, this is done while traversing the chunk tree\n    // instead to eliminate unnecessary weak map operations.\n    if (!chunking) {\n        node.children.forEach((n, i)=>{\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n        });\n    }\n    var renderElementComponent = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((n, i, cachedKey)=>{\n        var key = cachedKey !== null && cachedKey !== void 0 ? cachedKey : ReactEditor.findKey(editor, n);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ElementContext.Provider, {\n            key: \"provider-\".concat(key.id),\n            value: n\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedElement, {\n            decorations: decorationsByChild[i],\n            element: n,\n            key: key.id,\n            renderElement: renderElement,\n            renderChunk: renderChunk,\n            renderPlaceholder: renderPlaceholder,\n            renderLeaf: renderLeaf,\n            renderText: renderText\n        }));\n    }, [\n        editor,\n        decorationsByChild,\n        renderElement,\n        renderChunk,\n        renderPlaceholder,\n        renderLeaf,\n        renderText\n    ]);\n    var renderTextComponent = (n, i)=>{\n        var key = ReactEditor.findKey(editor, n);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n            decorations: decorationsByChild[i],\n            key: key.id,\n            isLast: i === node.children.length - 1,\n            parent: node,\n            renderPlaceholder: renderPlaceholder,\n            renderLeaf: renderLeaf,\n            renderText: renderText,\n            text: n\n        });\n    };\n    if (!chunking) {\n        return node.children.map((n, i)=>slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(n) ? renderTextComponent(n, i) : renderElementComponent(n, i));\n    }\n    var chunkTree = getChunkTreeForNode(editor, node, {\n        reconcile: {\n            chunkSize,\n            rerenderChildren: childrenToRedecorate,\n            onInsert: (n, i)=>{\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n            },\n            onUpdate: (n, i)=>{\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n            },\n            onIndexChange: (n, i)=>{\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n            }\n        }\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ChunkTree, {\n        root: chunkTree,\n        ancestor: chunkTree,\n        renderElement: renderElementComponent,\n        renderChunk: renderChunk\n    });\n};\nvar useDecorationsByChild = (editor, node, decorations)=>{\n    var decorationsByChild = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.splitDecorationsByChild)(editor, node, decorations);\n    // The value we return is a mutable array of `DecoratedRange[]` arrays. This\n    // lets us avoid passing an immutable array of decorations for each child into\n    // `ChunkTree` using props. Each `DecoratedRange[]` is only updated if the\n    // decorations at that index have changed, which speeds up the equality check\n    // for the `decorations` prop in the memoized `Element` and `Text` components.\n    var mutableDecorationsByChild = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(decorationsByChild).current;\n    // Track the list of child indices whose decorations have changed, so that we\n    // can tell the chunk tree to re-render these children.\n    var childrenToRedecorate = [];\n    // Resize the mutable array to match the latest result\n    mutableDecorationsByChild.length = decorationsByChild.length;\n    for(var i = 0; i < decorationsByChild.length; i++){\n        var _mutableDecorationsBy;\n        var _decorations = decorationsByChild[i];\n        var previousDecorations = (_mutableDecorationsBy = mutableDecorationsByChild[i]) !== null && _mutableDecorationsBy !== void 0 ? _mutableDecorationsBy : null;\n        if (!(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual)(previousDecorations, _decorations)) {\n            mutableDecorationsByChild[i] = _decorations;\n            childrenToRedecorate.push(i);\n        }\n    }\n    return {\n        decorationsByChild: mutableDecorationsByChild,\n        childrenToRedecorate\n    };\n};\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */ var ReadOnlyContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `readOnly` state of the editor.\n */ var useReadOnly = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ReadOnlyContext);\n};\n/**\n * A React context for sharing the editor selector context in a way to control\n * re-renders.\n */ var SlateSelectorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar refEquality = (a, b)=>a === b;\n/**\n * Use redux style selectors to prevent re-rendering on every keystroke.\n *\n * Bear in mind re-rendering can only prevented if the returned value is a value\n * type or for reference types (e.g. objects and arrays) add a custom equality\n * function.\n *\n * If `selector` is memoized using `useCallback`, then it will only be called\n * when it or the editor state changes. Otherwise, `selector` will be called\n * every time the component renders.\n *\n * @example\n * const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection))\n */ function useSlateSelector(selector) {\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n    var { deferred } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n    if (!context) {\n        throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n    }\n    var { addEventListener } = context;\n    var editor = useSlateStatic();\n    var genericSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>selector(editor), [\n        editor,\n        selector\n    ]);\n    var [selectedState, update] = useGenericSelector(genericSelector, equalityFn);\n    useIsomorphicLayoutEffect(()=>{\n        var unsubscribe = addEventListener(update, {\n            deferred\n        });\n        update();\n        return unsubscribe;\n    }, [\n        addEventListener,\n        update,\n        deferred\n    ]);\n    return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */ function useSelectorContext() {\n    var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Set());\n    var deferredEventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Set());\n    var onChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        eventListeners.current.forEach((listener)=>listener());\n    }, []);\n    var flushDeferred = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        deferredEventListeners.current.forEach((listener)=>listener());\n        deferredEventListeners.current.clear();\n    }, []);\n    var addEventListener = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(function(callbackProp) {\n        var { deferred = false } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var callback = deferred ? ()=>deferredEventListeners.current.add(callbackProp) : callbackProp;\n        eventListeners.current.add(callback);\n        return ()=>{\n            eventListeners.current.delete(callback);\n        };\n    }, []);\n    var selectorContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({\n            addEventListener,\n            flushDeferred\n        }), [\n        addEventListener,\n        flushDeferred\n    ]);\n    return {\n        selectorContext,\n        onChange\n    };\n}\nfunction useFlushDeferredSelectorsOnRender() {\n    var { flushDeferred } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n    useIsomorphicLayoutEffect(flushDeferred);\n}\n/**\n * Get the current editor object and re-render whenever it changes.\n */ var useSlate = ()=>{\n    var { addEventListener } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    if (!addEventListener) {\n        throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n    }\n    useIsomorphicLayoutEffect(()=>addEventListener(forceRender), [\n        addEventListener\n    ]);\n    return useSlateStatic();\n};\nvar EDITOR_TO_V = new WeakMap();\nvar getEditorVersionRef = (editor)=>{\n    var v = EDITOR_TO_V.get(editor);\n    if (v) {\n        return v;\n    }\n    v = {\n        current: 0\n    };\n    EDITOR_TO_V.set(editor, v);\n    // Register the `onChange` handler exactly once per editor\n    var { onChange } = editor;\n    editor.onChange = (options)=>{\n        v.current++;\n        onChange(options);\n    };\n    return v;\n};\n/**\n * Get the current editor object and its version, which increments on every\n * change.\n *\n * @deprecated The `v` counter is no longer used except for this hook, and may\n * be removed in a future version.\n */ var useSlateWithV = ()=>{\n    var editor = useSlate();\n    var vRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>getEditorVersionRef(editor), [\n        editor\n    ]);\n    return {\n        editor,\n        v: vRef.current\n    };\n};\nfunction useTrackUserInput() {\n    var editor = useSlateStatic();\n    var receivedUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    var animationFrameIdRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    var onUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        if (receivedUserInput.current) {\n            return;\n        }\n        receivedUserInput.current = true;\n        var window1 = ReactEditor.getWindow(editor);\n        window1.cancelAnimationFrame(animationFrameIdRef.current);\n        animationFrameIdRef.current = window1.requestAnimationFrame(()=>{\n            receivedUserInput.current = false;\n        });\n    }, [\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>()=>cancelAnimationFrame(animationFrameIdRef.current), []);\n    return {\n        receivedUserInput,\n        onUserInput\n    };\n}\nvar createRestoreDomManager = (editor, receivedUserInput)=>{\n    var bufferedMutations = [];\n    var clear = ()=>{\n        bufferedMutations = [];\n    };\n    var registerMutations = (mutations)=>{\n        if (!receivedUserInput.current) {\n            return;\n        }\n        var trackedMutations = mutations.filter((mutation)=>(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations));\n        bufferedMutations.push(...trackedMutations);\n    };\n    function restoreDOM() {\n        if (bufferedMutations.length > 0) {\n            bufferedMutations.reverse().forEach((mutation)=>{\n                if (mutation.type === \"characterData\") {\n                    // We don't want to restore the DOM for characterData mutations\n                    // because this interrupts the composition.\n                    return;\n                }\n                mutation.removedNodes.forEach((node)=>{\n                    mutation.target.insertBefore(node, mutation.nextSibling);\n                });\n                mutation.addedNodes.forEach((node)=>{\n                    mutation.target.removeChild(node);\n                });\n            });\n            // Clear buffered mutations to ensure we don't undo them twice\n            clear();\n        }\n    }\n    return {\n        registerMutations,\n        restoreDOM,\n        clear\n    };\n};\nvar MUTATION_OBSERVER_CONFIG = {\n    subtree: true,\n    childList: true,\n    characterData: true,\n    characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends react__WEBPACK_IMPORTED_MODULE_3__.Component {\n    constructor(){\n        super(...arguments);\n        _defineProperty(this, \"context\", null);\n        _defineProperty(this, \"manager\", null);\n        _defineProperty(this, \"mutationObserver\", null);\n    }\n    observe() {\n        var _this$mutationObserve;\n        var { node } = this.props;\n        if (!node.current) {\n            throw new Error(\"Failed to attach MutationObserver, `node` is undefined\");\n        }\n        (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n    }\n    componentDidMount() {\n        var { receivedUserInput } = this.props;\n        var editor = this.context;\n        this.manager = createRestoreDomManager(editor, receivedUserInput);\n        this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n        this.observe();\n    }\n    getSnapshotBeforeUpdate() {\n        var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n        var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n        if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n            var _this$manager;\n            (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n        }\n        (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n        (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n        return null;\n    }\n    componentDidUpdate() {\n        var _this$manager3;\n        (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n        this.observe();\n    }\n    componentWillUnmount() {\n        var _this$mutationObserve4;\n        (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n    }\n    render() {\n        return this.props.children;\n    }\n}\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? RestoreDOMComponent : (_ref)=>{\n    var { children } = _ref;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children);\n};\n/**\n * A React context for sharing the `composing` state of the editor.\n */ var ComposingContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `composing` state of the editor.\n */ var useComposing = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ComposingContext);\n};\nvar _excluded$1 = [\n    \"autoFocus\",\n    \"decorate\",\n    \"onDOMBeforeInput\",\n    \"placeholder\",\n    \"readOnly\",\n    \"renderElement\",\n    \"renderChunk\",\n    \"renderLeaf\",\n    \"renderText\",\n    \"renderPlaceholder\",\n    \"scrollSelectionIntoView\",\n    \"style\",\n    \"as\",\n    \"disableDefaultStyles\"\n], _excluded2 = [\n    \"text\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar Children = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, useChildren(props));\n/**\n * Editable.\n */ var Editable = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, forwardedRef)=>{\n    var defaultRenderPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultPlaceholder, _objectSpread({}, props)), []);\n    var { autoFocus, decorate = defaultDecorate, onDOMBeforeInput: propsOnDOMBeforeInput, placeholder, readOnly = false, renderElement, renderChunk, renderLeaf, renderText, renderPlaceholder = defaultRenderPlaceholder, scrollSelectionIntoView = defaultScrollSelectionIntoView, style: userStyle = {}, as: Component = \"div\", disableDefaultStyles = false } = props, attributes = _objectWithoutProperties(props, _excluded$1);\n    var editor = useSlate();\n    // Rerender editor when composition status changed\n    var [isComposing, setIsComposing] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var deferredOperations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    var [placeholderHeight, setPlaceholderHeight] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    var processing = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    var { onUserInput, receivedUserInput } = useTrackUserInput();\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n    // Update internal state on each render.\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_READ_ONLY.set(editor, readOnly);\n    // Keep track of some state for the event handler logic.\n    var state = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({\n            isDraggingInternally: false,\n            isUpdatingSelection: false,\n            latestElement: null,\n            hasMarkPlaceholder: false\n        }), []);\n    // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n    // needs to be manually focused.\n    //\n    // If this stops working in Firefox, make sure nothing is causing this\n    // component to re-render during the initial mount. If the DOM selection is\n    // set by `useIsomorphicLayoutEffect` before `onDOMSelectionChange` updates\n    // `editor.selection`, the DOM selection can be removed accidentally.\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (ref.current && autoFocus) {\n            ref.current.focus();\n        }\n    }, [\n        autoFocus\n    ]);\n    /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */ var androidInputManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    // Listen on the native `selectionchange` event to be able to update any time\n    // the selection changes. This is required because React's `onSelect` is leaky\n    // and non-standard so it doesn't fire until after a selection has been\n    // released. This causes issues in situations where another change happens\n    // while a selection is being dragged.\n    var onDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default()(()=>{\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n                onDOMSelectionChange();\n                return;\n            }\n            var el = ReactEditor.toDOMNode(editor, editor);\n            var root = el.getRootNode();\n            if (!processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n                processing.current = true;\n                var active = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getActiveElement)();\n                if (active) {\n                    document.execCommand(\"indent\");\n                } else {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n                processing.current = false;\n                return;\n            }\n            var androidInputManager = androidInputManagerRef.current;\n            if ((slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n                var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n                var { activeElement } = _root;\n                var _el = ReactEditor.toDOMNode(editor, editor);\n                var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(_root);\n                if (activeElement === _el) {\n                    state.latestElement = activeElement;\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n                } else {\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n                }\n                if (!domSelection) {\n                    return slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n                var { anchorNode, focusNode } = domSelection;\n                var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n                var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n                if (anchorNodeSelectable && focusNodeInEditor) {\n                    var range = ReactEditor.toSlateRange(editor, domSelection, {\n                        exactMatch: false,\n                        suppressThrow: true\n                    });\n                    if (range) {\n                        if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                        } else {\n                            androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n                        }\n                    }\n                }\n                // Deselect the editor if the dom selection is not selectable in readonly mode\n                if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n            }\n        }, 100), [\n        editor,\n        readOnly,\n        state\n    ]);\n    var scheduleOnDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(onDOMSelectionChange, 0), [\n        onDOMSelectionChange\n    ]);\n    androidInputManagerRef.current = useAndroidInputManager({\n        node: ref,\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange\n    });\n    useIsomorphicLayoutEffect(()=>{\n        var _androidInputManagerR, _androidInputManagerR2;\n        // Update element-related weak maps with the DOM element ref.\n        var window1;\n        if (ref.current && (window1 = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getDefaultView)(ref.current))) {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_WINDOW.set(editor, window1);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.set(editor, ref.current);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(editor, ref.current);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref.current, editor);\n        } else {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n        }\n        // Make sure the DOM selection state is in sync.\n        var { selection } = editor;\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n        if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n            return;\n        }\n        var setDomSelection = (forceChange)=>{\n            var hasDomSelection = domSelection.type !== \"None\";\n            // If the DOM selection is properly unset, we're done.\n            if (!selection && !hasDomSelection) {\n                return;\n            }\n            // Get anchorNode and focusNode\n            var focusNode = domSelection.focusNode;\n            var anchorNode;\n            // COMPAT: In firefox the normal selection way does not work\n            // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && domSelection.rangeCount > 1) {\n                var firstRange = domSelection.getRangeAt(0);\n                var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n                // Right to left\n                if (firstRange.startContainer === focusNode) {\n                    anchorNode = lastRange.endContainer;\n                } else {\n                    // Left to right\n                    anchorNode = firstRange.startContainer;\n                }\n            } else {\n                anchorNode = domSelection.anchorNode;\n            }\n            // verify that the dom selection is in the editor\n            var editorElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.get(editor);\n            var hasDomSelectionInEditor = false;\n            if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n                hasDomSelectionInEditor = true;\n            }\n            // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n            if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n                var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n                    exactMatch: true,\n                    // domSelection is not necessarily a valid Slate range\n                    // (e.g. when clicking on contentEditable:false element)\n                    suppressThrow: true\n                });\n                if (slateRange && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(slateRange, selection)) {\n                    var _anchorNode;\n                    if (!state.hasMarkPlaceholder) {\n                        return;\n                    }\n                    // Ensure selection is inside the mark placeholder\n                    if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute(\"data-slate-mark-placeholder\")) {\n                        return;\n                    }\n                }\n            }\n            // when <Editable/> is being controlled through external value\n            // then its children might just change - DOM responds to it on its own\n            // but Slate's value is not being updated through any operation\n            // and thus it doesn't transform selection on its own\n            if (selection && !ReactEditor.hasRange(editor, selection)) {\n                editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n                    exactMatch: false,\n                    suppressThrow: true\n                });\n                return;\n            }\n            // Otherwise the DOM selection is out of sync, so update it.\n            state.isUpdatingSelection = true;\n            var newDomRange = null;\n            try {\n                newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n            } catch (e) {\n            // Ignore, dom and state might be out of sync\n            }\n            if (newDomRange) {\n                if (ReactEditor.isComposing(editor) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n                    domSelection.collapseToEnd();\n                } else if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isBackward(selection)) {\n                    domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n                } else {\n                    domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n                }\n                scrollSelectionIntoView(editor, newDomRange);\n            } else {\n                domSelection.removeAllRanges();\n            }\n            return newDomRange;\n        };\n        // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n        if (domSelection.rangeCount <= 1) {\n            setDomSelection();\n        }\n        var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === \"action\";\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ensureSelection) {\n            setTimeout(()=>{\n                state.isUpdatingSelection = false;\n            });\n            return;\n        }\n        var timeoutId = null;\n        var animationFrameId = requestAnimationFrame(()=>{\n            if (ensureSelection) {\n                var ensureDomSelection = (forceChange)=>{\n                    try {\n                        var el = ReactEditor.toDOMNode(editor, editor);\n                        el.focus();\n                        setDomSelection(forceChange);\n                    } catch (e) {\n                    // Ignore, dom and state might be out of sync\n                    }\n                };\n                // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n                // This essentially would make setting the slate selection during an update meaningless, so we force it\n                // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n                // visible flicker.\n                ensureDomSelection();\n                timeoutId = setTimeout(()=>{\n                    // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n                    // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n                    // the animation frame to ensure it displays the correct state.\n                    ensureDomSelection(true);\n                    state.isUpdatingSelection = false;\n                });\n            }\n        });\n        return ()=>{\n            cancelAnimationFrame(animationFrameId);\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n        };\n    });\n    // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n    // is required because React's `beforeinput` is fake and never really attaches\n    // to the real event sadly. (2019/11/01)\n    // https://github.com/facebook/react/issues/11211\n    var onDOMBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n        handleNativeHistoryEvents(editor, event);\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = el.getRootNode();\n        if (processing !== null && processing !== void 0 && processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n            var ranges = event.getTargetRanges();\n            var range = ranges[0];\n            var newRange = new window.Range();\n            newRange.setStart(range.startContainer, range.startOffset);\n            newRange.setEnd(range.endContainer, range.endOffset);\n            // Translate the DOM Range into a Slate Range\n            var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n                exactMatch: false,\n                suppressThrow: false\n            });\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, slateRange);\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            return;\n        }\n        onUserInput();\n        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n            var _EDITOR_TO_USER_SELEC;\n            // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n            if (androidInputManagerRef.current) {\n                return androidInputManagerRef.current.handleDOMBeforeInput(event);\n            }\n            // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n            // triggering a `beforeinput` expecting the change to be applied to the immediately before\n            // set selection.\n            scheduleOnDOMSelectionChange.flush();\n            onDOMSelectionChange.flush();\n            var { selection } = editor;\n            var { inputType: type } = event;\n            var data = event.dataTransfer || event.data || undefined;\n            var isCompositionChange = type === \"insertCompositionText\" || type === \"deleteCompositionText\";\n            // COMPAT: use composition change events as a hint to where we should insert\n            // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n            if (isCompositionChange && ReactEditor.isComposing(editor)) {\n                return;\n            }\n            var native = false;\n            if (type === \"insertText\" && selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.\n            // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n            // causes duplicate inserts.\n            event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n            // When there is an inline element, e.g. a link, and you select\n            // right after it (the start of the next node).\n            selection.anchor.offset !== 0) {\n                native = true;\n                // Skip native if there are marks, as\n                // `insertText` will insert a node, not just text.\n                if (editor.marks) {\n                    native = false;\n                }\n                // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n                    var _node$parentElement, _window$getComputedSt;\n                    // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n                    // Therefore we don't allow native events to insert text at the end of anchor nodes.\n                    var { anchor } = selection;\n                    var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n                    var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest(\"a\");\n                    var _window = ReactEditor.getWindow(editor);\n                    if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n                        var _lastText$textContent;\n                        // Find the last text node inside the anchor.\n                        var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n                        if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n                            native = false;\n                        }\n                    }\n                    // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n                    // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n                    if (native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === \"pre\") {\n                        var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                            at: anchor.path,\n                            match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n)\n                        });\n                        if (block && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(block[0]).includes(\"\t\")) {\n                            native = false;\n                        }\n                    }\n                }\n            }\n            // COMPAT: For the deleting forward/backward input types we don't want\n            // to change the selection because it is the range that will be deleted,\n            // and those commands determine that for themselves.\n            // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n            if ((!type.startsWith(\"delete\") || type.startsWith(\"deleteBy\")) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n                var [targetRange] = event.getTargetRanges();\n                if (targetRange) {\n                    var _range = ReactEditor.toSlateRange(editor, targetRange, {\n                        exactMatch: false,\n                        suppressThrow: false\n                    });\n                    if (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, _range)) {\n                        native = false;\n                        var selectionRef = !isCompositionChange && editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection);\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range);\n                        if (selectionRef) {\n                            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n                        }\n                    }\n                }\n            }\n            // Composition change types occur while a user is composing text and can't be\n            // cancelled. Let them through and wait for the composition to end.\n            if (isCompositionChange) {\n                return;\n            }\n            if (!native) {\n                event.preventDefault();\n            }\n            // COMPAT: If the selection is expanded, even if the command seems like\n            // a delete forward/backward command it should delete the selection.\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection) && type.startsWith(\"delete\")) {\n                var direction = type.endsWith(\"Backward\") ? \"backward\" : \"forward\";\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                    direction\n                });\n                return;\n            }\n            switch(type){\n                case \"deleteByComposition\":\n                case \"deleteByCut\":\n                case \"deleteByDrag\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                        break;\n                    }\n                case \"deleteContent\":\n                case \"deleteContentForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n                        break;\n                    }\n                case \"deleteContentBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n                        break;\n                    }\n                case \"deleteEntireSoftLine\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteHardLineBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"block\"\n                        });\n                        break;\n                    }\n                case \"deleteSoftLineBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteHardLineForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"block\"\n                        });\n                        break;\n                    }\n                case \"deleteSoftLineForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteWordBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"word\"\n                        });\n                        break;\n                    }\n                case \"deleteWordForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"word\"\n                        });\n                        break;\n                    }\n                case \"insertLineBreak\":\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                    break;\n                case \"insertParagraph\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n                        break;\n                    }\n                case \"insertFromComposition\":\n                case \"insertFromDrop\":\n                case \"insertFromPaste\":\n                case \"insertFromYank\":\n                case \"insertReplacementText\":\n                case \"insertText\":\n                    {\n                        if (type === \"insertFromComposition\") {\n                            // COMPAT: in Safari, `compositionend` is dispatched after the\n                            // `beforeinput` for \"insertFromComposition\". But if we wait for it\n                            // then we will abort because we're still composing and the selection\n                            // won't be updated properly.\n                            // https://www.w3.org/TR/input-events-2/\n                            if (ReactEditor.isComposing(editor)) {\n                                setIsComposing(false);\n                                slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n                            }\n                        }\n                        // use a weak comparison instead of 'instanceof' to allow\n                        // programmatic access of paste events coming from external windows\n                        // like cypress where cy.window does not work realibly\n                        if ((data === null || data === void 0 ? void 0 : data.constructor.name) === \"DataTransfer\") {\n                            ReactEditor.insertData(editor, data);\n                        } else if (typeof data === \"string\") {\n                            // Only insertText operations use the native functionality, for now.\n                            // Potentially expand to single character deletes, as well.\n                            if (native) {\n                                deferredOperations.current.push(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data));\n                            } else {\n                                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data);\n                            }\n                        }\n                        break;\n                    }\n            }\n            // Restore the actual user section if nothing manually set it.\n            var toRestore = (_EDITOR_TO_USER_SELEC = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.delete(editor);\n            if (toRestore && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, toRestore))) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, toRestore);\n            }\n        }\n    }, [\n        editor,\n        onDOMSelectionChange,\n        onUserInput,\n        propsOnDOMBeforeInput,\n        readOnly,\n        scheduleOnDOMSelectionChange\n    ]);\n    var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((node)=>{\n        if (node == null) {\n            onDOMSelectionChange.cancel();\n            scheduleOnDOMSelectionChange.cancel();\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.delete(editor);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n            if (ref.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n                // @ts-ignore The `beforeinput` event isn't recognized.\n                ref.current.removeEventListener(\"beforeinput\", onDOMBeforeInput);\n            }\n        } else {\n            // Attach a native DOM event handler for `beforeinput` events, because React's\n            // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n            // real `beforeinput` events sadly... (2019/11/04)\n            // https://github.com/facebook/react/issues/11211\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n                // @ts-ignore The `beforeinput` event isn't recognized.\n                node.addEventListener(\"beforeinput\", onDOMBeforeInput);\n            }\n        }\n        ref.current = node;\n        if (typeof forwardedRef === \"function\") {\n            forwardedRef(node);\n        } else if (forwardedRef) {\n            forwardedRef.current = node;\n        }\n    }, [\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange,\n        editor,\n        onDOMBeforeInput,\n        forwardedRef\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        var window1 = ReactEditor.getWindow(editor);\n        // COMPAT: In Chrome, `selectionchange` events can fire when <input> and\n        // <textarea> elements are appended to the DOM, causing\n        // `editor.selection` to be overwritten in some circumstances.\n        // (2025/01/16) https://issues.chromium.org/issues/389368412\n        var onSelectionChange = (_ref)=>{\n            var { target } = _ref;\n            var targetElement = target instanceof HTMLElement ? target : null;\n            var targetTagName = targetElement === null || targetElement === void 0 ? void 0 : targetElement.tagName;\n            if (targetTagName === \"INPUT\" || targetTagName === \"TEXTAREA\") {\n                return;\n            }\n            scheduleOnDOMSelectionChange();\n        };\n        // Attach a native DOM event handler for `selectionchange`, because React's\n        // built-in `onSelect` handler doesn't fire for all selection changes. It's\n        // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n        // want to fire for any change to the selection inside the editor.\n        // (2019/11/04) https://github.com/facebook/react/issues/5785\n        window1.document.addEventListener(\"selectionchange\", onSelectionChange);\n        // Listen for dragend and drop globally. In Firefox, if a drop handler\n        // initiates an operation that causes the originally dragged element to\n        // unmount, that element will not emit a dragend event. (2024/06/21)\n        var stoppedDragging = ()=>{\n            state.isDraggingInternally = false;\n        };\n        window1.document.addEventListener(\"dragend\", stoppedDragging);\n        window1.document.addEventListener(\"drop\", stoppedDragging);\n        return ()=>{\n            window1.document.removeEventListener(\"selectionchange\", onSelectionChange);\n            window1.document.removeEventListener(\"dragend\", stoppedDragging);\n            window1.document.removeEventListener(\"drop\", stoppedDragging);\n        };\n    }, [\n        scheduleOnDOMSelectionChange,\n        state\n    ]);\n    var decorations = decorate([\n        editor,\n        []\n    ]);\n    var decorateContext = useDecorateContext(decorate);\n    var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(editor)).length === 1 && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(editor) === \"\" && !isComposing;\n    var placeHolderResizeHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((placeholderEl)=>{\n        if (placeholderEl && showPlaceholder) {\n            var _placeholderEl$getBou;\n            setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n        } else {\n            setPlaceholderHeight(undefined);\n        }\n    }, [\n        showPlaceholder\n    ]);\n    if (showPlaceholder) {\n        var start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []);\n        decorations.push({\n            [slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]: true,\n            placeholder,\n            onPlaceholderResize: placeHolderResizeHandler,\n            anchor: start,\n            focus: start\n        });\n    }\n    var { marks } = editor;\n    state.hasMarkPlaceholder = false;\n    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection) && marks) {\n        var { anchor } = editor.selection;\n        var leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n        var rest = _objectWithoutProperties(leaf, _excluded2);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(leaf, marks, {\n            loose: true\n        })) {\n            state.hasMarkPlaceholder = true;\n            var unset = Object.fromEntries(Object.keys(rest).map((mark)=>[\n                    mark,\n                    null\n                ]));\n            decorations.push(_objectSpread(_objectSpread(_objectSpread({\n                [slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]: true\n            }, unset), marks), {}, {\n                anchor,\n                focus: anchor\n            }));\n        }\n    }\n    // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n    // before we receive the composition end event.\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setTimeout(()=>{\n            var { selection } = editor;\n            if (selection) {\n                var { anchor: _anchor } = selection;\n                var _text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _anchor.path);\n                // While marks isn't a 'complete' text, we can still use loose Text.equals\n                // here which only compares marks anyway.\n                if (marks && !slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(_text, marks, {\n                    loose: true\n                })) {\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n                    return;\n                }\n            }\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        });\n    });\n    useFlushDeferredSelectorsOnRender();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ReadOnlyContext.Provider, {\n        value: readOnly\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ComposingContext.Provider, {\n        value: isComposing\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DecorateContext.Provider, {\n        value: decorateContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(RestoreDOM, {\n        node: ref,\n        receivedUserInput: receivedUserInput\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Component, _objectSpread(_objectSpread({\n        role: readOnly ? undefined : \"textbox\",\n        \"aria-multiline\": readOnly ? undefined : true\n    }, attributes), {}, {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n        // have to use hacks to make these replacement-based features work.\n        // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n        // mismatch warning app moves to browser. Pass-through consumer props when\n        // not CAN_USE_DOM (SSR) and default to falsy value\n        spellCheck: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.spellCheck : false,\n        autoCorrect: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCorrect : \"false\",\n        autoCapitalize: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCapitalize : \"false\",\n        \"data-slate-editor\": true,\n        \"data-slate-node\": \"value\",\n        // explicitly set this\n        contentEditable: !readOnly,\n        // in some cases, a decoration needs access to the range / selection to decorate a text node,\n        // then you will select the whole text node when you select part the of text\n        // this magic zIndex=\"-1\" will fix it\n        zindex: -1,\n        suppressContentEditableWarning: true,\n        ref: callbackRef,\n        style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n            // Allow positioning relative to the editable element.\n            position: \"relative\",\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: \"pre-wrap\",\n            // Allow words to break if they are too long.\n            wordWrap: \"break-word\"\n        }, placeholderHeight ? {\n            minHeight: placeholderHeight\n        } : {})), userStyle),\n        onBeforeInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n            // fall back to React's leaky polyfill instead just for it. It\n            // only works for the `insertText` input type.\n            if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n                event.preventDefault();\n                if (!ReactEditor.isComposing(editor)) {\n                    var _text2 = event.data;\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text2);\n                }\n            }\n        }, [\n            attributes.onBeforeInput,\n            editor,\n            readOnly\n        ]),\n        onInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (isEventHandled(event, attributes.onInput)) {\n                return;\n            }\n            if (androidInputManagerRef.current) {\n                androidInputManagerRef.current.handleInput();\n                return;\n            }\n            // Flush native operations, as native events will have propogated\n            // and we can correctly compare DOM text values in components\n            // to stop rendering, so that browser functions like autocorrect\n            // and spellcheck work as expected.\n            for (var op of deferredOperations.current){\n                op();\n            }\n            deferredOperations.current = [];\n            // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n            // there's a chance that content might be placed in the browser's undo stack.\n            // This means undo can be triggered even when the div is not focused,\n            // and it only triggers the input event for the node. (2024/10/09)\n            if (!ReactEditor.isFocused(editor)) {\n                handleNativeHistoryEvents(editor, event.nativeEvent);\n            }\n        }, [\n            attributes.onInput,\n            editor\n        ]),\n        onBlur: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n                return;\n            }\n            // COMPAT: If the current `activeElement` is still the previous\n            // one, this is due to the window being blurred when the tab\n            // itself becomes unfocused, so we want to abort early to allow to\n            // editor to stay focused when the tab becomes focused again.\n            var root = ReactEditor.findDocumentOrShadowRoot(editor);\n            if (state.latestElement === root.activeElement) {\n                return;\n            }\n            var { relatedTarget } = event;\n            var el = ReactEditor.toDOMNode(editor, editor);\n            // COMPAT: The event should be ignored if the focus is returning\n            // to the editor from an embedded editable element (eg. an <input>\n            // element inside a void node).\n            if (relatedTarget === el) {\n                return;\n            }\n            // COMPAT: The event should be ignored if the focus is moving from\n            // the editor to inside a void node's spacer element.\n            if ((0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMElement)(relatedTarget) && relatedTarget.hasAttribute(\"data-slate-spacer\")) {\n                return;\n            }\n            // COMPAT: The event should be ignored if the focus is moving to a\n            // non- editable section of an element that isn't a void node (eg.\n            // a list item of the check list example).\n            if (relatedTarget != null && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n                var node = ReactEditor.toSlateNode(editor, relatedTarget);\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isVoid(node)) {\n                    return;\n                }\n            }\n            // COMPAT: Safari doesn't always remove the selection even if the content-\n            // editable element no longer has focus. Refer to:\n            // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n                var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n                domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n            }\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n        }, [\n            readOnly,\n            state.isUpdatingSelection,\n            state.latestElement,\n            editor,\n            attributes.onBlur\n        ]),\n        onClick: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target)) {\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                var path = ReactEditor.findPath(editor, node);\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path) || slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path) !== node) {\n                    return;\n                }\n                if (event.detail === slate_dom__WEBPACK_IMPORTED_MODULE_4__.TRIPLE_CLICK && path.length >= 1) {\n                    var blockPath = path;\n                    if (!(slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, node))) {\n                        var _block$;\n                        var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                            match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n),\n                            at: path\n                        });\n                        blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n                    }\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, blockPath);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                    return;\n                }\n                if (readOnly) {\n                    return;\n                }\n                var _start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, path);\n                var end = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, path);\n                var startVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: _start\n                });\n                var endVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: end\n                });\n                if (startVoid && endVoid && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(startVoid[1], endVoid[1])) {\n                    var _range2 = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, _start);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range2);\n                }\n            }\n        }, [\n            editor,\n            attributes.onClick,\n            readOnly\n        ]),\n        onCompositionEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                var _androidInputManagerR3;\n                if (ReactEditor.isComposing(editor)) {\n                    Promise.resolve().then(()=>{\n                        setIsComposing(false);\n                        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n                    });\n                }\n                (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n                if (isEventHandled(event, attributes.onCompositionEnd) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n                    return;\n                }\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX_LEGACY && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_IOS && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WECHATBROWSER && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_UC_MOBILE && event.data) {\n                    var placeholderMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n                    // Ensure we insert text with the marks the user was actually seeing\n                    if (placeholderMarks !== undefined) {\n                        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n                        editor.marks = placeholderMarks;\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, event.data);\n                    var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n                    if (userMarks !== undefined) {\n                        editor.marks = userMarks;\n                    }\n                }\n            }\n        }, [\n            attributes.onCompositionEnd,\n            editor\n        ]),\n        onCompositionUpdate: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n                if (!ReactEditor.isComposing(editor)) {\n                    setIsComposing(true);\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n                }\n            }\n        }, [\n            attributes.onCompositionUpdate,\n            editor\n        ]),\n        onCompositionStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                var _androidInputManagerR4;\n                (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n                if (isEventHandled(event, attributes.onCompositionStart) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n                    return;\n                }\n                setIsComposing(true);\n                var { selection } = editor;\n                if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                    return;\n                }\n            }\n        }, [\n            attributes.onCompositionStart,\n            editor\n        ]),\n        onCopy: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n                event.preventDefault();\n                ReactEditor.setFragmentData(editor, event.clipboardData, \"copy\");\n            }\n        }, [\n            attributes.onCopy,\n            editor\n        ]),\n        onCut: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n                event.preventDefault();\n                ReactEditor.setFragmentData(editor, event.clipboardData, \"cut\");\n                var { selection } = editor;\n                if (selection) {\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                    } else {\n                        var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n                        if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor);\n                        }\n                    }\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onCut\n        ]),\n        onDragOver: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n                    event.preventDefault();\n                }\n            }\n        }, [\n            attributes.onDragOver,\n            editor\n        ]),\n        onDragStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                var path = ReactEditor.findPath(editor, node);\n                var voidMatch = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: path,\n                    voids: true\n                });\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                }\n                state.isDraggingInternally = true;\n                ReactEditor.setFragmentData(editor, event.dataTransfer, \"drag\");\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onDragStart,\n            state\n        ]),\n        onDrop: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n                event.preventDefault();\n                // Keep a reference to the dragged range before updating selection\n                var draggedRange = editor.selection;\n                // Find the range where the drop happened\n                var range = ReactEditor.findEventRange(editor, event);\n                var data = event.dataTransfer;\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                if (state.isDraggingInternally) {\n                    if (draggedRange && !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(draggedRange, range) && !slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                        at: range,\n                        voids: true\n                    })) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor, {\n                            at: draggedRange\n                        });\n                    }\n                }\n                ReactEditor.insertData(editor, data);\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                    ReactEditor.focus(editor);\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onDrop,\n            state\n        ]),\n        onDragEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n                attributes.onDragEnd(event);\n            }\n        }, [\n            readOnly,\n            state,\n            attributes,\n            editor\n        ]),\n        onFocus: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n                var el = ReactEditor.toDOMNode(editor, editor);\n                var root = ReactEditor.findDocumentOrShadowRoot(editor);\n                state.latestElement = root.activeElement;\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && event.target !== el) {\n                    el.focus();\n                    return;\n                }\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n            }\n        }, [\n            readOnly,\n            state,\n            editor,\n            attributes.onFocus\n        ]),\n        onKeyDown: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n                var _androidInputManagerR5;\n                (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n                var { nativeEvent } = event;\n                // COMPAT: The composition end event isn't fired reliably in all browsers,\n                // so we sometimes might end up stuck in a composition state even though we\n                // aren't composing any more.\n                if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n                    setIsComposing(false);\n                }\n                if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n                    return;\n                }\n                var { selection } = editor;\n                var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n                var isRTL = direction__WEBPACK_IMPORTED_MODULE_0___default()(slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element)) === \"rtl\";\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isRedo(nativeEvent)) {\n                    event.preventDefault();\n                    var maybeHistoryEditor = editor;\n                    if (typeof maybeHistoryEditor.redo === \"function\") {\n                        maybeHistoryEditor.redo();\n                    }\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isUndo(nativeEvent)) {\n                    event.preventDefault();\n                    var _maybeHistoryEditor = editor;\n                    if (typeof _maybeHistoryEditor.undo === \"function\") {\n                        _maybeHistoryEditor.undo();\n                    }\n                    return;\n                }\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineBackward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        reverse: true\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineForward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\"\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineBackward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        edge: \"focus\",\n                        reverse: true\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineForward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        edge: \"focus\"\n                    });\n                    return;\n                }\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveBackward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                            reverse: !isRTL\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: isRTL ? \"end\" : \"start\"\n                        });\n                    }\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveForward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                            reverse: isRTL\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: isRTL ? \"start\" : \"end\"\n                        });\n                    }\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordBackward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"focus\"\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"word\",\n                        reverse: !isRTL\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordForward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"focus\"\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"word\",\n                        reverse: isRTL\n                    });\n                    return;\n                }\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n                    // We don't have a core behavior for these, but they change the\n                    // DOM if we don't prevent them, so we have to.\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isBold(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isItalic(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isTransposeCharacter(nativeEvent)) {\n                        event.preventDefault();\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSoftBreak(nativeEvent)) {\n                        event.preventDefault();\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSplitBlock(nativeEvent)) {\n                        event.preventDefault();\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                unit: \"line\"\n                            });\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                                unit: \"line\"\n                            });\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                unit: \"word\"\n                            });\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                                unit: \"word\"\n                            });\n                        }\n                        return;\n                    }\n                } else {\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_CHROME || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n                        // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                        // an event when deleting backwards in a selected void inline node\n                        if (selection && (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                            var currentNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n                            if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(currentNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, currentNode) && (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isInline(editor, currentNode) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, currentNode))) {\n                                event.preventDefault();\n                                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                    unit: \"block\"\n                                });\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onKeyDown\n        ]),\n        onPaste: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                // COMPAT: Safari InputEvents generated by pasting won't include\n                // application/x-slate-fragment items, so use the\n                // ClipboardEvent here. (2023/03/15)\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isPlainTextOnlyPaste)(event.nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n                    event.preventDefault();\n                    ReactEditor.insertData(editor, event.clipboardData);\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onPaste\n        ])\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Children, {\n        decorations: decorations,\n        node: editor,\n        renderElement: renderElement,\n        renderChunk: renderChunk,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        renderText: renderText\n    }))))));\n});\n/**\n * The default placeholder element\n */ var DefaultPlaceholder = (_ref2)=>{\n    var { attributes, children } = _ref2;\n    return(/*#__PURE__*/ // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread({}, attributes), children, slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null)));\n};\n/**\n * A default memoized decorate function.\n */ var defaultDecorate = ()=>[];\n/**\n * A default implement to scroll dom range into view.\n */ var defaultScrollSelectionIntoView = (editor, domRange)=>{\n    // This was affecting the selection of multiple blocks and dragging behavior,\n    // so enabled only if the selection has been collapsed.\n    if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection))) {\n        var leafEl = domRange.startContainer.parentElement;\n        // COMPAT: In Chrome, domRange.getBoundingClientRect() can return zero dimensions for valid ranges (e.g. line breaks).\n        // When this happens, do not scroll like most editors do.\n        var domRect = domRange.getBoundingClientRect();\n        var isZeroDimensionRect = domRect.width === 0 && domRect.height === 0 && domRect.x === 0 && domRect.y === 0;\n        if (isZeroDimensionRect) {\n            var leafRect = leafEl.getBoundingClientRect();\n            var leafHasDimensions = leafRect.width > 0 || leafRect.height > 0;\n            if (leafHasDimensions) {\n                return;\n            }\n        }\n        // Default behavior: use domRange's getBoundingClientRect\n        leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n        (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(leafEl, {\n            scrollMode: \"if-needed\"\n        });\n        // @ts-expect-error an unorthodox delete D:\n        delete leafEl.getBoundingClientRect;\n    }\n};\n/**\n * Check if an event is overrided by a handler.\n */ var isEventHandled = (event, handler)=>{\n    if (!handler) {\n        return false;\n    }\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    var shouldTreatEventAsHandled = handler(event);\n    if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n    }\n    return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */ var isDOMEventTargetInput = (event)=>{\n    return (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */ var isDOMEventHandled = (event, handler)=>{\n    if (!handler) {\n        return false;\n    }\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    var shouldTreatEventAsHandled = handler(event);\n    if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n    }\n    return event.defaultPrevented;\n};\nvar handleNativeHistoryEvents = (editor, event)=>{\n    var maybeHistoryEditor = editor;\n    if (event.inputType === \"historyUndo\" && typeof maybeHistoryEditor.undo === \"function\") {\n        maybeHistoryEditor.undo();\n        return;\n    }\n    if (event.inputType === \"historyRedo\" && typeof maybeHistoryEditor.redo === \"function\") {\n        maybeHistoryEditor.redo();\n        return;\n    }\n};\n/**\n * A React context for sharing the `focused` state of the editor.\n */ var FocusedContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `focused` state of the editor.\n */ var useFocused = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(FocusedContext);\n};\nvar REACT_MAJOR_VERSION = parseInt(react__WEBPACK_IMPORTED_MODULE_3___default().version.split(\".\")[0], 10);\nvar _excluded = [\n    \"editor\",\n    \"children\",\n    \"onChange\",\n    \"onSelectionChange\",\n    \"onValueChange\",\n    \"initialValue\"\n];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */ var Slate = (props)=>{\n    var { editor, children, onChange, onSelectionChange, onValueChange, initialValue } = props, rest = _objectWithoutProperties(props, _excluded);\n    // Run once on first mount, but before `useEffect` or render\n    react__WEBPACK_IMPORTED_MODULE_3___default().useState(()=>{\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Node.isNodeList(initialValue)) {\n            throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(initialValue)));\n        }\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(editor)) {\n            throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(editor)));\n        }\n        editor.children = initialValue;\n        Object.assign(editor, rest);\n    });\n    var { selectorContext, onChange: handleSelectorChange } = useSelectorContext();\n    var onContextChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((options)=>{\n        var _options$operation;\n        if (onChange) {\n            onChange(editor.children);\n        }\n        switch(options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type){\n            case \"set_selection\":\n                onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n                break;\n            default:\n                onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n        }\n        handleSelectorChange();\n    }, [\n        editor,\n        handleSelectorChange,\n        onChange,\n        onSelectionChange,\n        onValueChange\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n        return ()=>{\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, ()=>{});\n        };\n    }, [\n        editor,\n        onContextChange\n    ]);\n    var [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(ReactEditor.isFocused(editor));\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setIsFocused(ReactEditor.isFocused(editor));\n    }, [\n        editor\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        var fn = ()=>setIsFocused(ReactEditor.isFocused(editor));\n        if (REACT_MAJOR_VERSION >= 17) {\n            // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n            // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n            // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n            document.addEventListener(\"focusin\", fn);\n            document.addEventListener(\"focusout\", fn);\n            return ()=>{\n                document.removeEventListener(\"focusin\", fn);\n                document.removeEventListener(\"focusout\", fn);\n            };\n        } else {\n            document.addEventListener(\"focus\", fn, true);\n            document.addEventListener(\"blur\", fn, true);\n            return ()=>{\n                document.removeEventListener(\"focus\", fn, true);\n                document.removeEventListener(\"blur\", fn, true);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateSelectorContext.Provider, {\n        value: selectorContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(EditorContext.Provider, {\n        value: editor\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FocusedContext.Provider, {\n        value: isFocused\n    }, children)));\n};\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */ var useEditor = ()=>{\n    var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n    if (!editor) {\n        throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n    }\n    return editor;\n};\n/**\n * Get the current `selected` state of an element.\n */ var useSelected = ()=>{\n    var element = useElementIf();\n    // Breaking the rules of hooks is fine here since `!element` will remain true\n    // or false for the entire lifetime of the component this hook is called from.\n    // TODO: Decide if we want to throw an error instead when calling\n    // `useSelected` outside of an element (potentially a breaking change).\n    if (!element) return false;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var selector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((editor)=>{\n        if (!editor.selection) return false;\n        var path = ReactEditor.findPath(editor, element);\n        var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n        return !!slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(range, editor.selection);\n    }, [\n        element\n    ]);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSlateSelector(selector, undefined, {\n        // Defer the selector until after `Editable` has rendered so that the path\n        // will be accurate.\n        deferred: true\n    });\n};\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */ var useSlateSelection = ()=>{\n    return useSlateSelector((editor)=>editor.selection, isSelectionEqual);\n};\nvar isSelectionEqual = (a, b)=>{\n    if (!a && !b) return true;\n    if (!a || !b) return false;\n    return slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(a, b);\n};\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */ var withReact = function withReact(editor) {\n    var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"x-slate-fragment\";\n    var e = editor;\n    e = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.withDOM)(e, clipboardFormatKey);\n    var { onChange, apply } = e;\n    e.getChunkSize = ()=>null;\n    e.onChange = (options)=>{\n        // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n        // that the children and selection can get out of sync for one render\n        // pass. So we have to use this unstable API to ensure it batches them.\n        // (2019/12/03)\n        // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n        var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? (react_dom__WEBPACK_IMPORTED_MODULE_6___default().unstable_batchedUpdates) : (callback)=>callback();\n        maybeBatchUpdates(()=>{\n            onChange(options);\n        });\n    };\n    // On move_node, if the chunking optimization is enabled for the parent of the\n    // node being moved, add the moved node to the movedNodeKeys set of the\n    // parent's chunk tree.\n    e.apply = (operation)=>{\n        if (operation.type === \"move_node\") {\n            var parent = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(e, operation.path);\n            var chunking = !!e.getChunkSize(parent);\n            if (chunking) {\n                var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(e, operation.path);\n                var chunkTree = getChunkTreeForNode(e, parent);\n                var key = ReactEditor.findKey(e, node);\n                chunkTree.movedNodeKeys.add(key);\n            }\n        }\n        apply(operation);\n    };\n    return e;\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/slate-react/dist/index.es.js\n");

/***/ })

};
;