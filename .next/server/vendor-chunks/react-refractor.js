"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-refractor";
exports.ids = ["vendor-chunks/react-refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-refractor/lib/Refractor.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-refractor/lib/Refractor.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar fract = __webpack_require__(/*! refractor/core.js */ \"(ssr)/./node_modules/refractor/core.js\");\nvar mapChildren = __webpack_require__(/*! ./mapChildren */ \"(ssr)/./node_modules/react-refractor/lib/mapChildren.js\");\nvar addMarkers = __webpack_require__(/*! ./addMarkers */ \"(ssr)/./node_modules/react-refractor/lib/addMarkers.js\");\n// eslint-disable-next-line id-length\nvar h = React.createElement;\nfunction Refractor(props) {\n    if (true) {\n        if (!fract.registered(props.language)) {\n            // eslint-disable-next-line no-console\n            console.warn('No language definitions for \"'.concat(props.language, '\" seems to be registered, did you forget to call `Refractor.registerLanguage()`?'));\n        }\n    }\n    var langClassName = \"language-\".concat(props.language);\n    var codeProps = {\n        className: langClassName\n    };\n    var preProps = {\n        className: [\n            props.className || \"refractor\",\n            langClassName\n        ].filter(Boolean).join(\" \")\n    };\n    if (props.inline) {\n        codeProps.style = {\n            display: \"inline\"\n        };\n        codeProps.className = props.className || \"refractor\";\n    }\n    var ast = fract.highlight(props.value, props.language);\n    if (props.markers && props.markers.length > 0) {\n        ast = addMarkers(ast, {\n            markers: props.markers\n        });\n    }\n    var value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0));\n    var code = h(\"code\", codeProps, value);\n    return props.inline ? code : h(\"pre\", preProps, code);\n}\nRefractor.registerLanguage = function(lang) {\n    return fract.register(lang);\n};\nRefractor.hasLanguage = function(lang) {\n    return fract.registered(lang);\n};\nmodule.exports = Refractor; //# sourceMappingURL=Refractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9SZWZyYWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxjQUFjRixtQkFBT0EsQ0FBQztBQUMxQixJQUFJRyxhQUFhSCxtQkFBT0EsQ0FBQztBQUV6QixxQ0FBcUM7QUFDckMsSUFBSUksSUFBSUwsTUFBTU0sYUFBYTtBQUMzQixTQUFTQyxVQUFVQyxLQUFLO0lBQ3RCLElBQUlDLElBQXlCLEVBQWM7UUFDekMsSUFBSSxDQUFDUCxNQUFNUSxVQUFVLENBQUNGLE1BQU1HLFFBQVEsR0FBRztZQUNyQyxzQ0FBc0M7WUFDdENDLFFBQVFDLElBQUksQ0FBQyxnQ0FBaUNDLE1BQU0sQ0FBQ04sTUFBTUcsUUFBUSxFQUFFO1FBQ3ZFO0lBQ0Y7SUFDQSxJQUFJSSxnQkFBZ0IsWUFBWUQsTUFBTSxDQUFDTixNQUFNRyxRQUFRO0lBQ3JELElBQUlLLFlBQVk7UUFDZEMsV0FBV0Y7SUFDYjtJQUNBLElBQUlHLFdBQVc7UUFDYkQsV0FBVztZQUFDVCxNQUFNUyxTQUFTLElBQUk7WUFBYUY7U0FBYyxDQUFDSSxNQUFNLENBQUNDLFNBQVNDLElBQUksQ0FBQztJQUNsRjtJQUNBLElBQUliLE1BQU1jLE1BQU0sRUFBRTtRQUNoQk4sVUFBVU8sS0FBSyxHQUFHO1lBQ2hCQyxTQUFTO1FBQ1g7UUFDQVIsVUFBVUMsU0FBUyxHQUFHVCxNQUFNUyxTQUFTLElBQUk7SUFDM0M7SUFDQSxJQUFJUSxNQUFNdkIsTUFBTXdCLFNBQVMsQ0FBQ2xCLE1BQU1tQixLQUFLLEVBQUVuQixNQUFNRyxRQUFRO0lBQ3JELElBQUlILE1BQU1vQixPQUFPLElBQUlwQixNQUFNb0IsT0FBTyxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUM3Q0osTUFBTXJCLFdBQVdxQixLQUFLO1lBQ3BCRyxTQUFTcEIsTUFBTW9CLE9BQU87UUFDeEI7SUFDRjtJQUNBLElBQUlELFFBQVFGLElBQUlJLE1BQU0sS0FBSyxJQUFJckIsTUFBTW1CLEtBQUssR0FBR0YsSUFBSUssR0FBRyxDQUFDM0IsWUFBWTRCLEtBQUssQ0FBQztJQUN2RSxJQUFJQyxPQUFPM0IsRUFBRSxRQUFRVyxXQUFXVztJQUNoQyxPQUFPbkIsTUFBTWMsTUFBTSxHQUFHVSxPQUFPM0IsRUFBRSxPQUFPYSxVQUFVYztBQUNsRDtBQUNBekIsVUFBVTBCLGdCQUFnQixHQUFHLFNBQVVDLElBQUk7SUFDekMsT0FBT2hDLE1BQU1pQyxRQUFRLENBQUNEO0FBQ3hCO0FBQ0EzQixVQUFVNkIsV0FBVyxHQUFHLFNBQVVGLElBQUk7SUFDcEMsT0FBT2hDLE1BQU1RLFVBQVUsQ0FBQ3dCO0FBQzFCO0FBQ0FHLE9BQU9DLE9BQU8sR0FBRy9CLFdBQ2pCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9SZWZyYWN0b3IuanM/ZDhjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBmcmFjdCA9IHJlcXVpcmUoJ3JlZnJhY3Rvci9jb3JlLmpzJyk7XG52YXIgbWFwQ2hpbGRyZW4gPSByZXF1aXJlKCcuL21hcENoaWxkcmVuJyk7XG52YXIgYWRkTWFya2VycyA9IHJlcXVpcmUoJy4vYWRkTWFya2VycycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaWQtbGVuZ3RoXG52YXIgaCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQ7XG5mdW5jdGlvbiBSZWZyYWN0b3IocHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIWZyYWN0LnJlZ2lzdGVyZWQocHJvcHMubGFuZ3VhZ2UpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiTm8gbGFuZ3VhZ2UgZGVmaW5pdGlvbnMgZm9yIFxcXCJcIi5jb25jYXQocHJvcHMubGFuZ3VhZ2UsIFwiXFxcIiBzZWVtcyB0byBiZSByZWdpc3RlcmVkLCBkaWQgeW91IGZvcmdldCB0byBjYWxsIGBSZWZyYWN0b3IucmVnaXN0ZXJMYW5ndWFnZSgpYD9cIikpO1xuICAgIH1cbiAgfVxuICB2YXIgbGFuZ0NsYXNzTmFtZSA9IFwibGFuZ3VhZ2UtXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlKTtcbiAgdmFyIGNvZGVQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6IGxhbmdDbGFzc05hbWVcbiAgfTtcbiAgdmFyIHByZVByb3BzID0ge1xuICAgIGNsYXNzTmFtZTogW3Byb3BzLmNsYXNzTmFtZSB8fCAncmVmcmFjdG9yJywgbGFuZ0NsYXNzTmFtZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKVxuICB9O1xuICBpZiAocHJvcHMuaW5saW5lKSB7XG4gICAgY29kZVByb3BzLnN0eWxlID0ge1xuICAgICAgZGlzcGxheTogJ2lubGluZSdcbiAgICB9O1xuICAgIGNvZGVQcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgfHwgJ3JlZnJhY3Rvcic7XG4gIH1cbiAgdmFyIGFzdCA9IGZyYWN0LmhpZ2hsaWdodChwcm9wcy52YWx1ZSwgcHJvcHMubGFuZ3VhZ2UpO1xuICBpZiAocHJvcHMubWFya2VycyAmJiBwcm9wcy5tYXJrZXJzLmxlbmd0aCA+IDApIHtcbiAgICBhc3QgPSBhZGRNYXJrZXJzKGFzdCwge1xuICAgICAgbWFya2VyczogcHJvcHMubWFya2Vyc1xuICAgIH0pO1xuICB9XG4gIHZhciB2YWx1ZSA9IGFzdC5sZW5ndGggPT09IDAgPyBwcm9wcy52YWx1ZSA6IGFzdC5tYXAobWFwQ2hpbGRyZW4uZGVwdGgoMCkpO1xuICB2YXIgY29kZSA9IGgoJ2NvZGUnLCBjb2RlUHJvcHMsIHZhbHVlKTtcbiAgcmV0dXJuIHByb3BzLmlubGluZSA/IGNvZGUgOiBoKCdwcmUnLCBwcmVQcm9wcywgY29kZSk7XG59XG5SZWZyYWN0b3IucmVnaXN0ZXJMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nKSB7XG4gIHJldHVybiBmcmFjdC5yZWdpc3RlcihsYW5nKTtcbn07XG5SZWZyYWN0b3IuaGFzTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZykge1xuICByZXR1cm4gZnJhY3QucmVnaXN0ZXJlZChsYW5nKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlZnJhY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlZnJhY3Rvci5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiZnJhY3QiLCJtYXBDaGlsZHJlbiIsImFkZE1hcmtlcnMiLCJoIiwiY3JlYXRlRWxlbWVudCIsIlJlZnJhY3RvciIsInByb3BzIiwicHJvY2VzcyIsInJlZ2lzdGVyZWQiLCJsYW5ndWFnZSIsImNvbnNvbGUiLCJ3YXJuIiwiY29uY2F0IiwibGFuZ0NsYXNzTmFtZSIsImNvZGVQcm9wcyIsImNsYXNzTmFtZSIsInByZVByb3BzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJpbmxpbmUiLCJzdHlsZSIsImRpc3BsYXkiLCJhc3QiLCJoaWdobGlnaHQiLCJ2YWx1ZSIsIm1hcmtlcnMiLCJsZW5ndGgiLCJtYXAiLCJkZXB0aCIsImNvZGUiLCJyZWdpc3Rlckxhbmd1YWdlIiwibGFuZyIsInJlZ2lzdGVyIiwiaGFzTGFuZ3VhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/Refractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/addMarkers.js":
/*!********************************************************!*\
  !*** ./node_modules/react-refractor/lib/addMarkers.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar filter = __webpack_require__(/*! unist-util-filter */ \"(ssr)/./node_modules/unist-util-filter/index.js\");\nvar visit = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/index.js\");\nvar NodeMap = __webpack_require__(/*! ./map */ \"(ssr)/./node_modules/react-refractor/lib/map.js\");\nfunction lineNumberify(ast) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        lineNumber: 1\n    };\n    return ast.reduce(function(result, node) {\n        var lineStart = context.lineNumber;\n        if (node.type === \"text\") {\n            if (node.value.indexOf(\"\\n\") === -1) {\n                node.lineStart = lineStart;\n                node.lineEnd = lineStart;\n                result.nodes.push(node);\n                return result;\n            }\n            var lines = node.value.split(\"\\n\");\n            for(var i = 0; i < lines.length; i++){\n                var lineNum = i === 0 ? context.lineNumber : ++context.lineNumber;\n                result.nodes.push({\n                    type: \"text\",\n                    value: i === lines.length - 1 ? lines[i] : \"\".concat(lines[i], \"\\n\"),\n                    lineStart: lineNum,\n                    lineEnd: lineNum\n                });\n            }\n            result.lineNumber = context.lineNumber;\n            return result;\n        }\n        if (node.children) {\n            var processed = lineNumberify(node.children, context);\n            var firstChild = processed.nodes[0];\n            var lastChild = processed.nodes[processed.nodes.length - 1];\n            node.lineStart = firstChild ? firstChild.lineStart : lineStart;\n            node.lineEnd = lastChild ? lastChild.lineEnd : lineStart;\n            node.children = processed.nodes;\n            result.lineNumber = processed.lineNumber;\n            result.nodes.push(node);\n            return result;\n        }\n        result.nodes.push(node);\n        return result;\n    }, {\n        nodes: [],\n        lineNumber: context.lineNumber\n    });\n}\nfunction unwrapLine(markerLine, nodes) {\n    var tree = {\n        type: \"root\",\n        children: nodes\n    };\n    var headMap = new NodeMap();\n    var lineMap = new NodeMap();\n    var tailMap = new NodeMap();\n    var cloned = [];\n    function addCopy(map, node, ancestors) {\n        cloned.push(node);\n        ancestors.forEach(function(ancestor) {\n            if (!map.has(ancestor)) {\n                map.set(ancestor, Object.assign({}, ancestor, {\n                    children: []\n                }));\n                if (ancestor !== tree) {\n                    cloned.push(ancestor);\n                }\n            }\n        });\n        var i = ancestors.length;\n        while(i--){\n            var ancestor = map.get(ancestors[i]);\n            var child = ancestors[i + 1];\n            var leaf = map.get(child) || node;\n            if (ancestor.children.indexOf(leaf) === -1) {\n                ancestor.children.push(leaf);\n            }\n        }\n    }\n    visit(tree, function(node, ancestors) {\n        if (node.children) {\n            return;\n        }\n        // These nodes are on previous lines, but nested within the same structure\n        if (node.lineStart < markerLine) {\n            addCopy(headMap, node, ancestors);\n            return;\n        }\n        // These nodes are on the target line\n        if (node.lineStart === markerLine) {\n            addCopy(lineMap, node, ancestors);\n            return;\n        }\n        // If we have shared ancestors with some of the cloned elements,\n        // create another tree of the remaining nodes\n        if (node.lineEnd > markerLine && cloned.some(function(clone) {\n            return ancestors.indexOf(clone) !== -1;\n        })) {\n            addCopy(tailMap, node, ancestors);\n        }\n    });\n    // Get the remaining nodes - the ones who were not part of the same tree\n    var filtered = filter(tree, function(node) {\n        return cloned.indexOf(node) === -1;\n    });\n    var getChildren = function getChildren(map) {\n        var rootNode = map.get(tree);\n        if (!rootNode) {\n            return [];\n        }\n        visit(rootNode, function(leaf, ancestors) {\n            if (leaf.children) {\n                leaf.lineStart = 0;\n                leaf.lineEnd = 0;\n                return;\n            }\n            ancestors.forEach(function(ancestor) {\n                ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart);\n                ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd);\n            });\n        });\n        return rootNode.children;\n    };\n    var merged = [].concat(getChildren(headMap), getChildren(lineMap), getChildren(tailMap), filtered ? filtered.children : []);\n    headMap.clear();\n    lineMap.clear();\n    tailMap.clear();\n    return merged;\n}\nfunction wrapBatch(children, marker, options) {\n    var className = marker.className || \"refractor-marker\";\n    return {\n        type: \"element\",\n        tagName: marker.component || \"div\",\n        properties: marker.component ? Object.assign({}, options, {\n            className: className\n        }) : {\n            className: className\n        },\n        children: children,\n        lineStart: marker.line,\n        lineEnd: children[children.length - 1].lineEnd,\n        isMarker: true\n    };\n}\nfunction wrapLines(treeNodes, markers, options) {\n    if (markers.length === 0 || treeNodes.length === 0) {\n        return treeNodes;\n    }\n    var ast = markers.reduce(function(acc, marker) {\n        return unwrapLine(marker.line, acc);\n    }, treeNodes);\n    // Container for the new AST\n    var wrapped = [];\n    // Note: Markers are already sorted by line number (ascending)\n    var astIndex = 0;\n    for(var m = 0; m < markers.length; m++){\n        var marker = markers[m];\n        // Start by eating all AST nodes with line numbers up to the given marker\n        for(var node = ast[astIndex]; node && node.lineEnd < marker.line; node = ast[++astIndex]){\n            wrapped.push(node);\n        }\n        // Now proceed to find all _contiguous_ nodes on the same line\n        var batch = [];\n        for(var _node = ast[astIndex]; _node && _node.lineEnd === marker.line; _node = ast[++astIndex]){\n            batch.push(_node);\n        }\n        // Now add that batch, if we have anything\n        if (batch.length > 0) {\n            wrapped.push(wrapBatch(batch, marker, options));\n        }\n    }\n    // Now add the remaining AST nodes\n    while(astIndex < ast.length){\n        wrapped.push(ast[astIndex++]);\n    }\n    return wrapped;\n}\nfunction addMarkers(ast, options) {\n    var markers = options.markers.map(function(marker) {\n        return marker.line ? marker : {\n            line: marker\n        };\n    }).sort(function(nodeA, nodeB) {\n        return nodeA.line - nodeB.line;\n    });\n    var numbered = lineNumberify(ast).nodes;\n    return wrapLines(numbered, markers, options);\n}\nmodule.exports = addMarkers; //# sourceMappingURL=addMarkers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/addMarkers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/map.js":
/*!*************************************************!*\
  !*** ./node_modules/react-refractor/lib/map.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n/**\n * Weird \"map\" polyfill, that's weak if possible\n */ module.exports = typeof WeakMap === \"function\" ? HappyMap : SadMap;\n// Happy path! Fakes a `clear()` if possible (noop)\nfunction HappyMap() {\n    this.map = new WeakMap();\n}\nHappyMap.prototype.has = function(key) {\n    return this.map.has(key);\n};\nHappyMap.prototype.set = function(key, value) {\n    this.map.set(key, value);\n    return this;\n};\nHappyMap.prototype.get = function(key) {\n    return this.map.get(key);\n};\nHappyMap.prototype.clear = function() {\n// intentional noop, since we dont need to/cant clear\n};\n// Sad path! Use less stylish approach\nfunction SadMap() {\n    this.keys = [];\n    this.values = [];\n}\nSadMap.prototype.has = function(key) {\n    return this.keys.indexOf(key) !== -1;\n};\nSadMap.prototype.set = function(key, value) {\n    var index = this.keys.indexOf(key);\n    if (index === -1) {\n        this.keys.push(key);\n        this.values.push(value);\n    } else {\n        this.values[index] = value;\n    }\n    return this;\n};\nSadMap.prototype.get = function(key) {\n    var index = this.keys.indexOf(key);\n    return index === -1 ? undefined : this.values[index];\n};\nSadMap.prototype.clear = function() {\n    this.keys = [];\n    this.values = [];\n}; //# sourceMappingURL=map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Q0FFQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsT0FBT0MsWUFBWSxhQUFhQyxXQUFXQztBQUU1RCxtREFBbUQ7QUFDbkQsU0FBU0Q7SUFDUCxJQUFJLENBQUNFLEdBQUcsR0FBRyxJQUFJSDtBQUNqQjtBQUNBQyxTQUFTRyxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxHQUFHO0lBQ3BDLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNFLEdBQUcsQ0FBQ0M7QUFDdEI7QUFDQUwsU0FBU0csU0FBUyxDQUFDRyxHQUFHLEdBQUcsU0FBVUQsR0FBRyxFQUFFRSxLQUFLO0lBQzNDLElBQUksQ0FBQ0wsR0FBRyxDQUFDSSxHQUFHLENBQUNELEtBQUtFO0lBQ2xCLE9BQU8sSUFBSTtBQUNiO0FBQ0FQLFNBQVNHLFNBQVMsQ0FBQ0ssR0FBRyxHQUFHLFNBQVVILEdBQUc7SUFDcEMsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ00sR0FBRyxDQUFDSDtBQUN0QjtBQUNBTCxTQUFTRyxTQUFTLENBQUNNLEtBQUssR0FBRztBQUN6QixxREFBcUQ7QUFDdkQ7QUFFQSxzQ0FBc0M7QUFDdEMsU0FBU1I7SUFDUCxJQUFJLENBQUNTLElBQUksR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtBQUNsQjtBQUNBVixPQUFPRSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxHQUFHO0lBQ2xDLE9BQU8sSUFBSSxDQUFDSyxJQUFJLENBQUNFLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDO0FBQ3JDO0FBQ0FKLE9BQU9FLFNBQVMsQ0FBQ0csR0FBRyxHQUFHLFNBQVVELEdBQUcsRUFBRUUsS0FBSztJQUN6QyxJQUFJTSxRQUFRLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxPQUFPLENBQUNQO0lBQzlCLElBQUlRLFVBQVUsQ0FBQyxHQUFHO1FBQ2hCLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxJQUFJLENBQUNUO1FBQ2YsSUFBSSxDQUFDTSxNQUFNLENBQUNHLElBQUksQ0FBQ1A7SUFDbkIsT0FBTztRQUNMLElBQUksQ0FBQ0ksTUFBTSxDQUFDRSxNQUFNLEdBQUdOO0lBQ3ZCO0lBQ0EsT0FBTyxJQUFJO0FBQ2I7QUFDQU4sT0FBT0UsU0FBUyxDQUFDSyxHQUFHLEdBQUcsU0FBVUgsR0FBRztJQUNsQyxJQUFJUSxRQUFRLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxPQUFPLENBQUNQO0lBQzlCLE9BQU9RLFVBQVUsQ0FBQyxJQUFJRSxZQUFZLElBQUksQ0FBQ0osTUFBTSxDQUFDRSxNQUFNO0FBQ3REO0FBQ0FaLE9BQU9FLFNBQVMsQ0FBQ00sS0FBSyxHQUFHO0lBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7SUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0FBQ2xCLEdBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWZyYWN0b3IvbGliL21hcC5qcz80NTJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFdlaXJkIFwibWFwXCIgcG9seWZpbGwsIHRoYXQncyB3ZWFrIGlmIHBvc3NpYmxlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgPyBIYXBweU1hcCA6IFNhZE1hcDtcblxuLy8gSGFwcHkgcGF0aCEgRmFrZXMgYSBgY2xlYXIoKWAgaWYgcG9zc2libGUgKG5vb3ApXG5mdW5jdGlvbiBIYXBweU1hcCgpIHtcbiAgdGhpcy5tYXAgPSBuZXcgV2Vha01hcCgpO1xufVxuSGFwcHlNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhcyhrZXkpO1xufTtcbkhhcHB5TWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufTtcbkhhcHB5TWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KTtcbn07XG5IYXBweU1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGludGVudGlvbmFsIG5vb3AsIHNpbmNlIHdlIGRvbnQgbmVlZCB0by9jYW50IGNsZWFyXG59O1xuXG4vLyBTYWQgcGF0aCEgVXNlIGxlc3Mgc3R5bGlzaCBhcHByb2FjaFxuZnVuY3Rpb24gU2FkTWFwKCkge1xuICB0aGlzLmtleXMgPSBbXTtcbiAgdGhpcy52YWx1ZXMgPSBbXTtcbn1cblNhZE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTE7XG59O1xuU2FkTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSB0aGlzLmtleXMuaW5kZXhPZihrZXkpO1xuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgdGhpcy5rZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5TYWRNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgcmV0dXJuIGluZGV4ID09PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMudmFsdWVzW2luZGV4XTtcbn07XG5TYWRNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmtleXMgPSBbXTtcbiAgdGhpcy52YWx1ZXMgPSBbXTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXZWFrTWFwIiwiSGFwcHlNYXAiLCJTYWRNYXAiLCJtYXAiLCJwcm90b3R5cGUiLCJoYXMiLCJrZXkiLCJzZXQiLCJ2YWx1ZSIsImdldCIsImNsZWFyIiwia2V5cyIsInZhbHVlcyIsImluZGV4T2YiLCJpbmRleCIsInB1c2giLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/mapChildren.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-refractor/lib/mapChildren.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction mapChild(child, i, depth) {\n    if (child.tagName) {\n        var className = child.properties && Array.isArray(child.properties.className) ? child.properties.className.join(\" \") : child.properties.className;\n        return React.createElement(child.tagName, Object.assign({\n            key: \"fract-\".concat(depth, \"-\").concat(i)\n        }, child.properties, {\n            className: className\n        }), child.children && child.children.map(mapWithDepth(depth + 1)));\n    }\n    return child.value;\n}\nfunction mapWithDepth(depth) {\n    return function mapChildrenWithDepth(child, i) {\n        return mapChild(child, i, depth);\n    };\n}\nexports.depth = mapWithDepth; //# sourceMappingURL=mapChildren.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXBDaGlsZHJlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxLQUFLO0lBQy9CLElBQUlGLE1BQU1HLE9BQU8sRUFBRTtRQUNqQixJQUFJQyxZQUFZSixNQUFNSyxVQUFVLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1AsTUFBTUssVUFBVSxDQUFDRCxTQUFTLElBQUlKLE1BQU1LLFVBQVUsQ0FBQ0QsU0FBUyxDQUFDSSxJQUFJLENBQUMsT0FBT1IsTUFBTUssVUFBVSxDQUFDRCxTQUFTO1FBQ2pKLE9BQU9QLE1BQU1ZLGFBQWEsQ0FBQ1QsTUFBTUcsT0FBTyxFQUFFTyxPQUFPQyxNQUFNLENBQUM7WUFDdERDLEtBQUssU0FBU0MsTUFBTSxDQUFDWCxPQUFPLEtBQUtXLE1BQU0sQ0FBQ1o7UUFDMUMsR0FBR0QsTUFBTUssVUFBVSxFQUFFO1lBQ25CRCxXQUFXQTtRQUNiLElBQUlKLE1BQU1jLFFBQVEsSUFBSWQsTUFBTWMsUUFBUSxDQUFDQyxHQUFHLENBQUNDLGFBQWFkLFFBQVE7SUFDaEU7SUFDQSxPQUFPRixNQUFNaUIsS0FBSztBQUNwQjtBQUNBLFNBQVNELGFBQWFkLEtBQUs7SUFDekIsT0FBTyxTQUFTZ0IscUJBQXFCbEIsS0FBSyxFQUFFQyxDQUFDO1FBQzNDLE9BQU9GLFNBQVNDLE9BQU9DLEdBQUdDO0lBQzVCO0FBQ0Y7QUFDQWlCLGFBQWEsR0FBR0gsY0FDaEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWZyYWN0b3IvbGliL21hcENoaWxkcmVuLmpzPzYwODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5mdW5jdGlvbiBtYXBDaGlsZChjaGlsZCwgaSwgZGVwdGgpIHtcbiAgaWYgKGNoaWxkLnRhZ05hbWUpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gY2hpbGQucHJvcGVydGllcyAmJiBBcnJheS5pc0FycmF5KGNoaWxkLnByb3BlcnRpZXMuY2xhc3NOYW1lKSA/IGNoaWxkLnByb3BlcnRpZXMuY2xhc3NOYW1lLmpvaW4oJyAnKSA6IGNoaWxkLnByb3BlcnRpZXMuY2xhc3NOYW1lO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNoaWxkLnRhZ05hbWUsIE9iamVjdC5hc3NpZ24oe1xuICAgICAga2V5OiBcImZyYWN0LVwiLmNvbmNhdChkZXB0aCwgXCItXCIpLmNvbmNhdChpKVxuICAgIH0sIGNoaWxkLnByb3BlcnRpZXMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSksIGNoaWxkLmNoaWxkcmVuICYmIGNoaWxkLmNoaWxkcmVuLm1hcChtYXBXaXRoRGVwdGgoZGVwdGggKyAxKSkpO1xuICB9XG4gIHJldHVybiBjaGlsZC52YWx1ZTtcbn1cbmZ1bmN0aW9uIG1hcFdpdGhEZXB0aChkZXB0aCkge1xuICByZXR1cm4gZnVuY3Rpb24gbWFwQ2hpbGRyZW5XaXRoRGVwdGgoY2hpbGQsIGkpIHtcbiAgICByZXR1cm4gbWFwQ2hpbGQoY2hpbGQsIGksIGRlcHRoKTtcbiAgfTtcbn1cbmV4cG9ydHMuZGVwdGggPSBtYXBXaXRoRGVwdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBDaGlsZHJlbi5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwibWFwQ2hpbGQiLCJjaGlsZCIsImkiLCJkZXB0aCIsInRhZ05hbWUiLCJjbGFzc05hbWUiLCJwcm9wZXJ0aWVzIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJrZXkiLCJjb25jYXQiLCJjaGlsZHJlbiIsIm1hcCIsIm1hcFdpdGhEZXB0aCIsInZhbHVlIiwibWFwQ2hpbGRyZW5XaXRoRGVwdGgiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/mapChildren.js\n");

/***/ })

};
;