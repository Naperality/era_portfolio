"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry";
exports.ids = ["vendor-chunks/@sentry"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/client.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/client.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserClient: () => (/* binding */ BrowserClient)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/baseclient.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/env.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js\");\n/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eventbuilder.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/eventbuilder.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n/* harmony import */ var _userfeedback_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./userfeedback.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/userfeedback.js\");\n\n\n\n\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/core Options for more information.\n */ /**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */ class BrowserClient extends _sentry_core__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */ constructor(options){\n        const opts = {\n            // We default this to true, as it is the safer scenario\n            parentSpanIsAlwaysRootSpan: true,\n            ...options\n        };\n        const sdkSource = _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.SENTRY_SDK_SOURCE || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getSDKSource)();\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.applySdkMetadata)(opts, \"browser\", [\n            \"browser\"\n        ], sdkSource);\n        super(opts);\n        if (opts.sendClientReports && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document) {\n            _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document.addEventListener(\"visibilitychange\", ()=>{\n                if (_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document.visibilityState === \"hidden\") {\n                    this._flushOutcomes();\n                }\n            });\n        }\n    }\n    /**\n   * @inheritDoc\n   */ eventFromException(exception, hint) {\n        return (0,_eventbuilder_js__WEBPACK_IMPORTED_MODULE_4__.eventFromException)(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n    }\n    /**\n   * @inheritDoc\n   */ eventFromMessage(message, level = \"info\", hint) {\n        return (0,_eventbuilder_js__WEBPACK_IMPORTED_MODULE_4__.eventFromMessage)(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n    }\n    /**\n   * Sends user feedback to Sentry.\n   *\n   * @deprecated Use `captureFeedback` instead.\n   */ captureUserFeedback(feedback) {\n        if (!this._isEnabled()) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"SDK not enabled, will not capture user feedback.\");\n            return;\n        }\n        const envelope = (0,_userfeedback_js__WEBPACK_IMPORTED_MODULE_7__.createUserFeedbackEnvelope)(feedback, {\n            metadata: this.getSdkMetadata(),\n            dsn: this.getDsn(),\n            tunnel: this.getOptions().tunnel\n        });\n        // sendEnvelope should not throw\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.sendEnvelope(envelope);\n    }\n    /**\n   * @inheritDoc\n   */ _prepareEvent(event, hint, scope) {\n        event.platform = event.platform || \"javascript\";\n        return super._prepareEvent(event, hint, scope);\n    }\n}\n //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFrRjtBQUNuQztBQUMwQjtBQUNuQztBQUN5QjtBQUUvRDs7O0NBR0MsR0FFRDs7Ozs7Q0FLQyxHQUNELE1BQU1TLHNCQUFzQlQsb0RBQVVBO0lBQ3BDOzs7O0dBSUMsR0FDQVUsWUFBWUMsT0FBTyxDQUFFO1FBQ3BCLE1BQU1DLE9BQU87WUFDWCx1REFBdUQ7WUFDdkRDLDRCQUE0QjtZQUM1QixHQUFHRixPQUFPO1FBQ1o7UUFDQSxNQUFNRyxZQUFZUCwrQ0FBTUEsQ0FBQ1EsaUJBQWlCLElBQUlkLDBEQUFZQTtRQUMxREMsOERBQWdCQSxDQUFDVSxNQUFNLFdBQVc7WUFBQztTQUFVLEVBQUVFO1FBRS9DLEtBQUssQ0FBQ0Y7UUFFTixJQUFJQSxLQUFLSSxpQkFBaUIsSUFBSVQsK0NBQU1BLENBQUNVLFFBQVEsRUFBRTtZQUM3Q1YsK0NBQU1BLENBQUNVLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsb0JBQW9CO2dCQUNuRCxJQUFJWCwrQ0FBTUEsQ0FBQ1UsUUFBUSxDQUFDRSxlQUFlLEtBQUssVUFBVTtvQkFDaEQsSUFBSSxDQUFDQyxjQUFjO2dCQUNyQjtZQUNGO1FBQ0Y7SUFDRjtJQUVBOztHQUVDLEdBQ0FmLG1CQUFtQmdCLFNBQVMsRUFBRUMsSUFBSSxFQUFFO1FBQ25DLE9BQU9qQixvRUFBa0JBLENBQUMsSUFBSSxDQUFDa0IsUUFBUSxDQUFDQyxXQUFXLEVBQUVILFdBQVdDLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNFLGdCQUFnQjtJQUN0RztJQUVBOztHQUVDLEdBQ0FuQixpQkFDQ29CLE9BQU8sRUFDUEMsUUFBUSxNQUFNLEVBQ2RMLElBQUksRUFDSjtRQUNBLE9BQU9oQixrRUFBZ0JBLENBQUMsSUFBSSxDQUFDaUIsUUFBUSxDQUFDQyxXQUFXLEVBQUVFLFNBQVNDLE9BQU9MLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNFLGdCQUFnQjtJQUN6RztJQUVBOzs7O0dBSUMsR0FDQUcsb0JBQW9CQyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQ0MsVUFBVSxJQUFJO1lBQ3RCMUIsd0RBQVdBLElBQUlELGdEQUFNQSxDQUFDNEIsSUFBSSxDQUFDO1lBQzNCO1FBQ0Y7UUFFQSxNQUFNQyxXQUFXeEIsNEVBQTBCQSxDQUFDcUIsVUFBVTtZQUNwREksVUFBVSxJQUFJLENBQUNDLGNBQWM7WUFDN0JDLEtBQUssSUFBSSxDQUFDQyxNQUFNO1lBQ2hCQyxRQUFRLElBQUksQ0FBQ0MsVUFBVSxHQUFHRCxNQUFNO1FBQ2xDO1FBRUEsZ0NBQWdDO1FBQ2hDLG1FQUFtRTtRQUNuRSxJQUFJLENBQUNFLFlBQVksQ0FBQ1A7SUFDcEI7SUFFQTs7R0FFQyxHQUNBUSxjQUFjQyxLQUFLLEVBQUVuQixJQUFJLEVBQUVvQixLQUFLLEVBQUU7UUFDakNELE1BQU1FLFFBQVEsR0FBR0YsTUFBTUUsUUFBUSxJQUFJO1FBQ25DLE9BQU8sS0FBSyxDQUFDSCxjQUFjQyxPQUFPbkIsTUFBTW9CO0lBQzFDO0FBQ0Y7QUFFeUIsQ0FDekIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvYnVpbGQvbnBtL2VzbS9jbGllbnQuanM/MjQ2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ2xpZW50LCBnZXRTREtTb3VyY2UsIGFwcGx5U2RrTWV0YWRhdGEsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tRXhjZXB0aW9uLCBldmVudEZyb21NZXNzYWdlIH0gZnJvbSAnLi9ldmVudGJ1aWxkZXIuanMnO1xuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi9oZWxwZXJzLmpzJztcbmltcG9ydCB7IGNyZWF0ZVVzZXJGZWVkYmFja0VudmVsb3BlIH0gZnJvbSAnLi91c2VyZmVlZGJhY2suanMnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIFNlbnRyeSBCcm93c2VyIFNESy5cbiAqIEBzZWUgQHNlbnRyeS9jb3JlIE9wdGlvbnMgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cblxuLyoqXG4gKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIENsaWVudC5cbiAqXG4gKiBAc2VlIEJyb3dzZXJPcHRpb25zIGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBzZWUgU2VudHJ5Q2xpZW50IGZvciB1c2FnZSBkb2N1bWVudGF0aW9uLlxuICovXG5jbGFzcyBCcm93c2VyQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEJyb3dzZXIgU0RLIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoaXMgU0RLLlxuICAgKi9cbiAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgLy8gV2UgZGVmYXVsdCB0aGlzIHRvIHRydWUsIGFzIGl0IGlzIHRoZSBzYWZlciBzY2VuYXJpb1xuICAgICAgcGFyZW50U3BhbklzQWx3YXlzUm9vdFNwYW46IHRydWUsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgY29uc3Qgc2RrU291cmNlID0gV0lORE9XLlNFTlRSWV9TREtfU09VUkNFIHx8IGdldFNES1NvdXJjZSgpO1xuICAgIGFwcGx5U2RrTWV0YWRhdGEob3B0cywgJ2Jyb3dzZXInLCBbJ2Jyb3dzZXInXSwgc2RrU291cmNlKTtcblxuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgaWYgKG9wdHMuc2VuZENsaWVudFJlcG9ydHMgJiYgV0lORE9XLmRvY3VtZW50KSB7XG4gICAgICBXSU5ET1cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgaWYgKFdJTkRPVy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBldmVudEZyb21FeGNlcHRpb24oZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgcmV0dXJuIGV2ZW50RnJvbUV4Y2VwdGlvbih0aGlzLl9vcHRpb25zLnN0YWNrUGFyc2VyLCBleGNlcHRpb24sIGhpbnQsIHRoaXMuX29wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBldmVudEZyb21NZXNzYWdlKFxuICAgIG1lc3NhZ2UsXG4gICAgbGV2ZWwgPSAnaW5mbycsXG4gICAgaGludCxcbiAgKSB7XG4gICAgcmV0dXJuIGV2ZW50RnJvbU1lc3NhZ2UodGhpcy5fb3B0aW9ucy5zdGFja1BhcnNlciwgbWVzc2FnZSwgbGV2ZWwsIGhpbnQsIHRoaXMuX29wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdXNlciBmZWVkYmFjayB0byBTZW50cnkuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgY2FwdHVyZUZlZWRiYWNrYCBpbnN0ZWFkLlxuICAgKi9cbiAgIGNhcHR1cmVVc2VyRmVlZGJhY2soZmVlZGJhY2spIHtcbiAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCgpKSB7XG4gICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignU0RLIG5vdCBlbmFibGVkLCB3aWxsIG5vdCBjYXB0dXJlIHVzZXIgZmVlZGJhY2suJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZW52ZWxvcGUgPSBjcmVhdGVVc2VyRmVlZGJhY2tFbnZlbG9wZShmZWVkYmFjaywge1xuICAgICAgbWV0YWRhdGE6IHRoaXMuZ2V0U2RrTWV0YWRhdGEoKSxcbiAgICAgIGRzbjogdGhpcy5nZXREc24oKSxcbiAgICAgIHR1bm5lbDogdGhpcy5nZXRPcHRpb25zKCkudHVubmVsLFxuICAgIH0pO1xuXG4gICAgLy8gc2VuZEVudmVsb3BlIHNob3VsZCBub3QgdGhyb3dcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgdGhpcy5zZW5kRW52ZWxvcGUoZW52ZWxvcGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgX3ByZXBhcmVFdmVudChldmVudCwgaGludCwgc2NvcGUpIHtcbiAgICBldmVudC5wbGF0Zm9ybSA9IGV2ZW50LnBsYXRmb3JtIHx8ICdqYXZhc2NyaXB0JztcbiAgICByZXR1cm4gc3VwZXIuX3ByZXBhcmVFdmVudChldmVudCwgaGludCwgc2NvcGUpO1xuICB9XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJCYXNlQ2xpZW50IiwiZ2V0U0RLU291cmNlIiwiYXBwbHlTZGtNZXRhZGF0YSIsImxvZ2dlciIsIkRFQlVHX0JVSUxEIiwiZXZlbnRGcm9tRXhjZXB0aW9uIiwiZXZlbnRGcm9tTWVzc2FnZSIsIldJTkRPVyIsImNyZWF0ZVVzZXJGZWVkYmFja0VudmVsb3BlIiwiQnJvd3NlckNsaWVudCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm9wdHMiLCJwYXJlbnRTcGFuSXNBbHdheXNSb290U3BhbiIsInNka1NvdXJjZSIsIlNFTlRSWV9TREtfU09VUkNFIiwic2VuZENsaWVudFJlcG9ydHMiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2aXNpYmlsaXR5U3RhdGUiLCJfZmx1c2hPdXRjb21lcyIsImV4Y2VwdGlvbiIsImhpbnQiLCJfb3B0aW9ucyIsInN0YWNrUGFyc2VyIiwiYXR0YWNoU3RhY2t0cmFjZSIsIm1lc3NhZ2UiLCJsZXZlbCIsImNhcHR1cmVVc2VyRmVlZGJhY2siLCJmZWVkYmFjayIsIl9pc0VuYWJsZWQiLCJ3YXJuIiwiZW52ZWxvcGUiLCJtZXRhZGF0YSIsImdldFNka01ldGFkYXRhIiwiZHNuIiwiZ2V0RHNuIiwidHVubmVsIiwiZ2V0T3B0aW9ucyIsInNlbmRFbnZlbG9wZSIsIl9wcmVwYXJlRXZlbnQiLCJldmVudCIsInNjb3BlIiwicGxhdGZvcm0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/debug-build.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxNQUFNQSxjQUFlLE9BQU9DLHFCQUFxQixlQUFlQTtBQUV6QyxDQUN2Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9idWlsZC9ucG0vZXNtL2RlYnVnLWJ1aWxkLmpzP2E1NDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/eventbuilder.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/eventbuilder.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eventFromException: () => (/* binding */ eventFromException),\n/* harmony export */   eventFromMessage: () => (/* binding */ eventFromMessage),\n/* harmony export */   eventFromUnknownInput: () => (/* binding */ eventFromUnknownInput),\n/* harmony export */   exceptionFromError: () => (/* binding */ exceptionFromError),\n/* harmony export */   extractMessage: () => (/* binding */ extractMessage),\n/* harmony export */   extractType: () => (/* binding */ extractType)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n/**\n * This function creates an exception from a JavaScript Error\n */ function exceptionFromError(stackParser, ex) {\n    // Get the frames first since Opera can lose the stack if we touch anything else first\n    const frames = parseStackFrames(stackParser, ex);\n    const exception = {\n        type: extractType(ex),\n        value: extractMessage(ex)\n    };\n    if (frames.length) {\n        exception.stacktrace = {\n            frames\n        };\n    }\n    if (exception.type === undefined && exception.value === \"\") {\n        exception.value = \"Unrecoverable error caught\";\n    }\n    return exception;\n}\nfunction eventFromPlainObject(stackParser, exception, syntheticException, isUnhandledRejection) {\n    const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    const normalizeDepth = client && client.getOptions().normalizeDepth;\n    // If we can, we extract an exception from the object properties\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    const extra = {\n        __serialized__: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.normalizeToSize)(exception, normalizeDepth)\n    };\n    if (errorFromProp) {\n        return {\n            exception: {\n                values: [\n                    exceptionFromError(stackParser, errorFromProp)\n                ]\n            },\n            extra\n        };\n    }\n    const event = {\n        exception: {\n            values: [\n                {\n                    type: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isEvent)(exception) ? exception.constructor.name : isUnhandledRejection ? \"UnhandledRejection\" : \"Error\",\n                    value: getNonErrorObjectExceptionValue(exception, {\n                        isUnhandledRejection\n                    })\n                }\n            ]\n        },\n        extra\n    };\n    if (syntheticException) {\n        const frames = parseStackFrames(stackParser, syntheticException);\n        if (frames.length) {\n            // event.exception.values[0] has been set above\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            event.exception.values[0].stacktrace = {\n                frames\n            };\n        }\n    }\n    return event;\n}\nfunction eventFromError(stackParser, ex) {\n    return {\n        exception: {\n            values: [\n                exceptionFromError(stackParser, ex)\n            ]\n        }\n    };\n}\n/** Parses stack frames from an error */ function parseStackFrames(stackParser, ex) {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    const stacktrace = ex.stacktrace || ex.stack || \"\";\n    const skipLines = getSkipFirstStackStringLines(ex);\n    const framesToPop = getPopFirstTopFrames(ex);\n    try {\n        return stackParser(stacktrace, skipLines, framesToPop);\n    } catch (e) {\n    // no-empty\n    }\n    return [];\n}\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n/**\n * Certain known React errors contain links that would be falsely\n * parsed as frames. This function check for these errors and\n * returns number of the stack string lines to skip.\n */ function getSkipFirstStackStringLines(ex) {\n    if (ex && reactMinifiedRegexp.test(ex.message)) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * If error has `framesToPop` property, it means that the\n * creator tells us the first x frames will be useless\n * and should be discarded. Typically error from wrapper function\n * which don't point to the actual location in the developer's code.\n *\n * Example: https://github.com/zertosh/invariant/blob/master/invariant.js#L46\n */ function getPopFirstTopFrames(ex) {\n    if (typeof ex.framesToPop === \"number\") {\n        return ex.framesToPop;\n    }\n    return 0;\n}\n// https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Exception\n// @ts-expect-error - WebAssembly.Exception is a valid class\nfunction isWebAssemblyException(exception) {\n    // Check for support\n    // @ts-expect-error - WebAssembly.Exception is a valid class\n    if (typeof WebAssembly !== \"undefined\" && typeof WebAssembly.Exception !== \"undefined\") {\n        // @ts-expect-error - WebAssembly.Exception is a valid class\n        return exception instanceof WebAssembly.Exception;\n    } else {\n        return false;\n    }\n}\n/**\n * Extracts from errors what we use as the exception `type` in error events.\n *\n * Usually, this is the `name` property on Error objects but WASM errors need to be treated differently.\n */ function extractType(ex) {\n    const name = ex && ex.name;\n    // The name for WebAssembly.Exception Errors needs to be extracted differently.\n    // Context: https://github.com/getsentry/sentry-javascript/issues/13787\n    if (!name && isWebAssemblyException(ex)) {\n        // Emscripten sets array[type, message] to the \"message\" property on the WebAssembly.Exception object\n        const hasTypeInMessage = ex.message && Array.isArray(ex.message) && ex.message.length == 2;\n        return hasTypeInMessage ? ex.message[0] : \"WebAssembly.Exception\";\n    }\n    return name;\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */ function extractMessage(ex) {\n    const message = ex && ex.message;\n    if (!message) {\n        return \"No error message\";\n    }\n    if (message.error && typeof message.error.message === \"string\") {\n        return message.error.message;\n    }\n    // Emscripten sets array[type, message] to the \"message\" property on the WebAssembly.Exception object\n    if (isWebAssemblyException(ex) && Array.isArray(ex.message) && ex.message.length == 2) {\n        return ex.message[1];\n    }\n    return message;\n}\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */ function eventFromException(stackParser, exception, hint, attachStacktrace) {\n    const syntheticException = hint && hint.syntheticException || undefined;\n    const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event); // defaults to { type: 'generic', handled: true }\n    event.level = \"error\";\n    if (hint && hint.event_id) {\n        event.event_id = hint.event_id;\n    }\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.resolvedSyncPromise)(event);\n}\n/**\n * Builds and Event from a Message\n * @hidden\n */ function eventFromMessage(stackParser, message, level = \"info\", hint, attachStacktrace) {\n    const syntheticException = hint && hint.syntheticException || undefined;\n    const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n    event.level = level;\n    if (hint && hint.event_id) {\n        event.event_id = hint.event_id;\n    }\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.resolvedSyncPromise)(event);\n}\n/**\n * @hidden\n */ function eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace, isUnhandledRejection) {\n    let event;\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isErrorEvent)(exception) && exception.error) {\n        // If it is an ErrorEvent with `error` property, extract it to get actual Error\n        const errorEvent = exception;\n        return eventFromError(stackParser, errorEvent.error);\n    }\n    // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n    // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n    // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n    //\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isDOMError)(exception) || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isDOMException)(exception)) {\n        const domException = exception;\n        if (\"stack\" in exception) {\n            event = eventFromError(stackParser, exception);\n        } else {\n            const name = domException.name || ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isDOMError)(domException) ? \"DOMError\" : \"DOMException\");\n            const message = domException.message ? `${name}: ${domException.message}` : name;\n            event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionTypeValue)(event, message);\n        }\n        if (\"code\" in domException) {\n            // eslint-disable-next-line deprecation/deprecation\n            event.tags = {\n                ...event.tags,\n                \"DOMException.code\": `${domException.code}`\n            };\n        }\n        return event;\n    }\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isError)(exception)) {\n        // we have a real Error object, do nothing\n        return eventFromError(stackParser, exception);\n    }\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(exception) || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isEvent)(exception)) {\n        // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n        // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n        // group on any key/value change.\n        const objectException = exception;\n        event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, {\n            synthetic: true\n        });\n        return event;\n    }\n    // If none of previous checks were valid, then it means that it's not:\n    // - an instance of DOMError\n    // - an instance of DOMException\n    // - an instance of Event\n    // - an instance of Error\n    // - a valid ErrorEvent (one with an error property)\n    // - a plain Object\n    //\n    // So bail out and capture it as a simple message:\n    event = eventFromString(stackParser, exception, syntheticException, attachStacktrace);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionTypeValue)(event, `${exception}`, undefined);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, {\n        synthetic: true\n    });\n    return event;\n}\nfunction eventFromString(stackParser, message, syntheticException, attachStacktrace) {\n    const event = {};\n    if (attachStacktrace && syntheticException) {\n        const frames = parseStackFrames(stackParser, syntheticException);\n        if (frames.length) {\n            event.exception = {\n                values: [\n                    {\n                        value: message,\n                        stacktrace: {\n                            frames\n                        }\n                    }\n                ]\n            };\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, {\n            synthetic: true\n        });\n    }\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isParameterizedString)(message)) {\n        const { __sentry_template_string__, __sentry_template_values__ } = message;\n        event.logentry = {\n            message: __sentry_template_string__,\n            params: __sentry_template_values__\n        };\n        return event;\n    }\n    event.message = message;\n    return event;\n}\nfunction getNonErrorObjectExceptionValue(exception, { isUnhandledRejection }) {\n    const keys = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.extractExceptionKeysForMessage)(exception);\n    const captureType = isUnhandledRejection ? \"promise rejection\" : \"exception\";\n    // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n    // We still want to try to get a decent message for these cases\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isErrorEvent)(exception)) {\n        return `Event \\`ErrorEvent\\` captured as ${captureType} with message \\`${exception.message}\\``;\n    }\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.isEvent)(exception)) {\n        const className = getObjectClassName(exception);\n        return `Event \\`${className}\\` (type=${exception.type}) captured as ${captureType}`;\n    }\n    return `Object captured as ${captureType} with keys: ${keys}`;\n}\nfunction getObjectClassName(obj) {\n    try {\n        const prototype = Object.getPrototypeOf(obj);\n        return prototype ? prototype.constructor.name : undefined;\n    } catch (e) {\n    // ignore errors here\n    }\n}\n/** If a plain object has a property that is an `Error`, return this error. */ function getErrorPropertyFromObject(obj) {\n    for(const prop in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            const value = obj[prop];\n            if (value instanceof Error) {\n                return value;\n            }\n        }\n    }\n    return undefined;\n}\n //# sourceMappingURL=eventbuilder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/eventbuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WINDOW: () => (/* binding */ WINDOW),\n/* harmony export */   ignoreNextOnError: () => (/* binding */ ignoreNextOnError),\n/* harmony export */   shouldIgnoreOnError: () => (/* binding */ shouldIgnoreOnError),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/exports.js\");\n\nconst WINDOW = _sentry_core__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\nlet ignoreOnError = 0;\n/**\n * @hidden\n */ function shouldIgnoreOnError() {\n    return ignoreOnError > 0;\n}\n/**\n * @hidden\n */ function ignoreNextOnError() {\n    // onerror should trigger before setTimeout\n    ignoreOnError++;\n    setTimeout(()=>{\n        ignoreOnError--;\n    });\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */ function wrap(fn, options = {}) {\n    // for future readers what this does is wrap a function and then create\n    // a bi-directional wrapping between them.\n    //\n    // example: wrapped = wrap(original);\n    //  original.__sentry_wrapped__ -> wrapped\n    //  wrapped.__sentry_original__ -> original\n    function isFunction(fn) {\n        return typeof fn === \"function\";\n    }\n    if (!isFunction(fn)) {\n        return fn;\n    }\n    try {\n        // if we're dealing with a function that was previously wrapped, return\n        // the original wrapper.\n        const wrapper = fn.__sentry_wrapped__;\n        if (wrapper) {\n            if (typeof wrapper === \"function\") {\n                return wrapper;\n            } else {\n                // If we find that the `__sentry_wrapped__` function is not a function at the time of accessing it, it means\n                // that something messed with it. In that case we want to return the originally passed function.\n                return fn;\n            }\n        }\n        // We don't wanna wrap it twice\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getOriginalFunction)(fn)) {\n            return fn;\n        }\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        // Bail on wrapping and return the function as-is (defers to window.onerror).\n        return fn;\n    }\n    // Wrap the function itself\n    // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n    const sentryWrapped = function(...args) {\n        try {\n            // Also wrap arguments that are themselves functions\n            const wrappedArguments = args.map((arg)=>wrap(arg, options));\n            // Attempt to invoke user-land function\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n            //       means the sentry.javascript SDK caught an error invoking your application code. This\n            //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n            return fn.apply(this, wrappedArguments);\n        } catch (ex) {\n            ignoreNextOnError();\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.withScope)((scope)=>{\n                scope.addEventProcessor((event)=>{\n                    if (options.mechanism) {\n                        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionTypeValue)(event, undefined, undefined);\n                        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, options.mechanism);\n                    }\n                    event.extra = {\n                        ...event.extra,\n                        arguments: args\n                    };\n                    return event;\n                });\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureException)(ex);\n            });\n            throw ex;\n        }\n    };\n    // Wrap the wrapped function in a proxy, to ensure any other properties of the original function remain available\n    try {\n        for(const property in fn){\n            if (Object.prototype.hasOwnProperty.call(fn, property)) {\n                sentryWrapped[property] = fn[property];\n            }\n        }\n    } catch (e2) {\n    // Accessing some objects may throw\n    // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n    }\n    // Signal that this function has been wrapped/filled already\n    // for both debugging and to prevent it to being wrapped/filled twice\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.markFunctionWrapped)(sentryWrapped, fn);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addNonEnumerableProperty)(fn, \"__sentry_wrapped__\", sentryWrapped);\n    // Restore original function name (not all browsers allow that)\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, \"name\");\n        if (descriptor.configurable) {\n            Object.defineProperty(sentryWrapped, \"name\", {\n                get () {\n                    return fn.name;\n                }\n            });\n        }\n    } catch (e3) {\n    // This may throw if e.g. the descriptor does not exist, or a browser does not allow redefining `name`.\n    // to save some bytes we simply try-catch this\n    }\n    return sentryWrapped;\n}\n //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   breadcrumbsIntegration: () => (/* binding */ breadcrumbsIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry-internal/browser-utils */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js\");\n/* harmony import */ var _sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry-internal/browser-utils */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js\");\n/* harmony import */ var _sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry-internal/browser-utils */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/breadcrumbs.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/browser.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/severity.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/url.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n\n\n\n\n/* eslint-disable max-lines */ /** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */ const MAX_ALLOWED_STRING_LENGTH = 1024;\nconst INTEGRATION_NAME = \"Breadcrumbs\";\nconst _breadcrumbsIntegration = (options = {})=>{\n    const _options = {\n        console: true,\n        dom: true,\n        fetch: true,\n        history: true,\n        sentry: true,\n        xhr: true,\n        ...options\n    };\n    return {\n        name: INTEGRATION_NAME,\n        setup (client) {\n            if (_options.console) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addConsoleInstrumentationHandler)(_getConsoleBreadcrumbHandler(client));\n            }\n            if (_options.dom) {\n                (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_1__.addClickKeypressInstrumentationHandler)(_getDomBreadcrumbHandler(client, _options.dom));\n            }\n            if (_options.xhr) {\n                (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_2__.addXhrInstrumentationHandler)(_getXhrBreadcrumbHandler(client));\n            }\n            if (_options.fetch) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addFetchInstrumentationHandler)(_getFetchBreadcrumbHandler(client));\n            }\n            if (_options.history) {\n                (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_4__.addHistoryInstrumentationHandler)(_getHistoryBreadcrumbHandler(client));\n            }\n            if (_options.sentry) {\n                client.on(\"beforeSendEvent\", _getSentryBreadcrumbHandler(client));\n            }\n        }\n    };\n};\nconst breadcrumbsIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.defineIntegration)(_breadcrumbsIntegration);\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */ function _getSentryBreadcrumbHandler(client) {\n    return function addSentryBreadcrumb(event) {\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.getClient)() !== client) {\n            return;\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)({\n            category: `sentry.${event.type === \"transaction\" ? \"transaction\" : \"event\"}`,\n            event_id: event.event_id,\n            level: event.level,\n            message: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.getEventDescription)(event)\n        }, {\n            event\n        });\n    };\n}\n/**\n * A HOC that creates a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */ function _getDomBreadcrumbHandler(client, dom) {\n    return function _innerDomBreadcrumb(handlerData) {\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.getClient)() !== client) {\n            return;\n        }\n        let target;\n        let componentName;\n        let keyAttrs = typeof dom === \"object\" ? dom.serializeAttribute : undefined;\n        let maxStringLength = typeof dom === \"object\" && typeof dom.maxStringLength === \"number\" ? dom.maxStringLength : undefined;\n        if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_9__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_10__.logger.warn(`\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`);\n            maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n        }\n        if (typeof keyAttrs === \"string\") {\n            keyAttrs = [\n                keyAttrs\n            ];\n        }\n        // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n        try {\n            const event = handlerData.event;\n            const element = _isEvent(event) ? event.target : event;\n            target = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_11__.htmlTreeAsString)(element, {\n                keyAttrs,\n                maxStringLength\n            });\n            componentName = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_11__.getComponentName)(element);\n        } catch (e) {\n            target = \"<unknown>\";\n        }\n        if (target.length === 0) {\n            return;\n        }\n        const breadcrumb = {\n            category: `ui.${handlerData.name}`,\n            message: target\n        };\n        if (componentName) {\n            breadcrumb.data = {\n                \"ui.component_name\": componentName\n            };\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)(breadcrumb, {\n            event: handlerData.event,\n            name: handlerData.name,\n            global: handlerData.global\n        });\n    };\n}\n/**\n * Creates breadcrumbs from console API calls\n */ function _getConsoleBreadcrumbHandler(client) {\n    return function _consoleBreadcrumb(handlerData) {\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.getClient)() !== client) {\n            return;\n        }\n        const breadcrumb = {\n            category: \"console\",\n            data: {\n                arguments: handlerData.args,\n                logger: \"console\"\n            },\n            level: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_12__.severityLevelFromString)(handlerData.level),\n            message: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_13__.safeJoin)(handlerData.args, \" \")\n        };\n        if (handlerData.level === \"assert\") {\n            if (handlerData.args[0] === false) {\n                breadcrumb.message = `Assertion failed: ${(0,_sentry_core__WEBPACK_IMPORTED_MODULE_13__.safeJoin)(handlerData.args.slice(1), \" \") || \"console.assert\"}`;\n                breadcrumb.data.arguments = handlerData.args.slice(1);\n            } else {\n                // Don't capture a breadcrumb for passed assertions\n                return;\n            }\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)(breadcrumb, {\n            input: handlerData.args,\n            level: handlerData.level\n        });\n    };\n}\n/**\n * Creates breadcrumbs from XHR API calls\n */ function _getXhrBreadcrumbHandler(client) {\n    return function _xhrBreadcrumb(handlerData) {\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.getClient)() !== client) {\n            return;\n        }\n        const { startTimestamp, endTimestamp } = handlerData;\n        const sentryXhrData = handlerData.xhr[_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_2__.SENTRY_XHR_DATA_KEY];\n        // We only capture complete, non-sentry requests\n        if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n            return;\n        }\n        const { method, url, status_code, body } = sentryXhrData;\n        const data = {\n            method,\n            url,\n            status_code\n        };\n        const hint = {\n            xhr: handlerData.xhr,\n            input: body,\n            startTimestamp,\n            endTimestamp\n        };\n        const level = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.getBreadcrumbLogLevelFromHttpStatusCode)(status_code);\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)({\n            category: \"xhr\",\n            data,\n            type: \"http\",\n            level\n        }, hint);\n    };\n}\n/**\n * Creates breadcrumbs from fetch API calls\n */ function _getFetchBreadcrumbHandler(client) {\n    return function _fetchBreadcrumb(handlerData) {\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.getClient)() !== client) {\n            return;\n        }\n        const { startTimestamp, endTimestamp } = handlerData;\n        // We only capture complete fetch requests\n        if (!endTimestamp) {\n            return;\n        }\n        if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === \"POST\") {\n            // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n            return;\n        }\n        if (handlerData.error) {\n            const data = handlerData.fetchData;\n            const hint = {\n                data: handlerData.error,\n                input: handlerData.args,\n                startTimestamp,\n                endTimestamp\n            };\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)({\n                category: \"fetch\",\n                data,\n                level: \"error\",\n                type: \"http\"\n            }, hint);\n        } else {\n            const response = handlerData.response;\n            const data = {\n                ...handlerData.fetchData,\n                status_code: response && response.status\n            };\n            const hint = {\n                input: handlerData.args,\n                response,\n                startTimestamp,\n                endTimestamp\n            };\n            const level = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.getBreadcrumbLogLevelFromHttpStatusCode)(data.status_code);\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)({\n                category: \"fetch\",\n                data,\n                type: \"http\",\n                level\n            }, hint);\n        }\n    };\n}\n/**\n * Creates breadcrumbs from history API calls\n */ function _getHistoryBreadcrumbHandler(client) {\n    return function _historyBreadcrumb(handlerData) {\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.getClient)() !== client) {\n            return;\n        }\n        let from = handlerData.from;\n        let to = handlerData.to;\n        const parsedLoc = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_15__.parseUrl)(_helpers_js__WEBPACK_IMPORTED_MODULE_16__.WINDOW.location.href);\n        let parsedFrom = from ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_15__.parseUrl)(from) : undefined;\n        const parsedTo = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_15__.parseUrl)(to);\n        // Initial pushState doesn't provide `from` information\n        if (!parsedFrom || !parsedFrom.path) {\n            parsedFrom = parsedLoc;\n        }\n        // Use only the path component of the URL if the URL matches the current\n        // document (almost all the time when using pushState)\n        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n            to = parsedTo.relative;\n        }\n        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n            from = parsedFrom.relative;\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.addBreadcrumb)({\n            category: \"navigation\",\n            data: {\n                from,\n                to\n            }\n        });\n    };\n}\nfunction _isEvent(event) {\n    return !!event && !!event.target;\n}\n //# sourceMappingURL=breadcrumbs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/browserapierrors.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/integrations/browserapierrors.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserApiErrorsIntegration: () => (/* binding */ browserApiErrorsIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n\n\nconst DEFAULT_EVENT_TARGET = [\n    \"EventTarget\",\n    \"Window\",\n    \"Node\",\n    \"ApplicationCache\",\n    \"AudioTrackList\",\n    \"BroadcastChannel\",\n    \"ChannelMergerNode\",\n    \"CryptoOperation\",\n    \"EventSource\",\n    \"FileReader\",\n    \"HTMLUnknownElement\",\n    \"IDBDatabase\",\n    \"IDBRequest\",\n    \"IDBTransaction\",\n    \"KeyOperation\",\n    \"MediaController\",\n    \"MessagePort\",\n    \"ModalWindow\",\n    \"Notification\",\n    \"SVGElementInstance\",\n    \"Screen\",\n    \"SharedWorker\",\n    \"TextTrack\",\n    \"TextTrackCue\",\n    \"TextTrackList\",\n    \"WebSocket\",\n    \"WebSocketWorker\",\n    \"Worker\",\n    \"XMLHttpRequest\",\n    \"XMLHttpRequestEventTarget\",\n    \"XMLHttpRequestUpload\"\n];\nconst INTEGRATION_NAME = \"BrowserApiErrors\";\nconst _browserApiErrorsIntegration = (options = {})=>{\n    const _options = {\n        XMLHttpRequest: true,\n        eventTarget: true,\n        requestAnimationFrame: true,\n        setInterval: true,\n        setTimeout: true,\n        ...options\n    };\n    return {\n        name: INTEGRATION_NAME,\n        // TODO: This currently only works for the first client this is setup\n        // We may want to adjust this to check for client etc.\n        setupOnce () {\n            if (_options.setTimeout) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW, \"setTimeout\", _wrapTimeFunction);\n            }\n            if (_options.setInterval) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW, \"setInterval\", _wrapTimeFunction);\n            }\n            if (_options.requestAnimationFrame) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW, \"requestAnimationFrame\", _wrapRAF);\n            }\n            if (_options.XMLHttpRequest && \"XMLHttpRequest\" in _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(XMLHttpRequest.prototype, \"send\", _wrapXHR);\n            }\n            const eventTargetOption = _options.eventTarget;\n            if (eventTargetOption) {\n                const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n                eventTarget.forEach(_wrapEventTarget);\n            }\n        }\n    };\n};\n/**\n * Wrap timer functions and event targets to catch errors and provide better meta data.\n */ const browserApiErrorsIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_browserApiErrorsIntegration);\nfunction _wrapTimeFunction(original) {\n    return function(...args) {\n        const originalCallback = args[0];\n        args[0] = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.wrap)(originalCallback, {\n            mechanism: {\n                data: {\n                    function: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(original)\n                },\n                handled: false,\n                type: \"instrument\"\n            }\n        });\n        return original.apply(this, args);\n    };\n}\nfunction _wrapRAF(original) {\n    return function(callback) {\n        return original.apply(this, [\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.wrap)(callback, {\n                mechanism: {\n                    data: {\n                        function: \"requestAnimationFrame\",\n                        handler: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(original)\n                    },\n                    handled: false,\n                    type: \"instrument\"\n                }\n            })\n        ]);\n    };\n}\nfunction _wrapXHR(originalSend) {\n    return function(...args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const xhr = this;\n        const xmlHttpRequestProps = [\n            \"onload\",\n            \"onerror\",\n            \"onprogress\",\n            \"onreadystatechange\"\n        ];\n        xmlHttpRequestProps.forEach((prop)=>{\n            if (prop in xhr && typeof xhr[prop] === \"function\") {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(xhr, prop, function(original) {\n                    const wrapOptions = {\n                        mechanism: {\n                            data: {\n                                function: prop,\n                                handler: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(original)\n                            },\n                            handled: false,\n                            type: \"instrument\"\n                        }\n                    };\n                    // If Instrument integration has been called before BrowserApiErrors, get the name of original function\n                    const originalFunction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getOriginalFunction)(original);\n                    if (originalFunction) {\n                        wrapOptions.mechanism.data.handler = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(originalFunction);\n                    }\n                    // Otherwise wrap directly\n                    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.wrap)(original, wrapOptions);\n                });\n            }\n        });\n        return originalSend.apply(this, args);\n    };\n}\nfunction _wrapEventTarget(target) {\n    const globalObject = _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW;\n    const targetObj = globalObject[target];\n    const proto = targetObj && targetObj.prototype;\n    // eslint-disable-next-line no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty(\"addEventListener\")) {\n        return;\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(proto, \"addEventListener\", function(original) {\n        return function(eventName, fn, options) {\n            try {\n                if (isEventListenerObject(fn)) {\n                    // ESlint disable explanation:\n                    //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n                    //  introduce a bug here, because bind returns a new function that doesn't have our\n                    //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n                    //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n                    // eslint-disable-next-line @typescript-eslint/unbound-method\n                    fn.handleEvent = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.wrap)(fn.handleEvent, {\n                        mechanism: {\n                            data: {\n                                function: \"handleEvent\",\n                                handler: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(fn),\n                                target\n                            },\n                            handled: false,\n                            type: \"instrument\"\n                        }\n                    });\n                }\n            } catch (e2) {\n            // can sometimes get 'Permission denied to access property \"handle Event'\n            }\n            return original.apply(this, [\n                eventName,\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.wrap)(fn, {\n                    mechanism: {\n                        data: {\n                            function: \"addEventListener\",\n                            handler: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(fn),\n                            target\n                        },\n                        handled: false,\n                        type: \"instrument\"\n                    }\n                }),\n                options\n            ]);\n        };\n    });\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.fill)(proto, \"removeEventListener\", function(originalRemoveEventListener) {\n        return function(eventName, fn, options) {\n            /**\n       * There are 2 possible scenarios here:\n       *\n       * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n       * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n       * as a pass-through, and call original `removeEventListener` with it.\n       *\n       * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n       * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n       * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n       * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n       * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n       *\n       * When someone adds a handler prior to initialization, and then do it again, but after,\n       * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n       * to get rid of the initial handler and it'd stick there forever.\n       */ try {\n                const originalEventHandler = fn.__sentry_wrapped__;\n                if (originalEventHandler) {\n                    originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n                }\n            } catch (e) {\n            // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n            }\n            return originalRemoveEventListener.call(this, eventName, fn, options);\n        };\n    });\n}\nfunction isEventListenerObject(obj) {\n    return typeof obj.handleEvent === \"function\";\n}\n //# sourceMappingURL=browserapierrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/browserapierrors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/browsersession.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/integrations/browsersession.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserSessionIntegration: () => (/* binding */ browserSessionIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry-internal/browser-utils */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n\n\n\n\n/**\n * When added, automatically creates sessions which allow you to track adoption and crashes (crash free rate) in your Releases in Sentry.\n * More information: https://docs.sentry.io/product/releases/health/\n *\n * Note: In order for session tracking to work, you need to set up Releases: https://docs.sentry.io/product/releases/\n */ const browserSessionIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(()=>{\n    return {\n        name: \"BrowserSession\",\n        setupOnce () {\n            if (typeof _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document === \"undefined\") {\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Using the `browserSessionIntegration` in non-browser environments is not supported.\");\n                return;\n            }\n            // The session duration for browser sessions does not track a meaningful\n            // concept that can be used as a metric.\n            // Automatically captured sessions are akin to page views, and thus we\n            // discard their duration.\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.startSession)({\n                ignoreDuration: true\n            });\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureSession)();\n            // We want to create a session for every navigation as well\n            (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_5__.addHistoryInstrumentationHandler)(({ from, to })=>{\n                // Don't create an additional session for the initial route or if the location did not change\n                if (from !== undefined && from !== to) {\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.startSession)({\n                        ignoreDuration: true\n                    });\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureSession)();\n                }\n            });\n        }\n    };\n});\n //# sourceMappingURL=browsersession.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vaW50ZWdyYXRpb25zL2Jyb3dzZXJzZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBa0Y7QUFDSztBQUN2QztBQUNUO0FBRXZDOzs7OztDQUtDLEdBQ0QsTUFBTU8sNEJBQTRCTiwrREFBaUJBLENBQUM7SUFDbEQsT0FBTztRQUNMTyxNQUFNO1FBQ05DO1lBQ0UsSUFBSSxPQUFPSCwrQ0FBTUEsQ0FBQ0ksUUFBUSxLQUFLLGFBQWE7Z0JBQzFDTCx3REFBV0EsSUFDVEgsZ0RBQU1BLENBQUNTLElBQUksQ0FBQztnQkFDZDtZQUNGO1lBRUEsd0VBQXdFO1lBQ3hFLHdDQUF3QztZQUN4QyxzRUFBc0U7WUFDdEUsMEJBQTBCO1lBQzFCUiwwREFBWUEsQ0FBQztnQkFBRVMsZ0JBQWdCO1lBQUs7WUFDcENSLDREQUFjQTtZQUVkLDJEQUEyRDtZQUMzREosZ0dBQWdDQSxDQUFDLENBQUMsRUFBRWEsSUFBSSxFQUFFQyxFQUFFLEVBQUU7Z0JBQzVDLDZGQUE2RjtnQkFDN0YsSUFBSUQsU0FBU0UsYUFBYUYsU0FBU0MsSUFBSTtvQkFDckNYLDBEQUFZQSxDQUFDO3dCQUFFUyxnQkFBZ0I7b0JBQUs7b0JBQ3BDUiw0REFBY0E7Z0JBQ2hCO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFcUMsQ0FDckMsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvYnVpbGQvbnBtL2VzbS9pbnRlZ3JhdGlvbnMvYnJvd3NlcnNlc3Npb24uanM/N2Y4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRIaXN0b3J5SW5zdHJ1bWVudGF0aW9uSGFuZGxlciB9IGZyb20gJ0BzZW50cnktaW50ZXJuYWwvYnJvd3Nlci11dGlscyc7XG5pbXBvcnQgeyBkZWZpbmVJbnRlZ3JhdGlvbiwgbG9nZ2VyLCBzdGFydFNlc3Npb24sIGNhcHR1cmVTZXNzaW9uIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5cbi8qKlxuICogV2hlbiBhZGRlZCwgYXV0b21hdGljYWxseSBjcmVhdGVzIHNlc3Npb25zIHdoaWNoIGFsbG93IHlvdSB0byB0cmFjayBhZG9wdGlvbiBhbmQgY3Jhc2hlcyAoY3Jhc2ggZnJlZSByYXRlKSBpbiB5b3VyIFJlbGVhc2VzIGluIFNlbnRyeS5cbiAqIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcHJvZHVjdC9yZWxlYXNlcy9oZWFsdGgvXG4gKlxuICogTm90ZTogSW4gb3JkZXIgZm9yIHNlc3Npb24gdHJhY2tpbmcgdG8gd29yaywgeW91IG5lZWQgdG8gc2V0IHVwIFJlbGVhc2VzOiBodHRwczovL2RvY3Muc2VudHJ5LmlvL3Byb2R1Y3QvcmVsZWFzZXMvXG4gKi9cbmNvbnN0IGJyb3dzZXJTZXNzaW9uSW50ZWdyYXRpb24gPSBkZWZpbmVJbnRlZ3JhdGlvbigoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0Jyb3dzZXJTZXNzaW9uJyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpZiAodHlwZW9mIFdJTkRPVy5kb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgREVCVUdfQlVJTEQgJiZcbiAgICAgICAgICBsb2dnZXIud2FybignVXNpbmcgdGhlIGBicm93c2VyU2Vzc2lvbkludGVncmF0aW9uYCBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgc2Vzc2lvbiBkdXJhdGlvbiBmb3IgYnJvd3NlciBzZXNzaW9ucyBkb2VzIG5vdCB0cmFjayBhIG1lYW5pbmdmdWxcbiAgICAgIC8vIGNvbmNlcHQgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1ldHJpYy5cbiAgICAgIC8vIEF1dG9tYXRpY2FsbHkgY2FwdHVyZWQgc2Vzc2lvbnMgYXJlIGFraW4gdG8gcGFnZSB2aWV3cywgYW5kIHRodXMgd2VcbiAgICAgIC8vIGRpc2NhcmQgdGhlaXIgZHVyYXRpb24uXG4gICAgICBzdGFydFNlc3Npb24oeyBpZ25vcmVEdXJhdGlvbjogdHJ1ZSB9KTtcbiAgICAgIGNhcHR1cmVTZXNzaW9uKCk7XG5cbiAgICAgIC8vIFdlIHdhbnQgdG8gY3JlYXRlIGEgc2Vzc2lvbiBmb3IgZXZlcnkgbmF2aWdhdGlvbiBhcyB3ZWxsXG4gICAgICBhZGRIaXN0b3J5SW5zdHJ1bWVudGF0aW9uSGFuZGxlcigoeyBmcm9tLCB0byB9KSA9PiB7XG4gICAgICAgIC8vIERvbid0IGNyZWF0ZSBhbiBhZGRpdGlvbmFsIHNlc3Npb24gZm9yIHRoZSBpbml0aWFsIHJvdXRlIG9yIGlmIHRoZSBsb2NhdGlvbiBkaWQgbm90IGNoYW5nZVxuICAgICAgICBpZiAoZnJvbSAhPT0gdW5kZWZpbmVkICYmIGZyb20gIT09IHRvKSB7XG4gICAgICAgICAgc3RhcnRTZXNzaW9uKHsgaWdub3JlRHVyYXRpb246IHRydWUgfSk7XG4gICAgICAgICAgY2FwdHVyZVNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnQgeyBicm93c2VyU2Vzc2lvbkludGVncmF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2Vyc2Vzc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJhZGRIaXN0b3J5SW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImRlZmluZUludGVncmF0aW9uIiwibG9nZ2VyIiwic3RhcnRTZXNzaW9uIiwiY2FwdHVyZVNlc3Npb24iLCJERUJVR19CVUlMRCIsIldJTkRPVyIsImJyb3dzZXJTZXNzaW9uSW50ZWdyYXRpb24iLCJuYW1lIiwic2V0dXBPbmNlIiwiZG9jdW1lbnQiLCJ3YXJuIiwiaWdub3JlRHVyYXRpb24iLCJmcm9tIiwidG8iLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/browsersession.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalHandlersIntegration: () => (/* binding */ globalHandlersIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/browser.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js\");\n/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../eventbuilder.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/eventbuilder.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n\n\n\n\nconst INTEGRATION_NAME = \"GlobalHandlers\";\nconst _globalHandlersIntegration = (options = {})=>{\n    const _options = {\n        onerror: true,\n        onunhandledrejection: true,\n        ...options\n    };\n    return {\n        name: INTEGRATION_NAME,\n        setupOnce () {\n            Error.stackTraceLimit = 50;\n        },\n        setup (client) {\n            if (_options.onerror) {\n                _installGlobalOnErrorHandler(client);\n                globalHandlerLog(\"onerror\");\n            }\n            if (_options.onunhandledrejection) {\n                _installGlobalOnUnhandledRejectionHandler(client);\n                globalHandlerLog(\"onunhandledrejection\");\n            }\n        }\n    };\n};\nconst globalHandlersIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(_globalHandlersIntegration);\nfunction _installGlobalOnErrorHandler(client) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addGlobalErrorInstrumentationHandler)((data)=>{\n        const { stackParser, attachStacktrace } = getOptions();\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getClient)() !== client || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.shouldIgnoreOnError)()) {\n            return;\n        }\n        const { msg, url, line, column, error } = data;\n        const event = _enhanceEventWithInitialFrame((0,_eventbuilder_js__WEBPACK_IMPORTED_MODULE_4__.eventFromUnknownInput)(stackParser, error || msg, undefined, attachStacktrace, false), url, line, column);\n        event.level = \"error\";\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.captureEvent)(event, {\n            originalException: error,\n            mechanism: {\n                handled: false,\n                type: \"onerror\"\n            }\n        });\n    });\n}\nfunction _installGlobalOnUnhandledRejectionHandler(client) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.addGlobalUnhandledRejectionInstrumentationHandler)((e)=>{\n        const { stackParser, attachStacktrace } = getOptions();\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getClient)() !== client || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.shouldIgnoreOnError)()) {\n            return;\n        }\n        const error = _getUnhandledRejectionError(e);\n        const event = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.isPrimitive)(error) ? _eventFromRejectionWithPrimitive(error) : (0,_eventbuilder_js__WEBPACK_IMPORTED_MODULE_4__.eventFromUnknownInput)(stackParser, error, undefined, attachStacktrace, true);\n        event.level = \"error\";\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.captureEvent)(event, {\n            originalException: error,\n            mechanism: {\n                handled: false,\n                type: \"onunhandledrejection\"\n            }\n        });\n    });\n}\nfunction _getUnhandledRejectionError(error) {\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.isPrimitive)(error)) {\n        return error;\n    }\n    // dig the object of the rejection out of known event types\n    try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if (\"reason\" in error) {\n            return error.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        if (\"detail\" in error && \"reason\" in error.detail) {\n            return error.detail.reason;\n        }\n    } catch (e2) {} // eslint-disable-line no-empty\n    return error;\n}\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */ function _eventFromRejectionWithPrimitive(reason) {\n    return {\n        exception: {\n            values: [\n                {\n                    type: \"UnhandledRejection\",\n                    // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n                    value: `Non-Error promise rejection captured with value: ${String(reason)}`\n                }\n            ]\n        }\n    };\n}\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n    // event.exception\n    const e = event.exception = event.exception || {};\n    // event.exception.values\n    const ev = e.values = e.values || [];\n    // event.exception.values[0]\n    const ev0 = ev[0] = ev[0] || {};\n    // event.exception.values[0].stacktrace\n    const ev0s = ev0.stacktrace = ev0.stacktrace || {};\n    // event.exception.values[0].stacktrace.frames\n    const ev0sf = ev0s.frames = ev0s.frames || [];\n    const colno = column;\n    const lineno = line;\n    const filename = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.isString)(url) && url.length > 0 ? url : (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.getLocationHref)();\n    // event.exception.values[0].stacktrace.frames\n    if (ev0sf.length === 0) {\n        ev0sf.push({\n            colno,\n            filename,\n            function: _sentry_core__WEBPACK_IMPORTED_MODULE_9__.UNKNOWN_FUNCTION,\n            in_app: true,\n            lineno\n        });\n    }\n    return event;\n}\nfunction globalHandlerLog(type) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_10__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_11__.logger.log(`Global Handler attached: ${type}`);\n}\nfunction getOptions() {\n    const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getClient)();\n    const options = client && client.getOptions() || {\n        stackParser: ()=>[],\n        attachStacktrace: false\n    };\n    return options;\n}\n //# sourceMappingURL=globalhandlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/httpcontext.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/integrations/httpcontext.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpContextIntegration: () => (/* binding */ httpContextIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n\n\n/**\n * Collects information about HTTP request headers and\n * attaches them to the event.\n */ const httpContextIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(()=>{\n    return {\n        name: \"HttpContext\",\n        preprocessEvent (event) {\n            // if none of the information we want exists, don't bother\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.navigator && !_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.location && !_helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document) {\n                return;\n            }\n            // grab as much info as exists and add it to the event\n            const url = event.request && event.request.url || _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.location && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.location.href;\n            const { referrer } = _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document || {};\n            const { userAgent } = _helpers_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.navigator || {};\n            const headers = {\n                ...event.request && event.request.headers,\n                ...referrer && {\n                    Referer: referrer\n                },\n                ...userAgent && {\n                    \"User-Agent\": userAgent\n                }\n            };\n            const request = {\n                ...event.request,\n                ...url && {\n                    url\n                },\n                headers\n            };\n            event.request = request;\n        }\n    };\n});\n //# sourceMappingURL=httpcontext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vaW50ZWdyYXRpb25zL2h0dHBjb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNWO0FBRXZDOzs7Q0FHQyxHQUNELE1BQU1FLHlCQUF5QkYsK0RBQWlCQSxDQUFDO0lBQy9DLE9BQU87UUFDTEcsTUFBTTtRQUNOQyxpQkFBZ0JDLEtBQUs7WUFDbkIsMERBQTBEO1lBQzFELElBQUksQ0FBQ0osK0NBQU1BLENBQUNLLFNBQVMsSUFBSSxDQUFDTCwrQ0FBTUEsQ0FBQ00sUUFBUSxJQUFJLENBQUNOLCtDQUFNQSxDQUFDTyxRQUFRLEVBQUU7Z0JBQzdEO1lBQ0Y7WUFFQSxzREFBc0Q7WUFDdEQsTUFBTUMsTUFBTSxNQUFPQyxPQUFPLElBQUlMLE1BQU1LLE9BQU8sQ0FBQ0QsR0FBRyxJQUFNUiwrQ0FBTUEsQ0FBQ00sUUFBUSxJQUFJTiwrQ0FBTUEsQ0FBQ00sUUFBUSxDQUFDSSxJQUFJO1lBQzVGLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdYLCtDQUFNQSxDQUFDTyxRQUFRLElBQUksQ0FBQztZQUN6QyxNQUFNLEVBQUVLLFNBQVMsRUFBRSxHQUFHWiwrQ0FBTUEsQ0FBQ0ssU0FBUyxJQUFJLENBQUM7WUFFM0MsTUFBTVEsVUFBVTtnQkFDZCxHQUFJVCxNQUFNSyxPQUFPLElBQUlMLE1BQU1LLE9BQU8sQ0FBQ0ksT0FBTztnQkFDMUMsR0FBSUYsWUFBWTtvQkFBRUcsU0FBU0g7Z0JBQVMsQ0FBQztnQkFDckMsR0FBSUMsYUFBYTtvQkFBRSxjQUFjQTtnQkFBVSxDQUFDO1lBQzlDO1lBQ0EsTUFBTUgsVUFBVTtnQkFBRSxHQUFHTCxNQUFNSyxPQUFPO2dCQUFFLEdBQUlELE9BQU87b0JBQUVBO2dCQUFJLENBQUM7Z0JBQUdLO1lBQVE7WUFFakVULE1BQU1LLE9BQU8sR0FBR0E7UUFDbEI7SUFDRjtBQUNGO0FBRWtDLENBQ2xDLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vaW50ZWdyYXRpb25zL2h0dHBjb250ZXh0LmpzP2NjOTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5cbi8qKlxuICogQ29sbGVjdHMgaW5mb3JtYXRpb24gYWJvdXQgSFRUUCByZXF1ZXN0IGhlYWRlcnMgYW5kXG4gKiBhdHRhY2hlcyB0aGVtIHRvIHRoZSBldmVudC5cbiAqL1xuY29uc3QgaHR0cENvbnRleHRJbnRlZ3JhdGlvbiA9IGRlZmluZUludGVncmF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnSHR0cENvbnRleHQnLFxuICAgIHByZXByb2Nlc3NFdmVudChldmVudCkge1xuICAgICAgLy8gaWYgbm9uZSBvZiB0aGUgaW5mb3JtYXRpb24gd2Ugd2FudCBleGlzdHMsIGRvbid0IGJvdGhlclxuICAgICAgaWYgKCFXSU5ET1cubmF2aWdhdG9yICYmICFXSU5ET1cubG9jYXRpb24gJiYgIVdJTkRPVy5kb2N1bWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGdyYWIgYXMgbXVjaCBpbmZvIGFzIGV4aXN0cyBhbmQgYWRkIGl0IHRvIHRoZSBldmVudFxuICAgICAgY29uc3QgdXJsID0gKGV2ZW50LnJlcXVlc3QgJiYgZXZlbnQucmVxdWVzdC51cmwpIHx8IChXSU5ET1cubG9jYXRpb24gJiYgV0lORE9XLmxvY2F0aW9uLmhyZWYpO1xuICAgICAgY29uc3QgeyByZWZlcnJlciB9ID0gV0lORE9XLmRvY3VtZW50IHx8IHt9O1xuICAgICAgY29uc3QgeyB1c2VyQWdlbnQgfSA9IFdJTkRPVy5uYXZpZ2F0b3IgfHwge307XG5cbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIC4uLihldmVudC5yZXF1ZXN0ICYmIGV2ZW50LnJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgIC4uLihyZWZlcnJlciAmJiB7IFJlZmVyZXI6IHJlZmVycmVyIH0pLFxuICAgICAgICAuLi4odXNlckFnZW50ICYmIHsgJ1VzZXItQWdlbnQnOiB1c2VyQWdlbnQgfSksXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVxdWVzdCA9IHsgLi4uZXZlbnQucmVxdWVzdCwgLi4uKHVybCAmJiB7IHVybCB9KSwgaGVhZGVycyB9O1xuXG4gICAgICBldmVudC5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB9LFxuICB9O1xufSk7XG5cbmV4cG9ydCB7IGh0dHBDb250ZXh0SW50ZWdyYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBjb250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbImRlZmluZUludGVncmF0aW9uIiwiV0lORE9XIiwiaHR0cENvbnRleHRJbnRlZ3JhdGlvbiIsIm5hbWUiLCJwcmVwcm9jZXNzRXZlbnQiLCJldmVudCIsIm5hdmlnYXRvciIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJ1cmwiLCJyZXF1ZXN0IiwiaHJlZiIsInJlZmVycmVyIiwidXNlckFnZW50IiwiaGVhZGVycyIsIlJlZmVyZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/httpcontext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/linkederrors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/integrations/linkederrors.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   linkedErrorsIntegration: () => (/* binding */ linkedErrorsIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../eventbuilder.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/eventbuilder.js\");\n\n\nconst DEFAULT_KEY = \"cause\";\nconst DEFAULT_LIMIT = 5;\nconst INTEGRATION_NAME = \"LinkedErrors\";\nconst _linkedErrorsIntegration = (options = {})=>{\n    const limit = options.limit || DEFAULT_LIMIT;\n    const key = options.key || DEFAULT_KEY;\n    return {\n        name: INTEGRATION_NAME,\n        preprocessEvent (event, hint, client) {\n            const options = client.getOptions();\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.applyAggregateErrorsToEvent)(// This differs from the LinkedErrors integration in core by using a different exceptionFromError function\n            _eventbuilder_js__WEBPACK_IMPORTED_MODULE_1__.exceptionFromError, options.stackParser, options.maxValueLength, key, limit, event, hint);\n        }\n    };\n};\n/**\n * Aggregrate linked errors in an event.\n */ const linkedErrorsIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_linkedErrorsIntegration);\n //# sourceMappingURL=linkederrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThFO0FBQ3RCO0FBRXhELE1BQU1HLGNBQWM7QUFDcEIsTUFBTUMsZ0JBQWdCO0FBRXRCLE1BQU1DLG1CQUFtQjtBQUV6QixNQUFNQywyQkFBNEIsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7SUFDN0MsTUFBTUMsUUFBUUQsUUFBUUMsS0FBSyxJQUFJSjtJQUMvQixNQUFNSyxNQUFNRixRQUFRRSxHQUFHLElBQUlOO0lBRTNCLE9BQU87UUFDTE8sTUFBTUw7UUFDTk0saUJBQWdCQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsTUFBTTtZQUNqQyxNQUFNUCxVQUFVTyxPQUFPQyxVQUFVO1lBRWpDZCx5RUFBMkJBLENBQ3pCLDBHQUEwRztZQUMxR0MsZ0VBQWtCQSxFQUNsQkssUUFBUVMsV0FBVyxFQUNuQlQsUUFBUVUsY0FBYyxFQUN0QlIsS0FDQUQsT0FDQUksT0FDQUM7UUFFSjtJQUNGO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELE1BQU1LLDBCQUEwQmxCLCtEQUFpQkEsQ0FBQ007QUFFZixDQUNuQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9idWlsZC9ucG0vZXNtL2ludGVncmF0aW9ucy9saW5rZWRlcnJvcnMuanM/MmQxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVJbnRlZ3JhdGlvbiwgYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGV4Y2VwdGlvbkZyb21FcnJvciB9IGZyb20gJy4uL2V2ZW50YnVpbGRlci5qcyc7XG5cbmNvbnN0IERFRkFVTFRfS0VZID0gJ2NhdXNlJztcbmNvbnN0IERFRkFVTFRfTElNSVQgPSA1O1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0xpbmtlZEVycm9ycyc7XG5cbmNvbnN0IF9saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxpbWl0ID0gb3B0aW9ucy5saW1pdCB8fCBERUZBVUxUX0xJTUlUO1xuICBjb25zdCBrZXkgPSBvcHRpb25zLmtleSB8fCBERUZBVUxUX0tFWTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJlcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBjbGllbnQpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gICAgICBhcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQoXG4gICAgICAgIC8vIFRoaXMgZGlmZmVycyBmcm9tIHRoZSBMaW5rZWRFcnJvcnMgaW50ZWdyYXRpb24gaW4gY29yZSBieSB1c2luZyBhIGRpZmZlcmVudCBleGNlcHRpb25Gcm9tRXJyb3IgZnVuY3Rpb25cbiAgICAgICAgZXhjZXB0aW9uRnJvbUVycm9yLFxuICAgICAgICBvcHRpb25zLnN0YWNrUGFyc2VyLFxuICAgICAgICBvcHRpb25zLm1heFZhbHVlTGVuZ3RoLFxuICAgICAgICBrZXksXG4gICAgICAgIGxpbWl0LFxuICAgICAgICBldmVudCxcbiAgICAgICAgaGludCxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZ2dyZWdyYXRlIGxpbmtlZCBlcnJvcnMgaW4gYW4gZXZlbnQuXG4gKi9cbmNvbnN0IGxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gZGVmaW5lSW50ZWdyYXRpb24oX2xpbmtlZEVycm9yc0ludGVncmF0aW9uKTtcblxuZXhwb3J0IHsgbGlua2VkRXJyb3JzSW50ZWdyYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmtlZGVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJkZWZpbmVJbnRlZ3JhdGlvbiIsImFwcGx5QWdncmVnYXRlRXJyb3JzVG9FdmVudCIsImV4Y2VwdGlvbkZyb21FcnJvciIsIkRFRkFVTFRfS0VZIiwiREVGQVVMVF9MSU1JVCIsIklOVEVHUkFUSU9OX05BTUUiLCJfbGlua2VkRXJyb3JzSW50ZWdyYXRpb24iLCJvcHRpb25zIiwibGltaXQiLCJrZXkiLCJuYW1lIiwicHJlcHJvY2Vzc0V2ZW50IiwiZXZlbnQiLCJoaW50IiwiY2xpZW50IiwiZ2V0T3B0aW9ucyIsInN0YWNrUGFyc2VyIiwibWF4VmFsdWVMZW5ndGgiLCJsaW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/linkederrors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/sdk.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/sdk.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureUserFeedback: () => (/* binding */ captureUserFeedback),\n/* harmony export */   forceLoad: () => (/* binding */ forceLoad),\n/* harmony export */   getDefaultIntegrations: () => (/* binding */ getDefaultIntegrations),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   onLoad: () => (/* binding */ onLoad),\n/* harmony export */   showReportDialog: () => (/* binding */ showReportDialog)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integrations/inboundfilters.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integrations/functiontostring.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integrations/dedupe.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/sdk.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/api.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/client.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/debug-build.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/helpers.js\");\n/* harmony import */ var _integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./integrations/breadcrumbs.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js\");\n/* harmony import */ var _integrations_browserapierrors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./integrations/browserapierrors.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/browserapierrors.js\");\n/* harmony import */ var _integrations_browsersession_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./integrations/browsersession.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/browsersession.js\");\n/* harmony import */ var _integrations_globalhandlers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./integrations/globalhandlers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js\");\n/* harmony import */ var _integrations_httpcontext_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./integrations/httpcontext.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/httpcontext.js\");\n/* harmony import */ var _integrations_linkederrors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./integrations/linkederrors.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/integrations/linkederrors.js\");\n/* harmony import */ var _stack_parsers_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./stack-parsers.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/stack-parsers.js\");\n/* harmony import */ var _transports_fetch_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./transports/fetch.js */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/transports/fetch.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/** Get the default integrations for the browser SDK. */ function getDefaultIntegrations(options) {\n    /**\n   * Note: Please make sure this stays in sync with Angular SDK, which re-exports\n   * `getDefaultIntegrations` but with an adjusted set of integrations.\n   */ const integrations = [\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.inboundFiltersIntegration)(),\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.functionToStringIntegration)(),\n        (0,_integrations_browserapierrors_js__WEBPACK_IMPORTED_MODULE_2__.browserApiErrorsIntegration)(),\n        (0,_integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_3__.breadcrumbsIntegration)(),\n        (0,_integrations_globalhandlers_js__WEBPACK_IMPORTED_MODULE_4__.globalHandlersIntegration)(),\n        (0,_integrations_linkederrors_js__WEBPACK_IMPORTED_MODULE_5__.linkedErrorsIntegration)(),\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.dedupeIntegration)(),\n        (0,_integrations_httpcontext_js__WEBPACK_IMPORTED_MODULE_7__.httpContextIntegration)()\n    ];\n    // eslint-disable-next-line deprecation/deprecation\n    if (options.autoSessionTracking !== false) {\n        integrations.push((0,_integrations_browsersession_js__WEBPACK_IMPORTED_MODULE_8__.browserSessionIntegration)());\n    }\n    return integrations;\n}\nfunction applyDefaultOptions(optionsArg = {}) {\n    const defaultOptions = {\n        defaultIntegrations: getDefaultIntegrations(optionsArg),\n        release: typeof __SENTRY_RELEASE__ === \"string\" // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n         ? __SENTRY_RELEASE__ : _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.SENTRY_RELEASE && _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.SENTRY_RELEASE.id // This supports the variable that sentry-webpack-plugin injects\n         ? _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.SENTRY_RELEASE.id : undefined,\n        autoSessionTracking: true,\n        sendClientReports: true\n    };\n    // TODO: Instead of dropping just `defaultIntegrations`, we should simply\n    // call `dropUndefinedKeys` on the entire `optionsArg`.\n    // However, for this to work we need to adjust the `hasTracingEnabled()` logic\n    // first as it differentiates between `undefined` and the key not being in the object.\n    if (optionsArg.defaultIntegrations == null) {\n        delete optionsArg.defaultIntegrations;\n    }\n    return {\n        ...defaultOptions,\n        ...optionsArg\n    };\n}\nfunction shouldShowBrowserExtensionError() {\n    const windowWithMaybeExtension = typeof _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.window !== \"undefined\" && _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW;\n    if (!windowWithMaybeExtension) {\n        // No need to show the error if we're not in a browser window environment (e.g. service workers)\n        return false;\n    }\n    const extensionKey = windowWithMaybeExtension.chrome ? \"chrome\" : \"browser\";\n    const extensionObject = windowWithMaybeExtension[extensionKey];\n    const runtimeId = extensionObject && extensionObject.runtime && extensionObject.runtime.id;\n    const href = _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.location && _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.location.href || \"\";\n    const extensionProtocols = [\n        \"chrome-extension:\",\n        \"moz-extension:\",\n        \"ms-browser-extension:\",\n        \"safari-web-extension:\"\n    ];\n    // Running the SDK in a dedicated extension page and calling Sentry.init is fine; no risk of data leakage\n    const isDedicatedExtensionPage = !!runtimeId && _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW === _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.top && extensionProtocols.some((protocol)=>href.startsWith(`${protocol}//`));\n    // Running the SDK in NW.js, which appears like a browser extension but isn't, is also fine\n    // see: https://github.com/getsentry/sentry-javascript/issues/12668\n    const isNWjs = typeof windowWithMaybeExtension.nw !== \"undefined\";\n    return !!runtimeId && !isDedicatedExtensionPage && !isNWjs;\n}\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */ /**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */ function init(browserOptions = {}) {\n    const options = applyDefaultOptions(browserOptions);\n    if (!options.skipBrowserExtensionCheck && shouldShowBrowserExtensionError()) {\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.consoleSandbox)(()=>{\n            // eslint-disable-next-line no-console\n            console.error(\"[Sentry] You cannot run Sentry this way in a browser extension, check: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/\");\n        });\n        return;\n    }\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_11__.DEBUG_BUILD) {\n        if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_12__.supportsFetch)()) {\n            _sentry_core__WEBPACK_IMPORTED_MODULE_10__.logger.warn(\"No Fetch API detected. The Sentry SDK requires a Fetch API compatible environment to send events. Please add a Fetch API polyfill.\");\n        }\n    }\n    const clientOptions = {\n        ...options,\n        stackParser: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_13__.stackParserFromStackParserOptions)(options.stackParser || _stack_parsers_js__WEBPACK_IMPORTED_MODULE_14__.defaultStackParser),\n        integrations: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_15__.getIntegrationsToSetup)(options),\n        transport: options.transport || _transports_fetch_js__WEBPACK_IMPORTED_MODULE_16__.makeFetchTransport\n    };\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.initAndBind)(_client_js__WEBPACK_IMPORTED_MODULE_18__.BrowserClient, clientOptions);\n}\n/**\n * All properties the report dialog supports\n */ /**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */ function showReportDialog(options = {}) {\n    // doesn't work without a document (React Native)\n    if (!_helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.document) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_11__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_10__.logger.error(\"Global document not defined in showReportDialog call\");\n        return;\n    }\n    const scope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_19__.getCurrentScope)();\n    const client = scope.getClient();\n    const dsn = client && client.getDsn();\n    if (!dsn) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_11__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_10__.logger.error(\"DSN not configured for showReportDialog call\");\n        return;\n    }\n    if (scope) {\n        options.user = {\n            ...scope.getUser(),\n            ...options.user\n        };\n    }\n    if (!options.eventId) {\n        const eventId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_20__.lastEventId)();\n        if (eventId) {\n            options.eventId = eventId;\n        }\n    }\n    const script = _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.document.createElement(\"script\");\n    script.async = true;\n    script.crossOrigin = \"anonymous\";\n    script.src = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_21__.getReportDialogEndpoint)(dsn, options);\n    if (options.onLoad) {\n        script.onload = options.onLoad;\n    }\n    const { onClose } = options;\n    if (onClose) {\n        const reportDialogClosedMessageHandler = (event)=>{\n            if (event.data === \"__sentry_reportdialog_closed__\") {\n                try {\n                    onClose();\n                } finally{\n                    _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.removeEventListener(\"message\", reportDialogClosedMessageHandler);\n                }\n            }\n        };\n        _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.addEventListener(\"message\", reportDialogClosedMessageHandler);\n    }\n    const injectionPoint = _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.document.head || _helpers_js__WEBPACK_IMPORTED_MODULE_9__.WINDOW.document.body;\n    if (injectionPoint) {\n        injectionPoint.appendChild(script);\n    } else {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_11__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_10__.logger.error(\"Not injecting report dialog. No injection point found in HTML\");\n    }\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */ function forceLoad() {\n// Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */ function onLoad(callback) {\n    callback();\n}\n/**\n * Captures user feedback and sends it to Sentry.\n *\n * @deprecated Use `captureFeedback` instead.\n */ function captureUserFeedback(feedback) {\n    const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_19__.getClient)();\n    if (client) {\n        // eslint-disable-next-line deprecation/deprecation\n        client.captureUserFeedback(feedback);\n    }\n}\n //# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/stack-parsers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/stack-parsers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chromeStackLineParser: () => (/* binding */ chromeStackLineParser),\n/* harmony export */   defaultStackLineParsers: () => (/* binding */ defaultStackLineParsers),\n/* harmony export */   defaultStackParser: () => (/* binding */ defaultStackParser),\n/* harmony export */   geckoStackLineParser: () => (/* binding */ geckoStackLineParser),\n/* harmony export */   opera10StackLineParser: () => (/* binding */ opera10StackLineParser),\n/* harmony export */   opera11StackLineParser: () => (/* binding */ opera11StackLineParser),\n/* harmony export */   winjsStackLineParser: () => (/* binding */ winjsStackLineParser)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n// This was originally forked from https://github.com/csnover/TraceKit, and was largely\n// re - written as part of raven - js.\n//\n// This code was later copied to the JavaScript mono - repo and further modified and\n// refactored over the years.\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\nfunction createFrame(filename, func, lineno, colno) {\n    const frame = {\n        filename,\n        function: func === \"<anonymous>\" ? _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION : func,\n        in_app: true\n    };\n    if (lineno !== undefined) {\n        frame.lineno = lineno;\n    }\n    if (colno !== undefined) {\n        frame.colno = colno;\n    }\n    return frame;\n}\n// This regex matches frames that have no function name (ie. are at the top level of a module).\n// For example \"at http://localhost:5000//script.js:1:126\"\n// Frames _with_ function names usually look as follows: \"at commitLayoutEffects (react-dom.development.js:23426:1)\"\nconst chromeRegexNoFnName = /^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i;\n// This regex matches all the frames that have a function name.\nconst chromeRegex = /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\n// We cannot call this variable `chrome` because it can conflict with global `chrome` variable in certain environments\n// See: https://github.com/getsentry/sentry-javascript/issues/6880\nconst chromeStackParserFn = (line)=>{\n    // If the stack line has no function name, we need to parse it differently\n    const noFnParts = chromeRegexNoFnName.exec(line);\n    if (noFnParts) {\n        const [, filename, line, col] = noFnParts;\n        return createFrame(filename, _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION, +line, +col);\n    }\n    const parts = chromeRegex.exec(line);\n    if (parts) {\n        const isEval = parts[2] && parts[2].indexOf(\"eval\") === 0; // start of line\n        if (isEval) {\n            const subMatch = chromeEvalRegex.exec(parts[2]);\n            if (subMatch) {\n                // throw out eval line/column and use top-most line/column number\n                parts[2] = subMatch[1]; // url\n                parts[3] = subMatch[2]; // line\n                parts[4] = subMatch[3]; // column\n            }\n        }\n        // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n        // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n        const [func, filename] = extractSafariExtensionDetails(parts[1] || _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION, parts[2]);\n        return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n    }\n    return;\n};\nconst chromeStackLineParser = [\n    CHROME_PRIORITY,\n    chromeStackParserFn\n];\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst gecko = (line)=>{\n    const parts = geckoREgex.exec(line);\n    if (parts) {\n        const isEval = parts[3] && parts[3].indexOf(\" > eval\") > -1;\n        if (isEval) {\n            const subMatch = geckoEvalRegex.exec(parts[3]);\n            if (subMatch) {\n                // throw out eval line/column and use top-most line number\n                parts[1] = parts[1] || \"eval\";\n                parts[3] = subMatch[1];\n                parts[4] = subMatch[2];\n                parts[5] = \"\"; // no column when eval\n            }\n        }\n        let filename = parts[3];\n        let func = parts[1] || _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION;\n        [func, filename] = extractSafariExtensionDetails(func, filename);\n        return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n    }\n    return;\n};\nconst geckoStackLineParser = [\n    GECKO_PRIORITY,\n    gecko\n];\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst winjs = (line)=>{\n    const parts = winjsRegex.exec(line);\n    return parts ? createFrame(parts[2], parts[1] || _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined) : undefined;\n};\nconst winjsStackLineParser = [\n    WINJS_PRIORITY,\n    winjs\n];\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\nconst opera10 = (line)=>{\n    const parts = opera10Regex.exec(line);\n    return parts ? createFrame(parts[2], parts[3] || _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\nconst opera10StackLineParser = [\n    OPERA10_PRIORITY,\n    opera10\n];\nconst opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\nconst opera11 = (line)=>{\n    const parts = opera11Regex.exec(line);\n    return parts ? createFrame(parts[5], parts[3] || parts[4] || _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\nconst opera11StackLineParser = [\n    OPERA11_PRIORITY,\n    opera11\n];\nconst defaultStackLineParsers = [\n    chromeStackLineParser,\n    geckoStackLineParser\n];\nconst defaultStackParser = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.createStackParser)(...defaultStackLineParsers);\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */ const extractSafariExtensionDetails = (func, filename)=>{\n    const isSafariExtension = func.indexOf(\"safari-extension\") !== -1;\n    const isSafariWebExtension = func.indexOf(\"safari-web-extension\") !== -1;\n    return isSafariExtension || isSafariWebExtension ? [\n        func.indexOf(\"@\") !== -1 ? func.split(\"@\")[0] : _sentry_core__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`\n    ] : [\n        func,\n        filename\n    ];\n};\n //# sourceMappingURL=stack-parsers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/stack-parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/transports/fetch.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/transports/fetch.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeFetchTransport: () => (/* binding */ makeFetchTransport)\n/* harmony export */ });\n/* harmony import */ var _sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry-internal/browser-utils */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/transports/base.js\");\n\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */ function makeFetchTransport(options, nativeFetch = (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_0__.getNativeImplementation)(\"fetch\")) {\n    let pendingBodySize = 0;\n    let pendingCount = 0;\n    function makeRequest(request) {\n        const requestSize = request.body.length;\n        pendingBodySize += requestSize;\n        pendingCount++;\n        const requestOptions = {\n            body: request.body,\n            method: \"POST\",\n            referrerPolicy: \"origin\",\n            headers: options.headers,\n            // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n            // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n            // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n            // frequently sending events right before the user is switching pages (eg. when finishing navigation transactions).\n            // Gotchas:\n            // - `keepalive` isn't supported by Firefox\n            // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n            //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n            //   We will therefore only activate the flag when we're below that limit.\n            // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n            // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n            keepalive: pendingBodySize <= 60000 && pendingCount < 15,\n            ...options.fetchOptions\n        };\n        if (!nativeFetch) {\n            (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_0__.clearCachedImplementation)(\"fetch\");\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.rejectedSyncPromise)(\"No fetch implementation available\");\n        }\n        try {\n            // TODO: This may need a `suppressTracing` call in the future when we switch the browser SDK to OTEL\n            return nativeFetch(options.url, requestOptions).then((response)=>{\n                pendingBodySize -= requestSize;\n                pendingCount--;\n                return {\n                    statusCode: response.status,\n                    headers: {\n                        \"x-sentry-rate-limits\": response.headers.get(\"X-Sentry-Rate-Limits\"),\n                        \"retry-after\": response.headers.get(\"Retry-After\")\n                    }\n                };\n            });\n        } catch (e) {\n            (0,_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_0__.clearCachedImplementation)(\"fetch\");\n            pendingBodySize -= requestSize;\n            pendingCount--;\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.rejectedSyncPromise)(e);\n        }\n    }\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.createTransport)(options, makeRequest);\n}\n //# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vdHJhbnNwb3J0cy9mZXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9HO0FBQ2hDO0FBRXBFOztDQUVDLEdBQ0QsU0FBU0ksbUJBQ1BDLE9BQU8sRUFDUEMsY0FBY04sdUZBQXVCQSxDQUFDLFFBQVE7SUFFOUMsSUFBSU8sa0JBQWtCO0lBQ3RCLElBQUlDLGVBQWU7SUFFbkIsU0FBU0MsWUFBWUMsT0FBTztRQUMxQixNQUFNQyxjQUFjRCxRQUFRRSxJQUFJLENBQUNDLE1BQU07UUFDdkNOLG1CQUFtQkk7UUFDbkJIO1FBRUEsTUFBTU0saUJBQWlCO1lBQ3JCRixNQUFNRixRQUFRRSxJQUFJO1lBQ2xCRyxRQUFRO1lBQ1JDLGdCQUFnQjtZQUNoQkMsU0FBU1osUUFBUVksT0FBTztZQUN4QiwrR0FBK0c7WUFDL0csaUhBQWlIO1lBQ2pILDBHQUEwRztZQUMxRyxtSEFBbUg7WUFDbkgsV0FBVztZQUNYLDJDQUEyQztZQUMzQyw4RUFBOEU7WUFDOUUsc0hBQXNIO1lBQ3RILDBFQUEwRTtZQUMxRSxtR0FBbUc7WUFDbkcsMkVBQTJFO1lBQzNFQyxXQUFXWCxtQkFBbUIsU0FBU0MsZUFBZTtZQUN0RCxHQUFHSCxRQUFRYyxZQUFZO1FBQ3pCO1FBRUEsSUFBSSxDQUFDYixhQUFhO1lBQ2hCTCx5RkFBeUJBLENBQUM7WUFDMUIsT0FBT0UsaUVBQW1CQSxDQUFDO1FBQzdCO1FBRUEsSUFBSTtZQUNGLG9HQUFvRztZQUNwRyxPQUFPRyxZQUFZRCxRQUFRZSxHQUFHLEVBQUVOLGdCQUFnQk8sSUFBSSxDQUFDQyxDQUFBQTtnQkFDbkRmLG1CQUFtQkk7Z0JBQ25CSDtnQkFDQSxPQUFPO29CQUNMZSxZQUFZRCxTQUFTRSxNQUFNO29CQUMzQlAsU0FBUzt3QkFDUCx3QkFBd0JLLFNBQVNMLE9BQU8sQ0FBQ1EsR0FBRyxDQUFDO3dCQUM3QyxlQUFlSCxTQUFTTCxPQUFPLENBQUNRLEdBQUcsQ0FBQztvQkFDdEM7Z0JBQ0Y7WUFDRjtRQUNGLEVBQUUsT0FBT0MsR0FBRztZQUNWekIseUZBQXlCQSxDQUFDO1lBQzFCTSxtQkFBbUJJO1lBQ25CSDtZQUNBLE9BQU9MLGlFQUFtQkEsQ0FBQ3VCO1FBQzdCO0lBQ0Y7SUFFQSxPQUFPeEIsNkRBQWVBLENBQUNHLFNBQVNJO0FBQ2xDO0FBRThCLENBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vdHJhbnNwb3J0cy9mZXRjaC5qcz81MjI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE5hdGl2ZUltcGxlbWVudGF0aW9uLCBjbGVhckNhY2hlZEltcGxlbWVudGF0aW9uIH0gZnJvbSAnQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVRyYW5zcG9ydCwgcmVqZWN0ZWRTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFRyYW5zcG9ydCB0aGF0IHVzZXMgdGhlIEZldGNoIEFQSSB0byBzZW5kIGV2ZW50cyB0byBTZW50cnkuXG4gKi9cbmZ1bmN0aW9uIG1ha2VGZXRjaFRyYW5zcG9ydChcbiAgb3B0aW9ucyxcbiAgbmF0aXZlRmV0Y2ggPSBnZXROYXRpdmVJbXBsZW1lbnRhdGlvbignZmV0Y2gnKSxcbikge1xuICBsZXQgcGVuZGluZ0JvZHlTaXplID0gMDtcbiAgbGV0IHBlbmRpbmdDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gbWFrZVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHJlcXVlc3RTaXplID0gcmVxdWVzdC5ib2R5Lmxlbmd0aDtcbiAgICBwZW5kaW5nQm9keVNpemUgKz0gcmVxdWVzdFNpemU7XG4gICAgcGVuZGluZ0NvdW50Kys7XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIGJvZHk6IHJlcXVlc3QuYm9keSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgcmVmZXJyZXJQb2xpY3k6ICdvcmlnaW4nLFxuICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgLy8gT3V0Z29pbmcgcmVxdWVzdHMgYXJlIHVzdWFsbHkgY2FuY2VsbGVkIHdoZW4gbmF2aWdhdGluZyB0byBhIGRpZmZlcmVudCBwYWdlLCBjYXVzaW5nIGEgXCJUeXBlRXJyb3I6IEZhaWxlZCB0b1xuICAgICAgLy8gZmV0Y2hcIiBlcnJvciBhbmQgc2VuZGluZyBhIFwibmV0d29ya19lcnJvclwiIGNsaWVudC1vdXRjb21lIC0gaW4gQ2hyb21lLCB0aGUgcmVxdWVzdCBzdGF0dXMgc2hvd3MgXCIoY2FuY2VsbGVkKVwiLlxuICAgICAgLy8gVGhlIGBrZWVwYWxpdmVgIGZsYWcga2VlcHMgb3V0Z29pbmcgcmVxdWVzdHMgYWxpdmUsIGV2ZW4gd2hlbiBzd2l0Y2hpbmcgcGFnZXMuIFdlIHdhbnQgdGhpcyBzaW5jZSB3ZSdyZVxuICAgICAgLy8gZnJlcXVlbnRseSBzZW5kaW5nIGV2ZW50cyByaWdodCBiZWZvcmUgdGhlIHVzZXIgaXMgc3dpdGNoaW5nIHBhZ2VzIChlZy4gd2hlbiBmaW5pc2hpbmcgbmF2aWdhdGlvbiB0cmFuc2FjdGlvbnMpLlxuICAgICAgLy8gR290Y2hhczpcbiAgICAgIC8vIC0gYGtlZXBhbGl2ZWAgaXNuJ3Qgc3VwcG9ydGVkIGJ5IEZpcmVmb3hcbiAgICAgIC8vIC0gQXMgcGVyIHNwZWMgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNodHRwLW5ldHdvcmstb3ItY2FjaGUtZmV0Y2gpOlxuICAgICAgLy8gICBJZiB0aGUgc3VtIG9mIGNvbnRlbnRMZW5ndGggYW5kIGluZmxpZ2h0S2VlcGFsaXZlQnl0ZXMgaXMgZ3JlYXRlciB0aGFuIDY0IGtpYmlieXRlcywgdGhlbiByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICAgICAgLy8gICBXZSB3aWxsIHRoZXJlZm9yZSBvbmx5IGFjdGl2YXRlIHRoZSBmbGFnIHdoZW4gd2UncmUgYmVsb3cgdGhhdCBsaW1pdC5cbiAgICAgIC8vIFRoZXJlIGlzIGFsc28gYSBsaW1pdCBvZiByZXF1ZXN0cyB0aGF0IGNhbiBiZSBvcGVuIGF0IHRoZSBzYW1lIHRpbWUsIHNvIHdlIGFsc28gbGltaXQgdGhpcyB0byAxNVxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvcHVsbC83NTUzIGZvciBkZXRhaWxzXG4gICAgICBrZWVwYWxpdmU6IHBlbmRpbmdCb2R5U2l6ZSA8PSA2MDAwMCAmJiBwZW5kaW5nQ291bnQgPCAxNSxcbiAgICAgIC4uLm9wdGlvbnMuZmV0Y2hPcHRpb25zLFxuICAgIH07XG5cbiAgICBpZiAoIW5hdGl2ZUZldGNoKSB7XG4gICAgICBjbGVhckNhY2hlZEltcGxlbWVudGF0aW9uKCdmZXRjaCcpO1xuICAgICAgcmV0dXJuIHJlamVjdGVkU3luY1Byb21pc2UoJ05vIGZldGNoIGltcGxlbWVudGF0aW9uIGF2YWlsYWJsZScpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBUT0RPOiBUaGlzIG1heSBuZWVkIGEgYHN1cHByZXNzVHJhY2luZ2AgY2FsbCBpbiB0aGUgZnV0dXJlIHdoZW4gd2Ugc3dpdGNoIHRoZSBicm93c2VyIFNESyB0byBPVEVMXG4gICAgICByZXR1cm4gbmF0aXZlRmV0Y2gob3B0aW9ucy51cmwsIHJlcXVlc3RPcHRpb25zKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgcGVuZGluZ0JvZHlTaXplIC09IHJlcXVlc3RTaXplO1xuICAgICAgICBwZW5kaW5nQ291bnQtLTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ1gtU2VudHJ5LVJhdGUtTGltaXRzJyksXG4gICAgICAgICAgICAncmV0cnktYWZ0ZXInOiByZXNwb25zZS5oZWFkZXJzLmdldCgnUmV0cnktQWZ0ZXInKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2xlYXJDYWNoZWRJbXBsZW1lbnRhdGlvbignZmV0Y2gnKTtcbiAgICAgIHBlbmRpbmdCb2R5U2l6ZSAtPSByZXF1ZXN0U2l6ZTtcbiAgICAgIHBlbmRpbmdDb3VudC0tO1xuICAgICAgcmV0dXJuIHJlamVjdGVkU3luY1Byb21pc2UoZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRyYW5zcG9ydChvcHRpb25zLCBtYWtlUmVxdWVzdCk7XG59XG5cbmV4cG9ydCB7IG1ha2VGZXRjaFRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0TmF0aXZlSW1wbGVtZW50YXRpb24iLCJjbGVhckNhY2hlZEltcGxlbWVudGF0aW9uIiwiY3JlYXRlVHJhbnNwb3J0IiwicmVqZWN0ZWRTeW5jUHJvbWlzZSIsIm1ha2VGZXRjaFRyYW5zcG9ydCIsIm9wdGlvbnMiLCJuYXRpdmVGZXRjaCIsInBlbmRpbmdCb2R5U2l6ZSIsInBlbmRpbmdDb3VudCIsIm1ha2VSZXF1ZXN0IiwicmVxdWVzdCIsInJlcXVlc3RTaXplIiwiYm9keSIsImxlbmd0aCIsInJlcXVlc3RPcHRpb25zIiwibWV0aG9kIiwicmVmZXJyZXJQb2xpY3kiLCJoZWFkZXJzIiwia2VlcGFsaXZlIiwiZmV0Y2hPcHRpb25zIiwidXJsIiwidGhlbiIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsInN0YXR1cyIsImdldCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/transports/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/browser/build/npm/esm/userfeedback.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/browser/build/npm/esm/userfeedback.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUserFeedbackEnvelope: () => (/* binding */ createUserFeedbackEnvelope)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n\n/**\n * Creates an envelope from a user feedback.\n */ function createUserFeedbackEnvelope(feedback, { metadata, tunnel, dsn }) {\n    const headers = {\n        event_id: feedback.event_id,\n        sent_at: new Date().toISOString(),\n        ...metadata && metadata.sdk && {\n            sdk: {\n                name: metadata.sdk.name,\n                version: metadata.sdk.version\n            }\n        },\n        ...!!tunnel && !!dsn && {\n            dsn: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn)\n        }\n    };\n    const item = createUserFeedbackEnvelopeItem(feedback);\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(headers, [\n        item\n    ]);\n}\nfunction createUserFeedbackEnvelopeItem(feedback) {\n    const feedbackHeaders = {\n        type: \"user_report\"\n    };\n    return [\n        feedbackHeaders,\n        feedback\n    ];\n}\n //# sourceMappingURL=userfeedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vdXNlcmZlZWRiYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyRDtBQUUzRDs7Q0FFQyxHQUNELFNBQVNFLDJCQUNQQyxRQUFRLEVBQ1IsRUFDRUMsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLEdBQUcsRUFDSjtJQUlELE1BQU1DLFVBQVU7UUFDZEMsVUFBVUwsU0FBU0ssUUFBUTtRQUMzQkMsU0FBUyxJQUFJQyxPQUFPQyxXQUFXO1FBQy9CLEdBQUlQLFlBQ0ZBLFNBQVNRLEdBQUcsSUFBSTtZQUNkQSxLQUFLO2dCQUNIQyxNQUFNVCxTQUFTUSxHQUFHLENBQUNDLElBQUk7Z0JBQ3ZCQyxTQUFTVixTQUFTUSxHQUFHLENBQUNFLE9BQU87WUFDL0I7UUFDRixDQUFDO1FBQ0gsR0FBSSxDQUFDLENBQUNULFVBQVUsQ0FBQyxDQUFDQyxPQUFPO1lBQUVBLEtBQUtOLHlEQUFXQSxDQUFDTTtRQUFLLENBQUM7SUFDcEQ7SUFDQSxNQUFNUyxPQUFPQywrQkFBK0JiO0lBRTVDLE9BQU9GLDREQUFjQSxDQUFDTSxTQUFTO1FBQUNRO0tBQUs7QUFDdkM7QUFFQSxTQUFTQywrQkFBK0JiLFFBQVE7SUFDOUMsTUFBTWMsa0JBQWtCO1FBQ3RCQyxNQUFNO0lBQ1I7SUFDQSxPQUFPO1FBQUNEO1FBQWlCZDtLQUFTO0FBQ3BDO0FBRXNDLENBQ3RDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2J1aWxkL25wbS9lc20vdXNlcmZlZWRiYWNrLmpzPzRjMTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHNuVG9TdHJpbmcsIGNyZWF0ZUVudmVsb3BlIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVudmVsb3BlIGZyb20gYSB1c2VyIGZlZWRiYWNrLlxuICovXG5mdW5jdGlvbiBjcmVhdGVVc2VyRmVlZGJhY2tFbnZlbG9wZShcbiAgZmVlZGJhY2ssXG4gIHtcbiAgICBtZXRhZGF0YSxcbiAgICB0dW5uZWwsXG4gICAgZHNuLFxuICB9XG5cbixcbikge1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIGV2ZW50X2lkOiBmZWVkYmFjay5ldmVudF9pZCxcbiAgICBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgLi4uKG1ldGFkYXRhICYmXG4gICAgICBtZXRhZGF0YS5zZGsgJiYge1xuICAgICAgICBzZGs6IHtcbiAgICAgICAgICBuYW1lOiBtZXRhZGF0YS5zZGsubmFtZSxcbiAgICAgICAgICB2ZXJzaW9uOiBtZXRhZGF0YS5zZGsudmVyc2lvbixcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIC4uLighIXR1bm5lbCAmJiAhIWRzbiAmJiB7IGRzbjogZHNuVG9TdHJpbmcoZHNuKSB9KSxcbiAgfTtcbiAgY29uc3QgaXRlbSA9IGNyZWF0ZVVzZXJGZWVkYmFja0VudmVsb3BlSXRlbShmZWVkYmFjayk7XG5cbiAgcmV0dXJuIGNyZWF0ZUVudmVsb3BlKGhlYWRlcnMsIFtpdGVtXSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZXJGZWVkYmFja0VudmVsb3BlSXRlbShmZWVkYmFjaykge1xuICBjb25zdCBmZWVkYmFja0hlYWRlcnMgPSB7XG4gICAgdHlwZTogJ3VzZXJfcmVwb3J0JyxcbiAgfTtcbiAgcmV0dXJuIFtmZWVkYmFja0hlYWRlcnMsIGZlZWRiYWNrXTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlVXNlckZlZWRiYWNrRW52ZWxvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJmZWVkYmFjay5qcy5tYXBcbiJdLCJuYW1lcyI6WyJkc25Ub1N0cmluZyIsImNyZWF0ZUVudmVsb3BlIiwiY3JlYXRlVXNlckZlZWRiYWNrRW52ZWxvcGUiLCJmZWVkYmFjayIsIm1ldGFkYXRhIiwidHVubmVsIiwiZHNuIiwiaGVhZGVycyIsImV2ZW50X2lkIiwic2VudF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNkayIsIm5hbWUiLCJ2ZXJzaW9uIiwiaXRlbSIsImNyZWF0ZVVzZXJGZWVkYmFja0VudmVsb3BlSXRlbSIsImZlZWRiYWNrSGVhZGVycyIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/browser/build/npm/esm/userfeedback.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/api.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvelopeEndpointWithUrlEncodedAuth: () => (/* binding */ getEnvelopeEndpointWithUrlEncodedAuth),\n/* harmony export */   getReportDialogEndpoint: () => (/* binding */ getReportDialogEndpoint)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n\nconst SENTRY_API_VERSION = \"7\";\n/** Returns the prefix to construct Sentry ingestion API endpoints. */ function getBaseApiEndpoint(dsn) {\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : \"\";\n    const port = dsn.port ? `:${dsn.port}` : \"\";\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : \"\"}/api/`;\n}\n/** Returns the ingest API endpoint for target. */ function _getIngestEndpoint(dsn) {\n    return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */ function _encodedAuth(dsn, sdkInfo) {\n    const params = {\n        sentry_version: SENTRY_API_VERSION\n    };\n    if (dsn.publicKey) {\n        // We send only the minimum set of required information. See\n        // https://github.com/getsentry/sentry-javascript/issues/2572.\n        params.sentry_key = dsn.publicKey;\n    }\n    if (sdkInfo) {\n        params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n    }\n    return new URLSearchParams(params).toString();\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */ function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n    return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n/** Returns the url to the report dialog endpoint. */ function getReportDialogEndpoint(dsnLike, dialogOptions) {\n    const dsn = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.makeDsn)(dsnLike);\n    if (!dsn) {\n        return \"\";\n    }\n    const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n    let encodedOptions = `dsn=${(0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn)}`;\n    for(const key in dialogOptions){\n        if (key === \"dsn\") {\n            continue;\n        }\n        if (key === \"onClose\") {\n            continue;\n        }\n        if (key === \"user\") {\n            const user = dialogOptions.user;\n            if (!user) {\n                continue;\n            }\n            if (user.name) {\n                encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n            }\n            if (user.email) {\n                encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n            }\n        } else {\n            encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n        }\n    }\n    return `${endpoint}?${encodedOptions}`;\n}\n //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTREO0FBRTVELE1BQU1FLHFCQUFxQjtBQUUzQixvRUFBb0UsR0FDcEUsU0FBU0MsbUJBQW1CQyxHQUFHO0lBQzdCLE1BQU1DLFdBQVdELElBQUlDLFFBQVEsR0FBRyxDQUFDLEVBQUVELElBQUlDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRztJQUNyRCxNQUFNQyxPQUFPRixJQUFJRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUVGLElBQUlFLElBQUksQ0FBQyxDQUFDLEdBQUc7SUFDekMsT0FBTyxDQUFDLEVBQUVELFNBQVMsRUFBRSxFQUFFRCxJQUFJRyxJQUFJLENBQUMsRUFBRUQsS0FBSyxFQUFFRixJQUFJSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUVKLElBQUlJLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDaEY7QUFFQSxnREFBZ0QsR0FDaEQsU0FBU0MsbUJBQW1CTCxHQUFHO0lBQzdCLE9BQU8sQ0FBQyxFQUFFRCxtQkFBbUJDLEtBQUssRUFBRUEsSUFBSU0sU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUMvRDtBQUVBLCtFQUErRSxHQUMvRSxTQUFTQyxhQUFhUCxHQUFHLEVBQUVRLE9BQU87SUFDaEMsTUFBTUMsU0FBUztRQUNiQyxnQkFBZ0JaO0lBQ2xCO0lBRUEsSUFBSUUsSUFBSVcsU0FBUyxFQUFFO1FBQ2pCLDREQUE0RDtRQUM1RCw4REFBOEQ7UUFDOURGLE9BQU9HLFVBQVUsR0FBR1osSUFBSVcsU0FBUztJQUNuQztJQUVBLElBQUlILFNBQVM7UUFDWEMsT0FBT0ksYUFBYSxHQUFHLENBQUMsRUFBRUwsUUFBUU0sSUFBSSxDQUFDLENBQUMsRUFBRU4sUUFBUU8sT0FBTyxDQUFDLENBQUM7SUFDN0Q7SUFFQSxPQUFPLElBQUlDLGdCQUFnQlAsUUFBUVEsUUFBUTtBQUM3QztBQUVBOzs7O0NBSUMsR0FDRCxTQUFTQyxzQ0FBc0NsQixHQUFHLEVBQUVtQixNQUFNLEVBQUVYLE9BQU87SUFDakUsT0FBT1csU0FBU0EsU0FBUyxDQUFDLEVBQUVkLG1CQUFtQkwsS0FBSyxDQUFDLEVBQUVPLGFBQWFQLEtBQUtRLFNBQVMsQ0FBQztBQUNyRjtBQUVBLG1EQUFtRCxHQUNuRCxTQUFTWSx3QkFDUEMsT0FBTyxFQUNQQyxhQUFhO0lBSWIsTUFBTXRCLE1BQU1KLDREQUFPQSxDQUFDeUI7SUFDcEIsSUFBSSxDQUFDckIsS0FBSztRQUNSLE9BQU87SUFDVDtJQUVBLE1BQU11QixXQUFXLENBQUMsRUFBRXhCLG1CQUFtQkMsS0FBSyxpQkFBaUIsQ0FBQztJQUU5RCxJQUFJd0IsaUJBQWlCLENBQUMsSUFBSSxFQUFFM0IsZ0VBQVdBLENBQUNHLEtBQUssQ0FBQztJQUM5QyxJQUFLLE1BQU15QixPQUFPSCxjQUFlO1FBQy9CLElBQUlHLFFBQVEsT0FBTztZQUNqQjtRQUNGO1FBRUEsSUFBSUEsUUFBUSxXQUFXO1lBQ3JCO1FBQ0Y7UUFFQSxJQUFJQSxRQUFRLFFBQVE7WUFDbEIsTUFBTUMsT0FBT0osY0FBY0ksSUFBSTtZQUMvQixJQUFJLENBQUNBLE1BQU07Z0JBQ1Q7WUFDRjtZQUNBLElBQUlBLEtBQUtaLElBQUksRUFBRTtnQkFDYlUsa0JBQWtCLENBQUMsTUFBTSxFQUFFRyxtQkFBbUJELEtBQUtaLElBQUksRUFBRSxDQUFDO1lBQzVEO1lBQ0EsSUFBSVksS0FBS0UsS0FBSyxFQUFFO2dCQUNkSixrQkFBa0IsQ0FBQyxPQUFPLEVBQUVHLG1CQUFtQkQsS0FBS0UsS0FBSyxFQUFFLENBQUM7WUFDOUQ7UUFDRixPQUFPO1lBQ0xKLGtCQUFrQixDQUFDLENBQUMsRUFBRUcsbUJBQW1CRixLQUFLLENBQUMsRUFBRUUsbUJBQW1CTCxhQUFhLENBQUNHLElBQUksRUFBRyxDQUFDO1FBQzVGO0lBQ0Y7SUFFQSxPQUFPLENBQUMsRUFBRUYsU0FBUyxDQUFDLEVBQUVDLGVBQWUsQ0FBQztBQUN4QztBQUUwRSxDQUMxRSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vYXBpLmpzP2RhZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZURzbiwgZHNuVG9TdHJpbmcgfSBmcm9tICcuL3V0aWxzLWhvaXN0L2Rzbi5qcyc7XG5cbmNvbnN0IFNFTlRSWV9BUElfVkVSU0lPTiA9ICc3JztcblxuLyoqIFJldHVybnMgdGhlIHByZWZpeCB0byBjb25zdHJ1Y3QgU2VudHJ5IGluZ2VzdGlvbiBBUEkgZW5kcG9pbnRzLiAqL1xuZnVuY3Rpb24gZ2V0QmFzZUFwaUVuZHBvaW50KGRzbikge1xuICBjb25zdCBwcm90b2NvbCA9IGRzbi5wcm90b2NvbCA/IGAke2Rzbi5wcm90b2NvbH06YCA6ICcnO1xuICBjb25zdCBwb3J0ID0gZHNuLnBvcnQgPyBgOiR7ZHNuLnBvcnR9YCA6ICcnO1xuICByZXR1cm4gYCR7cHJvdG9jb2x9Ly8ke2Rzbi5ob3N0fSR7cG9ydH0ke2Rzbi5wYXRoID8gYC8ke2Rzbi5wYXRofWAgOiAnJ30vYXBpL2A7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBpbmdlc3QgQVBJIGVuZHBvaW50IGZvciB0YXJnZXQuICovXG5mdW5jdGlvbiBfZ2V0SW5nZXN0RW5kcG9pbnQoZHNuKSB7XG4gIHJldHVybiBgJHtnZXRCYXNlQXBpRW5kcG9pbnQoZHNuKX0ke2Rzbi5wcm9qZWN0SWR9L2VudmVsb3BlL2A7XG59XG5cbi8qKiBSZXR1cm5zIGEgVVJMLWVuY29kZWQgc3RyaW5nIHdpdGggYXV0aCBjb25maWcgc3VpdGFibGUgZm9yIGEgcXVlcnkgc3RyaW5nLiAqL1xuZnVuY3Rpb24gX2VuY29kZWRBdXRoKGRzbiwgc2RrSW5mbykge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgc2VudHJ5X3ZlcnNpb246IFNFTlRSWV9BUElfVkVSU0lPTixcbiAgfTtcblxuICBpZiAoZHNuLnB1YmxpY0tleSkge1xuICAgIC8vIFdlIHNlbmQgb25seSB0aGUgbWluaW11bSBzZXQgb2YgcmVxdWlyZWQgaW5mb3JtYXRpb24uIFNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzI1NzIuXG4gICAgcGFyYW1zLnNlbnRyeV9rZXkgPSBkc24ucHVibGljS2V5O1xuICB9XG5cbiAgaWYgKHNka0luZm8pIHtcbiAgICBwYXJhbXMuc2VudHJ5X2NsaWVudCA9IGAke3Nka0luZm8ubmFtZX0vJHtzZGtJbmZvLnZlcnNpb259YDtcbiAgfVxuXG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbnZlbG9wZSBlbmRwb2ludCBVUkwgd2l0aCBhdXRoIGluIHRoZSBxdWVyeSBzdHJpbmcuXG4gKlxuICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICovXG5mdW5jdGlvbiBnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKGRzbiwgdHVubmVsLCBzZGtJbmZvKSB7XG4gIHJldHVybiB0dW5uZWwgPyB0dW5uZWwgOiBgJHtfZ2V0SW5nZXN0RW5kcG9pbnQoZHNuKX0/JHtfZW5jb2RlZEF1dGgoZHNuLCBzZGtJbmZvKX1gO1xufVxuXG4vKiogUmV0dXJucyB0aGUgdXJsIHRvIHRoZSByZXBvcnQgZGlhbG9nIGVuZHBvaW50LiAqL1xuZnVuY3Rpb24gZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQoXG4gIGRzbkxpa2UsXG4gIGRpYWxvZ09wdGlvbnNcblxuLFxuKSB7XG4gIGNvbnN0IGRzbiA9IG1ha2VEc24oZHNuTGlrZSk7XG4gIGlmICghZHNuKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3QgZW5kcG9pbnQgPSBgJHtnZXRCYXNlQXBpRW5kcG9pbnQoZHNuKX1lbWJlZC9lcnJvci1wYWdlL2A7XG5cbiAgbGV0IGVuY29kZWRPcHRpb25zID0gYGRzbj0ke2RzblRvU3RyaW5nKGRzbil9YDtcbiAgZm9yIChjb25zdCBrZXkgaW4gZGlhbG9nT3B0aW9ucykge1xuICAgIGlmIChrZXkgPT09ICdkc24nKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnb25DbG9zZScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd1c2VyJykge1xuICAgICAgY29uc3QgdXNlciA9IGRpYWxvZ09wdGlvbnMudXNlcjtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh1c2VyLm5hbWUpIHtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMgKz0gYCZuYW1lPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVzZXIubmFtZSl9YDtcbiAgICAgIH1cbiAgICAgIGlmICh1c2VyLmVtYWlsKSB7XG4gICAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmZW1haWw9JHtlbmNvZGVVUklDb21wb25lbnQodXNlci5lbWFpbCl9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RlZE9wdGlvbnMgKz0gYCYke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zW2tleV0gKX1gO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBgJHtlbmRwb2ludH0/JHtlbmNvZGVkT3B0aW9uc31gO1xufVxuXG5leHBvcnQgeyBnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoLCBnZXRSZXBvcnREaWFsb2dFbmRwb2ludCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1ha2VEc24iLCJkc25Ub1N0cmluZyIsIlNFTlRSWV9BUElfVkVSU0lPTiIsImdldEJhc2VBcGlFbmRwb2ludCIsImRzbiIsInByb3RvY29sIiwicG9ydCIsImhvc3QiLCJwYXRoIiwiX2dldEluZ2VzdEVuZHBvaW50IiwicHJvamVjdElkIiwiX2VuY29kZWRBdXRoIiwic2RrSW5mbyIsInBhcmFtcyIsInNlbnRyeV92ZXJzaW9uIiwicHVibGljS2V5Iiwic2VudHJ5X2tleSIsInNlbnRyeV9jbGllbnQiLCJuYW1lIiwidmVyc2lvbiIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwiZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCIsInR1bm5lbCIsImdldFJlcG9ydERpYWxvZ0VuZHBvaW50IiwiZHNuTGlrZSIsImRpYWxvZ09wdGlvbnMiLCJlbmRwb2ludCIsImVuY29kZWRPcHRpb25zIiwia2V5IiwidXNlciIsImVuY29kZVVSSUNvbXBvbmVudCIsImVtYWlsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/asyncContext/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAsyncContextStrategy: () => (/* binding */ getAsyncContextStrategy),\n/* harmony export */   setAsyncContextStrategy: () => (/* binding */ setAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../carrier.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _stackStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stackStrategy.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js\");\n\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */ function setAsyncContextStrategy(strategy) {\n    // Get main carrier (global for every environment)\n    const registry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n    const sentry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getSentryCarrier)(registry);\n    sentry.acs = strategy;\n}\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */ function getAsyncContextStrategy(carrier) {\n    const sentry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getSentryCarrier)(carrier);\n    if (sentry.acs) {\n        return sentry.acs;\n    }\n    // Otherwise, use the default one (stack)\n    return (0,_stackStrategy_js__WEBPACK_IMPORTED_MODULE_1__.getStackAsyncContextStrategy)();\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hc3luY0NvbnRleHQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRTtBQUNDO0FBRWxFOzs7O0NBSUMsR0FDRCxTQUFTRyx3QkFBd0JDLFFBQVE7SUFDdkMsa0RBQWtEO0lBQ2xELE1BQU1DLFdBQVdMLDJEQUFjQTtJQUMvQixNQUFNTSxTQUFTTCw2REFBZ0JBLENBQUNJO0lBQ2hDQyxPQUFPQyxHQUFHLEdBQUdIO0FBQ2Y7QUFFQTs7O0NBR0MsR0FDRCxTQUFTSSx3QkFBd0JDLE9BQU87SUFDdEMsTUFBTUgsU0FBU0wsNkRBQWdCQSxDQUFDUTtJQUVoQyxJQUFJSCxPQUFPQyxHQUFHLEVBQUU7UUFDZCxPQUFPRCxPQUFPQyxHQUFHO0lBQ25CO0lBRUEseUNBQXlDO0lBQ3pDLE9BQU9MLCtFQUE0QkE7QUFDckM7QUFFNEQsQ0FDNUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2FzeW5jQ29udGV4dC9pbmRleC5qcz85NGI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE1haW5DYXJyaWVyLCBnZXRTZW50cnlDYXJyaWVyIH0gZnJvbSAnLi4vY2Fycmllci5qcyc7XG5pbXBvcnQgeyBnZXRTdGFja0FzeW5jQ29udGV4dFN0cmF0ZWd5IH0gZnJvbSAnLi9zdGFja1N0cmF0ZWd5LmpzJztcblxuLyoqXG4gKiBAcHJpdmF0ZSBQcml2YXRlIEFQSSB3aXRoIG5vIHNlbXZlciBndWFyYW50ZWVzIVxuICpcbiAqIFNldHMgdGhlIGdsb2JhbCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5XG4gKi9cbmZ1bmN0aW9uIHNldEFzeW5jQ29udGV4dFN0cmF0ZWd5KHN0cmF0ZWd5KSB7XG4gIC8vIEdldCBtYWluIGNhcnJpZXIgKGdsb2JhbCBmb3IgZXZlcnkgZW52aXJvbm1lbnQpXG4gIGNvbnN0IHJlZ2lzdHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3Qgc2VudHJ5ID0gZ2V0U2VudHJ5Q2FycmllcihyZWdpc3RyeSk7XG4gIHNlbnRyeS5hY3MgPSBzdHJhdGVneTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgYXN5bmMgY29udGV4dCBzdHJhdGVneS5cbiAqIElmIG5vbmUgaGFzIGJlZW4gc2V0dXAsIHRoZSBkZWZhdWx0IHdpbGwgYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2Fycmllcikge1xuICBjb25zdCBzZW50cnkgPSBnZXRTZW50cnlDYXJyaWVyKGNhcnJpZXIpO1xuXG4gIGlmIChzZW50cnkuYWNzKSB7XG4gICAgcmV0dXJuIHNlbnRyeS5hY3M7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIHVzZSB0aGUgZGVmYXVsdCBvbmUgKHN0YWNrKVxuICByZXR1cm4gZ2V0U3RhY2tBc3luY0NvbnRleHRTdHJhdGVneSgpO1xufVxuXG5leHBvcnQgeyBnZXRBc3luY0NvbnRleHRTdHJhdGVneSwgc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldE1haW5DYXJyaWVyIiwiZ2V0U2VudHJ5Q2FycmllciIsImdldFN0YWNrQXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJzZXRBc3luY0NvbnRleHRTdHJhdGVneSIsInN0cmF0ZWd5IiwicmVnaXN0cnkiLCJzZW50cnkiLCJhY3MiLCJnZXRBc3luY0NvbnRleHRTdHJhdGVneSIsImNhcnJpZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncContextStack: () => (/* binding */ AsyncContextStack),\n/* harmony export */   getStackAsyncContextStrategy: () => (/* binding */ getStackAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _defaultScopes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../defaultScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/defaultScopes.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../carrier.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/carrier.js\");\n\n\n\n\n/**\n * This is an object that holds a stack of scopes.\n */ class AsyncContextStack {\n    constructor(scope, isolationScope){\n        let assignedScope;\n        if (!scope) {\n            assignedScope = new _scope_js__WEBPACK_IMPORTED_MODULE_0__.Scope();\n        } else {\n            assignedScope = scope;\n        }\n        let assignedIsolationScope;\n        if (!isolationScope) {\n            assignedIsolationScope = new _scope_js__WEBPACK_IMPORTED_MODULE_0__.Scope();\n        } else {\n            assignedIsolationScope = isolationScope;\n        }\n        // scope stack for domains or the process\n        this._stack = [\n            {\n                scope: assignedScope\n            }\n        ];\n        this._isolationScope = assignedIsolationScope;\n    }\n    /**\n   * Fork a scope for the stack.\n   */ withScope(callback) {\n        const scope = this._pushScope();\n        let maybePromiseResult;\n        try {\n            maybePromiseResult = callback(scope);\n        } catch (e) {\n            this._popScope();\n            throw e;\n        }\n        if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isThenable)(maybePromiseResult)) {\n            // @ts-expect-error - isThenable returns the wrong type\n            return maybePromiseResult.then((res)=>{\n                this._popScope();\n                return res;\n            }, (e)=>{\n                this._popScope();\n                throw e;\n            });\n        }\n        this._popScope();\n        return maybePromiseResult;\n    }\n    /**\n   * Get the client of the stack.\n   */ getClient() {\n        return this.getStackTop().client;\n    }\n    /**\n   * Returns the scope of the top stack.\n   */ getScope() {\n        return this.getStackTop().scope;\n    }\n    /**\n   * Get the isolation scope for the stack.\n   */ getIsolationScope() {\n        return this._isolationScope;\n    }\n    /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */ getStackTop() {\n        return this._stack[this._stack.length - 1];\n    }\n    /**\n   * Push a scope to the stack.\n   */ _pushScope() {\n        // We want to clone the content of prev scope\n        const scope = this.getScope().clone();\n        this._stack.push({\n            client: this.getClient(),\n            scope\n        });\n        return scope;\n    }\n    /**\n   * Pop a scope from the stack.\n   */ _popScope() {\n        if (this._stack.length <= 1) return false;\n        return !!this._stack.pop();\n    }\n}\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */ function getAsyncContextStack() {\n    const registry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_2__.getMainCarrier)();\n    const sentry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_2__.getSentryCarrier)(registry);\n    return sentry.stack = sentry.stack || new AsyncContextStack((0,_defaultScopes_js__WEBPACK_IMPORTED_MODULE_3__.getDefaultCurrentScope)(), (0,_defaultScopes_js__WEBPACK_IMPORTED_MODULE_3__.getDefaultIsolationScope)());\n}\nfunction withScope(callback) {\n    return getAsyncContextStack().withScope(callback);\n}\nfunction withSetScope(scope, callback) {\n    const stack = getAsyncContextStack();\n    return stack.withScope(()=>{\n        stack.getStackTop().scope = scope;\n        return callback(scope);\n    });\n}\nfunction withIsolationScope(callback) {\n    return getAsyncContextStack().withScope(()=>{\n        return callback(getAsyncContextStack().getIsolationScope());\n    });\n}\n/**\n * Get the stack-based async context strategy.\n */ function getStackAsyncContextStrategy() {\n    return {\n        withIsolationScope,\n        withScope,\n        withSetScope,\n        withSetIsolationScope: (_isolationScope, callback)=>{\n            return withIsolationScope(callback);\n        },\n        getCurrentScope: ()=>getAsyncContextStack().getScope(),\n        getIsolationScope: ()=>getAsyncContextStack().getIsolationScope()\n    };\n}\n //# sourceMappingURL=stackStrategy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/baseclient.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/baseclient.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/api.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./envelope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/envelope.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./integration.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/session.js\");\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_hoist_clientreport_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils-hoist/clientreport.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js\");\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils-hoist/error.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/error.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n/* harmony import */ var _utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/prepareEvent.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */ class BaseClient {\n    /** Options passed to the SDK. */ /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */ /** Array of set up integrations. */ /** Number of calls being processed */ /** Holds flushable  */ // eslint-disable-next-line @typescript-eslint/ban-types\n    /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */ constructor(options){\n        this._options = options;\n        this._integrations = {};\n        this._numProcessing = 0;\n        this._outcomes = {};\n        this._hooks = {};\n        this._eventProcessors = [];\n        if (options.dsn) {\n            this._dsn = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.makeDsn)(options.dsn);\n        } else {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"No DSN provided, client will not send events.\");\n        }\n        if (this._dsn) {\n            const url = (0,_api_js__WEBPACK_IMPORTED_MODULE_3__.getEnvelopeEndpointWithUrlEncodedAuth)(this._dsn, options.tunnel, options._metadata ? options._metadata.sdk : undefined);\n            this._transport = options.transport({\n                tunnel: this._options.tunnel,\n                recordDroppedEvent: this.recordDroppedEvent.bind(this),\n                ...options.transportOptions,\n                url\n            });\n        }\n        // TODO(v9): Remove this deprecation warning\n        const tracingOptions = [\n            \"enableTracing\",\n            \"tracesSampleRate\",\n            \"tracesSampler\"\n        ];\n        const undefinedOption = tracingOptions.find((option)=>option in options && options[option] == undefined);\n        if (undefinedOption) {\n            (0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.consoleSandbox)(()=>{\n                // eslint-disable-next-line no-console\n                console.warn(`[Sentry] Deprecation warning: \\`${undefinedOption}\\` is set to undefined, which leads to tracing being enabled. In v9, a value of \\`undefined\\` will result in tracing being disabled.`);\n            });\n        }\n    }\n    /**\n   * @inheritDoc\n   */ captureException(exception, hint, scope) {\n        const eventId = (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n        // ensure we haven't captured this very object before\n        if ((0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.checkOrSetAlreadyCaught)(exception)) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(ALREADY_SEEN_ERROR);\n            return eventId;\n        }\n        const hintWithEventId = {\n            event_id: eventId,\n            ...hint\n        };\n        this._process(this.eventFromException(exception, hintWithEventId).then((event)=>this._captureEvent(event, hintWithEventId, scope)));\n        return hintWithEventId.event_id;\n    }\n    /**\n   * @inheritDoc\n   */ captureMessage(message, level, hint, currentScope) {\n        const hintWithEventId = {\n            event_id: (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)(),\n            ...hint\n        };\n        const eventMessage = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isParameterizedString)(message) ? message : String(message);\n        const promisedEvent = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isPrimitive)(message) ? this.eventFromMessage(eventMessage, level, hintWithEventId) : this.eventFromException(message, hintWithEventId);\n        this._process(promisedEvent.then((event)=>this._captureEvent(event, hintWithEventId, currentScope)));\n        return hintWithEventId.event_id;\n    }\n    /**\n   * @inheritDoc\n   */ captureEvent(event, hint, currentScope) {\n        const eventId = (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n        // ensure we haven't captured this very object before\n        if (hint && hint.originalException && (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.checkOrSetAlreadyCaught)(hint.originalException)) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(ALREADY_SEEN_ERROR);\n            return eventId;\n        }\n        const hintWithEventId = {\n            event_id: eventId,\n            ...hint\n        };\n        const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n        const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n        this._process(this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope));\n        return hintWithEventId.event_id;\n    }\n    /**\n   * @inheritDoc\n   */ captureSession(session) {\n        if (!(typeof session.release === \"string\")) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Discarded session because of missing or non-string release\");\n        } else {\n            this.sendSession(session);\n            // After sending, we set init false to indicate it's not the first occurrence\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(session, {\n                init: false\n            });\n        }\n    }\n    /**\n   * @inheritDoc\n   */ getDsn() {\n        return this._dsn;\n    }\n    /**\n   * @inheritDoc\n   */ getOptions() {\n        return this._options;\n    }\n    /**\n   * @see SdkMetadata\n   *\n   * @return The metadata of the SDK\n   */ getSdkMetadata() {\n        return this._options._metadata;\n    }\n    /**\n   * @inheritDoc\n   */ getTransport() {\n        return this._transport;\n    }\n    /**\n   * @inheritDoc\n   */ flush(timeout) {\n        const transport = this._transport;\n        if (transport) {\n            this.emit(\"flush\");\n            return this._isClientDoneProcessing(timeout).then((clientFinished)=>{\n                return transport.flush(timeout).then((transportFlushed)=>clientFinished && transportFlushed);\n            });\n        } else {\n            return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.resolvedSyncPromise)(true);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ close(timeout) {\n        return this.flush(timeout).then((result)=>{\n            this.getOptions().enabled = false;\n            this.emit(\"close\");\n            return result;\n        });\n    }\n    /** Get all installed event processors. */ getEventProcessors() {\n        return this._eventProcessors;\n    }\n    /** @inheritDoc */ addEventProcessor(eventProcessor) {\n        this._eventProcessors.push(eventProcessor);\n    }\n    /** @inheritdoc */ init() {\n        if (this._isEnabled() || // Force integrations to be setup even if no DSN was set when we have\n        // Spotlight enabled. This is particularly important for browser as we\n        // don't support the `spotlight` option there and rely on the users\n        // adding the `spotlightBrowserIntegration()` to their integrations which\n        // wouldn't get initialized with the check below when there's no DSN set.\n        this._options.integrations.some(({ name })=>name.startsWith(\"Spotlight\"))) {\n            this._setupIntegrations();\n        }\n    }\n    /**\n   * Gets an installed integration by its name.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n   */ getIntegrationByName(integrationName) {\n        return this._integrations[integrationName];\n    }\n    /**\n   * @inheritDoc\n   */ addIntegration(integration) {\n        const isAlreadyInstalled = this._integrations[integration.name];\n        // This hook takes care of only installing if not already installed\n        (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.setupIntegration)(this, integration, this._integrations);\n        // Here we need to check manually to make sure to not run this multiple times\n        if (!isAlreadyInstalled) {\n            (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.afterSetupIntegrations)(this, [\n                integration\n            ]);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ sendEvent(event, hint = {}) {\n        this.emit(\"beforeSendEvent\", event, hint);\n        let env = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createEventEnvelope)(event, this._dsn, this._options._metadata, this._options.tunnel);\n        for (const attachment of hint.attachments || []){\n            env = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_10__.addItemToEnvelope)(env, (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_10__.createAttachmentEnvelopeItem)(attachment));\n        }\n        const promise = this.sendEnvelope(env);\n        if (promise) {\n            promise.then((sendResponse)=>this.emit(\"afterSendEvent\", event, sendResponse), null);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ sendSession(session) {\n        const env = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createSessionEnvelope)(session, this._dsn, this._options._metadata, this._options.tunnel);\n        // sendEnvelope should not throw\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.sendEnvelope(env);\n    }\n    /**\n   * @inheritDoc\n   */ recordDroppedEvent(reason, category, eventOrCount) {\n        if (this._options.sendClientReports) {\n            // TODO v9: We do not need the `event` passed as third argument anymore, and can possibly remove this overload\n            // If event is passed as third argument, we assume this is a count of 1\n            const count = typeof eventOrCount === \"number\" ? eventOrCount : 1;\n            // We want to track each category (error, transaction, session, replay_event) separately\n            // but still keep the distinction between different type of outcomes.\n            // We could use nested maps, but it's much easier to read and type this way.\n            // A correct type for map-based implementation if we want to go that route\n            // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n            // With typescript 4.1 we could even use template literal types\n            const key = `${reason}:${category}`;\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : \"\"}`);\n            this._outcomes[key] = (this._outcomes[key] || 0) + count;\n        }\n    }\n    // Keep on() & emit() signatures in sync with types' client.ts interface\n    /* eslint-disable @typescript-eslint/unified-signatures */ /** @inheritdoc */ /** @inheritdoc */ on(hook, callback) {\n        const hooks = this._hooks[hook] = this._hooks[hook] || [];\n        // @ts-expect-error We assume the types are correct\n        hooks.push(callback);\n        // This function returns a callback execution handler that, when invoked,\n        // deregisters a callback. This is crucial for managing instances where callbacks\n        // need to be unregistered to prevent self-referencing in callback closures,\n        // ensuring proper garbage collection.\n        return ()=>{\n            // @ts-expect-error We assume the types are correct\n            const cbIndex = hooks.indexOf(callback);\n            if (cbIndex > -1) {\n                hooks.splice(cbIndex, 1);\n            }\n        };\n    }\n    /** @inheritdoc */ /** @inheritdoc */ emit(hook, ...rest) {\n        const callbacks = this._hooks[hook];\n        if (callbacks) {\n            callbacks.forEach((callback)=>callback(...rest));\n        }\n    }\n    /**\n   * @inheritdoc\n   */ sendEnvelope(envelope) {\n        this.emit(\"beforeEnvelope\", envelope);\n        if (this._isEnabled() && this._transport) {\n            return this._transport.send(envelope).then(null, (reason)=>{\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error while sending envelope:\", reason);\n                return reason;\n            });\n        }\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Transport disabled\");\n        return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.resolvedSyncPromise)({});\n    }\n    /* eslint-enable @typescript-eslint/unified-signatures */ /** Setup integrations for this client. */ _setupIntegrations() {\n        const { integrations } = this._options;\n        this._integrations = (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.setupIntegrations)(this, integrations);\n        (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.afterSetupIntegrations)(this, integrations);\n    }\n    /** Updates existing session based on the provided event */ _updateSessionFromEvent(session, event) {\n        let crashed = event.level === \"fatal\";\n        let errored = false;\n        const exceptions = event.exception && event.exception.values;\n        if (exceptions) {\n            errored = true;\n            for (const ex of exceptions){\n                const mechanism = ex.mechanism;\n                if (mechanism && mechanism.handled === false) {\n                    crashed = true;\n                    break;\n                }\n            }\n        }\n        // A session is updated and that session update is sent in only one of the two following scenarios:\n        // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n        // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n        const sessionNonTerminal = session.status === \"ok\";\n        const shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n        if (shouldUpdateAndSend) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(session, {\n                ...crashed && {\n                    status: \"crashed\"\n                },\n                errors: session.errors || Number(errored || crashed)\n            });\n            this.captureSession(session);\n        }\n    }\n    /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */ _isClientDoneProcessing(timeout) {\n        return new _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.SyncPromise((resolve)=>{\n            let ticked = 0;\n            const tick = 1;\n            const interval = setInterval(()=>{\n                if (this._numProcessing == 0) {\n                    clearInterval(interval);\n                    resolve(true);\n                } else {\n                    ticked += tick;\n                    if (timeout && ticked >= timeout) {\n                        clearInterval(interval);\n                        resolve(false);\n                    }\n                }\n            }, tick);\n        });\n    }\n    /** Determines whether this SDK is enabled and a transport is present. */ _isEnabled() {\n        return this.getOptions().enabled !== false && this._transport !== undefined;\n    }\n    /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */ _prepareEvent(event, hint, currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_11__.getCurrentScope)(), isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_11__.getIsolationScope)()) {\n        const options = this.getOptions();\n        const integrations = Object.keys(this._integrations);\n        if (!hint.integrations && integrations.length > 0) {\n            hint.integrations = integrations;\n        }\n        this.emit(\"preprocessEvent\", event, hint);\n        if (!event.type) {\n            isolationScope.setLastEventId(event.event_id || hint.event_id);\n        }\n        return (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_12__.prepareEvent)(options, event, hint, currentScope, this, isolationScope).then((evt)=>{\n            if (evt === null) {\n                return evt;\n            }\n            evt.contexts = {\n                trace: (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_11__.getTraceContextFromScope)(currentScope),\n                ...evt.contexts\n            };\n            const dynamicSamplingContext = (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.getDynamicSamplingContextFromScope)(this, currentScope);\n            evt.sdkProcessingMetadata = {\n                dynamicSamplingContext,\n                ...evt.sdkProcessingMetadata\n            };\n            return evt;\n        });\n    }\n    /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */ _captureEvent(event, hint = {}, scope) {\n        return this._processEvent(event, hint, scope).then((finalEvent)=>{\n            return finalEvent.event_id;\n        }, (reason)=>{\n            if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n                // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n                // control flow, log just the message (no stack) as a log-level log.\n                if (reason instanceof _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError && reason.logLevel === \"log\") {\n                    _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(reason.message);\n                } else {\n                    _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(reason);\n                }\n            }\n            return undefined;\n        });\n    }\n    /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */ _processEvent(event, hint, currentScope) {\n        const options = this.getOptions();\n        const { sampleRate } = options;\n        const isTransaction = isTransactionEvent(event);\n        const isError = isErrorEvent(event);\n        const eventType = event.type || \"error\";\n        const beforeSendLabel = `before send for type \\`${eventType}\\``;\n        // 1.0 === 100% events are sent\n        // 0.0 === 0% events are sent\n        // Sampling for transaction happens somewhere else\n        const parsedSampleRate = typeof sampleRate === \"undefined\" ? undefined : (0,_utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_15__.parseSampleRate)(sampleRate);\n        if (isError && typeof parsedSampleRate === \"number\" && Math.random() > parsedSampleRate) {\n            this.recordDroppedEvent(\"sample_rate\", \"error\", event);\n            return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.rejectedSyncPromise)(new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, \"log\"));\n        }\n        const dataCategory = eventType === \"replay_event\" ? \"replay\" : eventType;\n        const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n        const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n        return this._prepareEvent(event, hint, currentScope, capturedSpanIsolationScope).then((prepared)=>{\n            if (prepared === null) {\n                this.recordDroppedEvent(\"event_processor\", dataCategory, event);\n                throw new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(\"An event processor returned `null`, will not send event.\", \"log\");\n            }\n            const isInternalException = hint.data && hint.data.__sentry__ === true;\n            if (isInternalException) {\n                return prepared;\n            }\n            const result = processBeforeSend(this, options, prepared, hint);\n            return _validateBeforeSendResult(result, beforeSendLabel);\n        }).then((processedEvent)=>{\n            if (processedEvent === null) {\n                this.recordDroppedEvent(\"before_send\", dataCategory, event);\n                if (isTransaction) {\n                    const spans = event.spans || [];\n                    // the transaction itself counts as one span, plus all the child spans that are added\n                    const spanCount = 1 + spans.length;\n                    this.recordDroppedEvent(\"before_send\", \"span\", spanCount);\n                }\n                throw new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, \"log\");\n            }\n            const session = currentScope && currentScope.getSession();\n            if (!isTransaction && session) {\n                this._updateSessionFromEvent(session, processedEvent);\n            }\n            if (isTransaction) {\n                const spanCountBefore = processedEvent.sdkProcessingMetadata && processedEvent.sdkProcessingMetadata.spanCountBeforeProcessing || 0;\n                const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n                const droppedSpanCount = spanCountBefore - spanCountAfter;\n                if (droppedSpanCount > 0) {\n                    this.recordDroppedEvent(\"before_send\", \"span\", droppedSpanCount);\n                }\n            }\n            // None of the Sentry built event processor will update transaction name,\n            // so if the transaction name has been changed by an event processor, we know\n            // it has to come from custom event processor added by a user\n            const transactionInfo = processedEvent.transaction_info;\n            if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n                const source = \"custom\";\n                processedEvent.transaction_info = {\n                    ...transactionInfo,\n                    source\n                };\n            }\n            this.sendEvent(processedEvent, hint);\n            return processedEvent;\n        }).then(null, (reason)=>{\n            if (reason instanceof _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError) {\n                throw reason;\n            }\n            this.captureException(reason, {\n                data: {\n                    __sentry__: true\n                },\n                originalException: reason\n            });\n            throw new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`);\n        });\n    }\n    /**\n   * Occupies the client with processing and event\n   */ _process(promise) {\n        this._numProcessing++;\n        void promise.then((value)=>{\n            this._numProcessing--;\n            return value;\n        }, (reason)=>{\n            this._numProcessing--;\n            return reason;\n        });\n    }\n    /**\n   * Clears outcomes on this client and returns them.\n   */ _clearOutcomes() {\n        const outcomes = this._outcomes;\n        this._outcomes = {};\n        return Object.entries(outcomes).map(([key, quantity])=>{\n            const [reason, category] = key.split(\":\");\n            return {\n                reason,\n                category,\n                quantity\n            };\n        });\n    }\n    /**\n   * Sends client reports as an envelope.\n   */ _flushOutcomes() {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"Flushing outcomes...\");\n        const outcomes = this._clearOutcomes();\n        if (outcomes.length === 0) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"No outcomes to send\");\n            return;\n        }\n        // This is really the only place where we want to check for a DSN and only send outcomes then\n        if (!this._dsn) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"No dsn provided, will not send outcomes\");\n            return;\n        }\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"Sending outcomes:\", outcomes);\n        const envelope = (0,_utils_hoist_clientreport_js__WEBPACK_IMPORTED_MODULE_16__.createClientReportEnvelope)(outcomes, this._options.tunnel && (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(this._dsn));\n        // sendEnvelope should not throw\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.sendEnvelope(envelope);\n    }\n}\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */ function _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n    const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n    if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isThenable)(beforeSendResult)) {\n        return beforeSendResult.then((event)=>{\n            if (!(0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(event) && event !== null) {\n                throw new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(invalidValueError);\n            }\n            return event;\n        }, (e)=>{\n            throw new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(`${beforeSendLabel} rejected with ${e}`);\n        });\n    } else if (!(0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(beforeSendResult) && beforeSendResult !== null) {\n        throw new _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_14__.SentryError(invalidValueError);\n    }\n    return beforeSendResult;\n}\n/**\n * Process the matching `beforeSendXXX` callback.\n */ function processBeforeSend(client, options, event, hint) {\n    const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;\n    if (isErrorEvent(event) && beforeSend) {\n        return beforeSend(event, hint);\n    }\n    if (isTransactionEvent(event)) {\n        if (event.spans && beforeSendSpan) {\n            const processedSpans = [];\n            for (const span of event.spans){\n                const processedSpan = beforeSendSpan(span);\n                if (processedSpan) {\n                    processedSpans.push(processedSpan);\n                } else {\n                    (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_17__.showSpanDropWarning)();\n                    client.recordDroppedEvent(\"before_send\", \"span\");\n                }\n            }\n            event.spans = processedSpans;\n        }\n        if (beforeSendTransaction) {\n            if (event.spans) {\n                // We store the # of spans before processing in SDK metadata,\n                // so we can compare it afterwards to determine how many spans were dropped\n                const spanCountBefore = event.spans.length;\n                event.sdkProcessingMetadata = {\n                    ...event.sdkProcessingMetadata,\n                    spanCountBeforeProcessing: spanCountBefore\n                };\n            }\n            return beforeSendTransaction(event, hint);\n        }\n    }\n    return event;\n}\nfunction isErrorEvent(event) {\n    return event.type === undefined;\n}\nfunction isTransactionEvent(event) {\n    return event.type === \"transaction\";\n}\n //# sourceMappingURL=baseclient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/baseclient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/breadcrumbs.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/breadcrumbs.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addBreadcrumb: () => (/* binding */ addBreadcrumb)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n\n\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */ const DEFAULT_BREADCRUMBS = 100;\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */ function addBreadcrumb(breadcrumb, hint) {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    if (!client) return;\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n    if (maxBreadcrumbs <= 0) return;\n    const timestamp = (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__.dateTimestampInSeconds)();\n    const mergedBreadcrumb = {\n        timestamp,\n        ...breadcrumb\n    };\n    const finalBreadcrumb = beforeBreadcrumb ? (0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.consoleSandbox)(()=>beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n    if (finalBreadcrumb === null) return;\n    if (client.emit) {\n        client.emit(\"beforeAddBreadcrumb\", finalBreadcrumb, hint);\n    }\n    isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n //# sourceMappingURL=breadcrumbs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9icmVhZGNydW1icy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtFO0FBQ1Q7QUFDTTtBQUUvRDs7O0NBR0MsR0FDRCxNQUFNSSxzQkFBc0I7QUFFNUI7Ozs7O0NBS0MsR0FDRCxTQUFTQyxjQUFjQyxVQUFVLEVBQUVDLElBQUk7SUFDckMsTUFBTUMsU0FBU1IsNERBQVNBO0lBQ3hCLE1BQU1TLGlCQUFpQlIsb0VBQWlCQTtJQUV4QyxJQUFJLENBQUNPLFFBQVE7SUFFYixNQUFNLEVBQUVFLG1CQUFtQixJQUFJLEVBQUVDLGlCQUFpQlAsbUJBQW1CLEVBQUUsR0FBR0ksT0FBT0ksVUFBVTtJQUUzRixJQUFJRCxrQkFBa0IsR0FBRztJQUV6QixNQUFNRSxZQUFZViw0RUFBc0JBO0lBQ3hDLE1BQU1XLG1CQUFtQjtRQUFFRDtRQUFXLEdBQUdQLFVBQVU7SUFBQztJQUNwRCxNQUFNUyxrQkFBa0JMLG1CQUNuQlIsc0VBQWNBLENBQUMsSUFBTVEsaUJBQWlCSSxrQkFBa0JQLFNBQ3pETztJQUVKLElBQUlDLG9CQUFvQixNQUFNO0lBRTlCLElBQUlQLE9BQU9RLElBQUksRUFBRTtRQUNmUixPQUFPUSxJQUFJLENBQUMsdUJBQXVCRCxpQkFBaUJSO0lBQ3REO0lBRUFFLGVBQWVKLGFBQWEsQ0FBQ1UsaUJBQWlCSjtBQUNoRDtBQUV5QixDQUN6Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vYnJlYWRjcnVtYnMuanM/YzU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQsIGdldElzb2xhdGlvblNjb3BlIH0gZnJvbSAnLi9jdXJyZW50U2NvcGVzLmpzJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94IH0gZnJvbSAnLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJy4vdXRpbHMtaG9pc3QvdGltZS5qcyc7XG5cbi8qKlxuICogRGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gQ2FuIGJlIG92ZXJ3cml0dGVuXG4gKiB3aXRoIHtAbGluayBPcHRpb25zLm1heEJyZWFkY3J1bWJzfS5cbiAqL1xuY29uc3QgREVGQVVMVF9CUkVBRENSVU1CUyA9IDEwMDtcblxuLyoqXG4gKiBSZWNvcmRzIGEgbmV3IGJyZWFkY3J1bWIgd2hpY2ggd2lsbCBiZSBhdHRhY2hlZCB0byBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEJyZWFkY3J1bWJzIHdpbGwgYmUgYWRkZWQgdG8gc3Vic2VxdWVudCBldmVudHMgdG8gcHJvdmlkZSBtb3JlIGNvbnRleHQgb25cbiAqIHVzZXIncyBhY3Rpb25zIHByaW9yIHRvIGFuIGVycm9yIG9yIGNyYXNoLlxuICovXG5mdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIGhpbnQpIHtcbiAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gZ2V0SXNvbGF0aW9uU2NvcGUoKTtcblxuICBpZiAoIWNsaWVudCkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgYmVmb3JlQnJlYWRjcnVtYiA9IG51bGwsIG1heEJyZWFkY3J1bWJzID0gREVGQVVMVF9CUkVBRENSVU1CUyB9ID0gY2xpZW50LmdldE9wdGlvbnMoKTtcblxuICBpZiAobWF4QnJlYWRjcnVtYnMgPD0gMCkgcmV0dXJuO1xuXG4gIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKTtcbiAgY29uc3QgbWVyZ2VkQnJlYWRjcnVtYiA9IHsgdGltZXN0YW1wLCAuLi5icmVhZGNydW1iIH07XG4gIGNvbnN0IGZpbmFsQnJlYWRjcnVtYiA9IGJlZm9yZUJyZWFkY3J1bWJcbiAgICA/IChjb25zb2xlU2FuZGJveCgoKSA9PiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpKSApXG4gICAgOiBtZXJnZWRCcmVhZGNydW1iO1xuXG4gIGlmIChmaW5hbEJyZWFkY3J1bWIgPT09IG51bGwpIHJldHVybjtcblxuICBpZiAoY2xpZW50LmVtaXQpIHtcbiAgICBjbGllbnQuZW1pdCgnYmVmb3JlQWRkQnJlYWRjcnVtYicsIGZpbmFsQnJlYWRjcnVtYiwgaGludCk7XG4gIH1cblxuICBpc29sYXRpb25TY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYiwgbWF4QnJlYWRjcnVtYnMpO1xufVxuXG5leHBvcnQgeyBhZGRCcmVhZGNydW1iIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1icy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRDbGllbnQiLCJnZXRJc29sYXRpb25TY29wZSIsImNvbnNvbGVTYW5kYm94IiwiZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyIsIkRFRkFVTFRfQlJFQURDUlVNQlMiLCJhZGRCcmVhZGNydW1iIiwiYnJlYWRjcnVtYiIsImhpbnQiLCJjbGllbnQiLCJpc29sYXRpb25TY29wZSIsImJlZm9yZUJyZWFkY3J1bWIiLCJtYXhCcmVhZGNydW1icyIsImdldE9wdGlvbnMiLCJ0aW1lc3RhbXAiLCJtZXJnZWRCcmVhZGNydW1iIiwiZmluYWxCcmVhZGNydW1iIiwiZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/breadcrumbs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/carrier.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/carrier.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMainCarrier: () => (/* binding */ getMainCarrier),\n/* harmony export */   getSentryCarrier: () => (/* binding */ getSentryCarrier)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/version.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/version.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */ /**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/ function getMainCarrier() {\n    // This ensures a Sentry carrier exists\n    getSentryCarrier(_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ);\n    return _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n}\n/** Will either get the existing sentry carrier, or create a new one. */ function getSentryCarrier(carrier) {\n    const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n    // For now: First SDK that sets the .version property wins\n    __SENTRY__.version = __SENTRY__.version || _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION;\n    // Intentionally populating and returning the version of \"this\" SDK instance\n    // rather than what's set in .version so that \"this\" SDK always gets its carrier\n    return __SENTRY__[_utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION] = __SENTRY__[_utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION] || {};\n}\n //# sourceMappingURL=carrier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jYXJyaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDQztBQUV4RDs7O0NBR0MsR0FFRDs7Ozs7O0VBTUUsR0FDRixTQUFTRTtJQUNQLHVDQUF1QztJQUN2Q0MsaUJBQWlCRixpRUFBVUE7SUFDM0IsT0FBT0EsaUVBQVVBO0FBQ25CO0FBRUEsc0VBQXNFLEdBQ3RFLFNBQVNFLGlCQUFpQkMsT0FBTztJQUMvQixNQUFNQyxhQUFjRCxRQUFRQyxVQUFVLEdBQUdELFFBQVFDLFVBQVUsSUFBSSxDQUFDO0lBRWhFLDBEQUEwRDtJQUMxREEsV0FBV0MsT0FBTyxHQUFHRCxXQUFXQyxPQUFPLElBQUlOLGdFQUFXQTtJQUV0RCw0RUFBNEU7SUFDNUUsZ0ZBQWdGO0lBQ2hGLE9BQVFLLFVBQVUsQ0FBQ0wsZ0VBQVdBLENBQUMsR0FBR0ssVUFBVSxDQUFDTCxnRUFBV0EsQ0FBQyxJQUFJLENBQUM7QUFDaEU7QUFFNEMsQ0FDNUMsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2NhcnJpZXIuanM/ZDEzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTREtfVkVSU0lPTiB9IGZyb20gJy4vdXRpbHMtaG9pc3QvdmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi91dGlscy1ob2lzdC93b3JsZHdpZGUuanMnO1xuXG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGdsb2JhbGx5IGFjY2Vzc2libGUgcHJvcGVydGllcyBhbmQgbWFpbnRhaW5zIGEgc2NvcGUgc3RhY2suXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnbG9iYWwgc2hpbSByZWdpc3RyeS5cbiAqXG4gKiBGSVhNRTogVGhpcyBmdW5jdGlvbiBpcyBwcm9ibGVtYXRpYywgYmVjYXVzZSBkZXNwaXRlIGFsd2F5cyByZXR1cm5pbmcgYSB2YWxpZCBDYXJyaWVyLFxuICogaXQgaGFzIGFuIG9wdGlvbmFsIGBfX1NFTlRSWV9fYCBwcm9wZXJ0eSwgd2hpY2ggdGhlbiBpbiB0dXJuIHJlcXVpcmVzIHVzIHRvIGFsd2F5cyBwZXJmb3JtIGFuIHVubmVjZXNzYXJ5IGNoZWNrXG4gKiBhdCB0aGUgY2FsbC1zaXRlLiBXZSBhbHdheXMgYWNjZXNzIHRoZSBjYXJyaWVyIHRocm91Z2ggdGhpcyBmdW5jdGlvbiwgc28gd2UgY2FuIGd1YXJhbnRlZSB0aGF0IGBfX1NFTlRSWV9fYCBpcyB0aGVyZS5cbiAqKi9cbmZ1bmN0aW9uIGdldE1haW5DYXJyaWVyKCkge1xuICAvLyBUaGlzIGVuc3VyZXMgYSBTZW50cnkgY2FycmllciBleGlzdHNcbiAgZ2V0U2VudHJ5Q2FycmllcihHTE9CQUxfT0JKKTtcbiAgcmV0dXJuIEdMT0JBTF9PQko7XG59XG5cbi8qKiBXaWxsIGVpdGhlciBnZXQgdGhlIGV4aXN0aW5nIHNlbnRyeSBjYXJyaWVyLCBvciBjcmVhdGUgYSBuZXcgb25lLiAqL1xuZnVuY3Rpb24gZ2V0U2VudHJ5Q2FycmllcihjYXJyaWVyKSB7XG4gIGNvbnN0IF9fU0VOVFJZX18gPSAoY2Fycmllci5fX1NFTlRSWV9fID0gY2Fycmllci5fX1NFTlRSWV9fIHx8IHt9KTtcblxuICAvLyBGb3Igbm93OiBGaXJzdCBTREsgdGhhdCBzZXRzIHRoZSAudmVyc2lvbiBwcm9wZXJ0eSB3aW5zXG4gIF9fU0VOVFJZX18udmVyc2lvbiA9IF9fU0VOVFJZX18udmVyc2lvbiB8fCBTREtfVkVSU0lPTjtcblxuICAvLyBJbnRlbnRpb25hbGx5IHBvcHVsYXRpbmcgYW5kIHJldHVybmluZyB0aGUgdmVyc2lvbiBvZiBcInRoaXNcIiBTREsgaW5zdGFuY2VcbiAgLy8gcmF0aGVyIHRoYW4gd2hhdCdzIHNldCBpbiAudmVyc2lvbiBzbyB0aGF0IFwidGhpc1wiIFNESyBhbHdheXMgZ2V0cyBpdHMgY2FycmllclxuICByZXR1cm4gKF9fU0VOVFJZX19bU0RLX1ZFUlNJT05dID0gX19TRU5UUllfX1tTREtfVkVSU0lPTl0gfHwge30pO1xufVxuXG5leHBvcnQgeyBnZXRNYWluQ2FycmllciwgZ2V0U2VudHJ5Q2FycmllciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2Fycmllci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTREtfVkVSU0lPTiIsIkdMT0JBTF9PQkoiLCJnZXRNYWluQ2FycmllciIsImdldFNlbnRyeUNhcnJpZXIiLCJjYXJyaWVyIiwiX19TRU5UUllfXyIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/carrier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT)\n/* harmony export */ });\nconst DEFAULT_ENVIRONMENT = \"production\";\n //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLHNCQUFzQjtBQUVHLENBQy9CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jb25zdGFudHMuanM/MTEwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX0VOVklST05NRU5UID0gJ3Byb2R1Y3Rpb24nO1xuXG5leHBvcnQgeyBERUZBVUxUX0VOVklST05NRU5UIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOlsiREVGQVVMVF9FTlZJUk9OTUVOVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/currentScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   getCurrentScope: () => (/* binding */ getCurrentScope),\n/* harmony export */   getGlobalScope: () => (/* binding */ getGlobalScope),\n/* harmony export */   getIsolationScope: () => (/* binding */ getIsolationScope),\n/* harmony export */   getTraceContextFromScope: () => (/* binding */ getTraceContextFromScope),\n/* harmony export */   withIsolationScope: () => (/* binding */ withIsolationScope),\n/* harmony export */   withScope: () => (/* binding */ withScope)\n/* harmony export */ });\n/* harmony import */ var _asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./asyncContext/index.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carrier.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n\n/**\n * Get the currently active scope.\n */ function getCurrentScope() {\n    const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n    const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n    return acs.getCurrentScope();\n}\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */ function getIsolationScope() {\n    const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n    const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n    return acs.getIsolationScope();\n}\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */ function getGlobalScope() {\n    return (0,_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_2__.getGlobalSingleton)(\"globalScope\", ()=>new _scope_js__WEBPACK_IMPORTED_MODULE_3__.Scope());\n}\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */ /**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */ function withScope(...rest) {\n    const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n    const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n    // If a scope is defined, we want to make this the active scope instead of the default one\n    if (rest.length === 2) {\n        const [scope, callback] = rest;\n        if (!scope) {\n            return acs.withScope(callback);\n        }\n        return acs.withSetScope(scope, callback);\n    }\n    return acs.withScope(rest[0]);\n}\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */ /**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */ function withIsolationScope(...rest) {\n    const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n    const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n    // If a scope is defined, we want to make this the active scope instead of the default one\n    if (rest.length === 2) {\n        const [isolationScope, callback] = rest;\n        if (!isolationScope) {\n            return acs.withIsolationScope(callback);\n        }\n        return acs.withSetIsolationScope(isolationScope, callback);\n    }\n    return acs.withIsolationScope(rest[0]);\n}\n/**\n * Get the currently active client.\n */ function getClient() {\n    return getCurrentScope().getClient();\n}\n/**\n * Get a trace context for the given scope.\n */ function getTraceContextFromScope(scope) {\n    const propagationContext = scope.getPropagationContext();\n    // TODO(v9): Use generateSpanId() instead of spanId\n    // eslint-disable-next-line deprecation/deprecation\n    const { traceId, spanId, parentSpanId } = propagationContext;\n    const traceContext = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_4__.dropUndefinedKeys)({\n        trace_id: traceId,\n        span_id: spanId,\n        parent_span_id: parentSpanId\n    });\n    return traceContext;\n}\n //# sourceMappingURL=currentScopes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jdXJyZW50U2NvcGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFrRTtBQUNwQjtBQUNYO0FBQ3lCO0FBQ0k7QUFFaEU7O0NBRUMsR0FDRCxTQUFTSztJQUNQLE1BQU1DLFVBQVVMLDJEQUFjQTtJQUM5QixNQUFNTSxNQUFNUCwrRUFBdUJBLENBQUNNO0lBQ3BDLE9BQU9DLElBQUlGLGVBQWU7QUFDNUI7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRztJQUNQLE1BQU1GLFVBQVVMLDJEQUFjQTtJQUM5QixNQUFNTSxNQUFNUCwrRUFBdUJBLENBQUNNO0lBQ3BDLE9BQU9DLElBQUlDLGlCQUFpQjtBQUM5QjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNDO0lBQ1AsT0FBT0wsNkVBQWtCQSxDQUFDLGVBQWUsSUFBTSxJQUFJRiw0Q0FBS0E7QUFDMUQ7QUFFQTs7OztDQUlDLEdBRUQ7O0NBRUMsR0FDRCxTQUFTUSxVQUNQLEdBQUdDLElBQUk7SUFFUCxNQUFNTCxVQUFVTCwyREFBY0E7SUFDOUIsTUFBTU0sTUFBTVAsK0VBQXVCQSxDQUFDTTtJQUVwQywwRkFBMEY7SUFDMUYsSUFBSUssS0FBS0MsTUFBTSxLQUFLLEdBQUc7UUFDckIsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdIO1FBRTFCLElBQUksQ0FBQ0UsT0FBTztZQUNWLE9BQU9OLElBQUlHLFNBQVMsQ0FBQ0k7UUFDdkI7UUFFQSxPQUFPUCxJQUFJUSxZQUFZLENBQUNGLE9BQU9DO0lBQ2pDO0lBRUEsT0FBT1AsSUFBSUcsU0FBUyxDQUFDQyxJQUFJLENBQUMsRUFBRTtBQUM5QjtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUVEOztDQUVDLEdBQ0QsU0FBU0ssbUJBQ1AsR0FBR0wsSUFBSTtJQUdQLE1BQU1MLFVBQVVMLDJEQUFjQTtJQUM5QixNQUFNTSxNQUFNUCwrRUFBdUJBLENBQUNNO0lBRXBDLDBGQUEwRjtJQUMxRixJQUFJSyxLQUFLQyxNQUFNLEtBQUssR0FBRztRQUNyQixNQUFNLENBQUNLLGdCQUFnQkgsU0FBUyxHQUFHSDtRQUVuQyxJQUFJLENBQUNNLGdCQUFnQjtZQUNuQixPQUFPVixJQUFJUyxrQkFBa0IsQ0FBQ0Y7UUFDaEM7UUFFQSxPQUFPUCxJQUFJVyxxQkFBcUIsQ0FBQ0QsZ0JBQWdCSDtJQUNuRDtJQUVBLE9BQU9QLElBQUlTLGtCQUFrQixDQUFDTCxJQUFJLENBQUMsRUFBRTtBQUN2QztBQUVBOztDQUVDLEdBQ0QsU0FBU1E7SUFDUCxPQUFPZCxrQkFBa0JjLFNBQVM7QUFDcEM7QUFFQTs7Q0FFQyxHQUNELFNBQVNDLHlCQUF5QlAsS0FBSztJQUNyQyxNQUFNUSxxQkFBcUJSLE1BQU1TLHFCQUFxQjtJQUV0RCxtREFBbUQ7SUFDbkQsbURBQW1EO0lBQ25ELE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHSjtJQUUxQyxNQUFNSyxlQUFldkIseUVBQWlCQSxDQUFDO1FBQ3JDd0IsVUFBVUo7UUFDVkssU0FBU0o7UUFDVEssZ0JBQWdCSjtJQUNsQjtJQUVBLE9BQU9DO0FBQ1Q7QUFFa0ksQ0FDbEkseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2N1cnJlbnRTY29wZXMuanM/MGE3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBc3luY0NvbnRleHRTdHJhdGVneSB9IGZyb20gJy4vYXN5bmNDb250ZXh0L2luZGV4LmpzJztcbmltcG9ydCB7IGdldE1haW5DYXJyaWVyIH0gZnJvbSAnLi9jYXJyaWVyLmpzJztcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnLi9zY29wZS5qcyc7XG5pbXBvcnQgeyBkcm9wVW5kZWZpbmVkS2V5cyB9IGZyb20gJy4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJztcbmltcG9ydCB7IGdldEdsb2JhbFNpbmdsZXRvbiB9IGZyb20gJy4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJztcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcbiAgY29uc3QgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IGFjcyA9IGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIpO1xuICByZXR1cm4gYWNzLmdldEN1cnJlbnRTY29wZSgpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBpc29sYXRpb24gc2NvcGUuXG4gKiBUaGUgaXNvbGF0aW9uIHNjb3BlIGlzIGFjdGl2ZSBmb3IgdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGNvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGdldElzb2xhdGlvblNjb3BlKCkge1xuICBjb25zdCBjYXJyaWVyID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2Fycmllcik7XG4gIHJldHVybiBhY3MuZ2V0SXNvbGF0aW9uU2NvcGUoKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGdsb2JhbCBzY29wZS5cbiAqIFRoaXMgc2NvcGUgaXMgYXBwbGllZCB0byBfYWxsXyBldmVudHMuXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNjb3BlKCkge1xuICByZXR1cm4gZ2V0R2xvYmFsU2luZ2xldG9uKCdnbG9iYWxTY29wZScsICgpID0+IG5ldyBTY29wZSgpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBzY29wZSwgb3Igc2V0cyB0aGUgZ2l2ZW4gc2NvcGUgYXMgYWN0aXZlIHNjb3BlIGluIHRoZSBnaXZlbiBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gd2l0aFNjb3BlKFxuICAuLi5yZXN0XG4pIHtcbiAgY29uc3QgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IGFjcyA9IGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIpO1xuXG4gIC8vIElmIGEgc2NvcGUgaXMgZGVmaW5lZCwgd2Ugd2FudCB0byBtYWtlIHRoaXMgdGhlIGFjdGl2ZSBzY29wZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IG9uZVxuICBpZiAocmVzdC5sZW5ndGggPT09IDIpIHtcbiAgICBjb25zdCBbc2NvcGUsIGNhbGxiYWNrXSA9IHJlc3Q7XG5cbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICByZXR1cm4gYWNzLndpdGhTY29wZShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjcy53aXRoU2V0U2NvcGUoc2NvcGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiBhY3Mud2l0aFNjb3BlKHJlc3RbMF0pO1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGZvcmsgdGhlIGN1cnJlbnQgaXNvbGF0aW9uIHNjb3BlIGFuZCB0aGUgY3VycmVudCBzY29wZSBiYXNlZCBvbiB0aGUgY3VycmVudCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LiBJZiBub1xuICogYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBzZXQsIHRoZSBpc29sYXRpb24gc2NvcGUgYW5kIHRoZSBjdXJyZW50IHNjb3BlIHdpbGwgbm90IGJlIGZvcmtlZCAodGhpcyBpcyBjdXJyZW50bHkgdGhlXG4gKiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIGJyb3dzZXIpLlxuICpcbiAqIFVzYWdlIG9mIHRoaXMgZnVuY3Rpb24gaW4gZW52aXJvbm1lbnRzIHdpdGhvdXQgYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBkaXNjb3VyYWdlZCBhbmQgbWF5IGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvdXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCBmb3IgU2VudHJ5IFNESyBhbmQgU0RLIGludGVncmF0aW9uIGRldmVsb3BtZW50LiBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gYmUgdXNlZCBpbiBcIm5vcm1hbFwiXG4gKiBhcHBsaWNhdGlvbnMgZGlyZWN0bHkgYmVjYXVzZSBpdCBjb21lcyB3aXRoIHBpdGZhbGxzLiBVc2UgYXQgeW91ciBvd24gcmlzayFcbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBpc29sYXRpb24gc2NvcGUsIG9yIHNldHMgdGhlIGdpdmVuIGlzb2xhdGlvbiBzY29wZSBhcyBhY3RpdmUgc2NvcGUgaW4gdGhlIGdpdmVuIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiB3aXRoSXNvbGF0aW9uU2NvcGUoXG4gIC4uLnJlc3RcblxuKSB7XG4gIGNvbnN0IGNhcnJpZXIgPSBnZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBnZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyKTtcblxuICAvLyBJZiBhIHNjb3BlIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gbWFrZSB0aGlzIHRoZSBhY3RpdmUgc2NvcGUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBvbmVcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAyKSB7XG4gICAgY29uc3QgW2lzb2xhdGlvblNjb3BlLCBjYWxsYmFja10gPSByZXN0O1xuXG4gICAgaWYgKCFpc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIGFjcy53aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Mud2l0aFNldElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlLCBjYWxsYmFjayk7XG4gIH1cblxuICByZXR1cm4gYWNzLndpdGhJc29sYXRpb25TY29wZShyZXN0WzBdKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2xpZW50LlxuICovXG5mdW5jdGlvbiBnZXRDbGllbnQoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50U2NvcGUoKS5nZXRDbGllbnQoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSB0cmFjZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlQ29udGV4dEZyb21TY29wZShzY29wZSkge1xuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSBzY29wZS5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKTtcblxuICAvLyBUT0RPKHY5KTogVXNlIGdlbmVyYXRlU3BhbklkKCkgaW5zdGVhZCBvZiBzcGFuSWRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IHsgdHJhY2VJZCwgc3BhbklkLCBwYXJlbnRTcGFuSWQgfSA9IHByb3BhZ2F0aW9uQ29udGV4dDtcblxuICBjb25zdCB0cmFjZUNvbnRleHQgPSBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgdHJhY2VfaWQ6IHRyYWNlSWQsXG4gICAgc3Bhbl9pZDogc3BhbklkLFxuICAgIHBhcmVudF9zcGFuX2lkOiBwYXJlbnRTcGFuSWQsXG4gIH0pO1xuXG4gIHJldHVybiB0cmFjZUNvbnRleHQ7XG59XG5cbmV4cG9ydCB7IGdldENsaWVudCwgZ2V0Q3VycmVudFNjb3BlLCBnZXRHbG9iYWxTY29wZSwgZ2V0SXNvbGF0aW9uU2NvcGUsIGdldFRyYWNlQ29udGV4dEZyb21TY29wZSwgd2l0aElzb2xhdGlvblNjb3BlLCB3aXRoU2NvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1cnJlbnRTY29wZXMuanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJnZXRNYWluQ2FycmllciIsIlNjb3BlIiwiZHJvcFVuZGVmaW5lZEtleXMiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJnZXRDdXJyZW50U2NvcGUiLCJjYXJyaWVyIiwiYWNzIiwiZ2V0SXNvbGF0aW9uU2NvcGUiLCJnZXRHbG9iYWxTY29wZSIsIndpdGhTY29wZSIsInJlc3QiLCJsZW5ndGgiLCJzY29wZSIsImNhbGxiYWNrIiwid2l0aFNldFNjb3BlIiwid2l0aElzb2xhdGlvblNjb3BlIiwiaXNvbGF0aW9uU2NvcGUiLCJ3aXRoU2V0SXNvbGF0aW9uU2NvcGUiLCJnZXRDbGllbnQiLCJnZXRUcmFjZUNvbnRleHRGcm9tU2NvcGUiLCJwcm9wYWdhdGlvbkNvbnRleHQiLCJnZXRQcm9wYWdhdGlvbkNvbnRleHQiLCJ0cmFjZUlkIiwic3BhbklkIiwicGFyZW50U3BhbklkIiwidHJhY2VDb250ZXh0IiwidHJhY2VfaWQiLCJzcGFuX2lkIiwicGFyZW50X3NwYW5faWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsT0FBT0MscUJBQXFCLGVBQWVBO0FBRXpDLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcz9hNWYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydCB7IERFQlVHX0JVSUxEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsIl9fU0VOVFJZX0RFQlVHX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/defaultScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/defaultScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultCurrentScope: () => (/* binding */ getDefaultCurrentScope),\n/* harmony export */   getDefaultIsolationScope: () => (/* binding */ getDefaultIsolationScope)\n/* harmony export */ });\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n/** Get the default current scope. */ function getDefaultCurrentScope() {\n    return (0,_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)(\"defaultCurrentScope\", ()=>new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope());\n}\n/** Get the default isolation scope. */ function getDefaultIsolationScope() {\n    return (0,_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)(\"defaultIsolationScope\", ()=>new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope());\n}\n //# sourceMappingURL=defaultScopes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWZhdWx0U2NvcGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDNkI7QUFFaEUsbUNBQW1DLEdBQ25DLFNBQVNFO0lBQ1AsT0FBT0QsNkVBQWtCQSxDQUFDLHVCQUF1QixJQUFNLElBQUlELDRDQUFLQTtBQUNsRTtBQUVBLHFDQUFxQyxHQUNyQyxTQUFTRztJQUNQLE9BQU9GLDZFQUFrQkEsQ0FBQyx5QkFBeUIsSUFBTSxJQUFJRCw0Q0FBS0E7QUFDcEU7QUFFNEQsQ0FDNUQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2RlZmF1bHRTY29wZXMuanM/NDA1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY29wZSB9IGZyb20gJy4vc2NvcGUuanMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsU2luZ2xldG9uIH0gZnJvbSAnLi91dGlscy1ob2lzdC93b3JsZHdpZGUuanMnO1xuXG4vKiogR2V0IHRoZSBkZWZhdWx0IGN1cnJlbnQgc2NvcGUuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0Q3VycmVudFNjb3BlKCkge1xuICByZXR1cm4gZ2V0R2xvYmFsU2luZ2xldG9uKCdkZWZhdWx0Q3VycmVudFNjb3BlJywgKCkgPT4gbmV3IFNjb3BlKCkpO1xufVxuXG4vKiogR2V0IHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZS4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJc29sYXRpb25TY29wZSgpIHtcbiAgcmV0dXJuIGdldEdsb2JhbFNpbmdsZXRvbignZGVmYXVsdElzb2xhdGlvblNjb3BlJywgKCkgPT4gbmV3IFNjb3BlKCkpO1xufVxuXG5leHBvcnQgeyBnZXREZWZhdWx0Q3VycmVudFNjb3BlLCBnZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRTY29wZXMuanMubWFwXG4iXSwibmFtZXMiOlsiU2NvcGUiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJnZXREZWZhdWx0Q3VycmVudFNjb3BlIiwiZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/defaultScopes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/envelope.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/envelope.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEventEnvelope: () => (/* binding */ createEventEnvelope),\n/* harmony export */   createSessionEnvelope: () => (/* binding */ createSessionEnvelope),\n/* harmony export */   createSpanEnvelope: () => (/* binding */ createSpanEnvelope)\n/* harmony export */ });\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n\n\n\n\n\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/ function enhanceEventWithSdkInfo(event, sdkInfo) {\n    if (!sdkInfo) {\n        return event;\n    }\n    event.sdk = event.sdk || {};\n    event.sdk.name = event.sdk.name || sdkInfo.name;\n    event.sdk.version = event.sdk.version || sdkInfo.version;\n    event.sdk.integrations = [\n        ...event.sdk.integrations || [],\n        ...sdkInfo.integrations || []\n    ];\n    event.sdk.packages = [\n        ...event.sdk.packages || [],\n        ...sdkInfo.packages || []\n    ];\n    return event;\n}\n/** Creates an envelope from a Session */ function createSessionEnvelope(session, dsn, metadata, tunnel) {\n    const sdkInfo = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.getSdkMetadataForEnvelopeHeader)(metadata);\n    const envelopeHeaders = {\n        sent_at: new Date().toISOString(),\n        ...sdkInfo && {\n            sdk: sdkInfo\n        },\n        ...!!tunnel && dsn && {\n            dsn: (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__.dsnToString)(dsn)\n        }\n    };\n    const envelopeItem = \"aggregates\" in session ? [\n        {\n            type: \"sessions\"\n        },\n        session\n    ] : [\n        {\n            type: \"session\"\n        },\n        session.toJSON()\n    ];\n    return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(envelopeHeaders, [\n        envelopeItem\n    ]);\n}\n/**\n * Create an Envelope from an event.\n */ function createEventEnvelope(event, dsn, metadata, tunnel) {\n    const sdkInfo = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.getSdkMetadataForEnvelopeHeader)(metadata);\n    /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */ const eventType = event.type && event.type !== \"replay_event\" ? event.type : \"event\";\n    enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n    const envelopeHeaders = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEventEnvelopeHeaders)(event, sdkInfo, tunnel, dsn);\n    // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n    // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n    // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n    // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n    delete event.sdkProcessingMetadata;\n    const eventItem = [\n        {\n            type: eventType\n        },\n        event\n    ];\n    return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(envelopeHeaders, [\n        eventItem\n    ]);\n}\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */ function createSpanEnvelope(spans, client) {\n    function dscHasRequiredProps(dsc) {\n        return !!dsc.trace_id && !!dsc.public_key;\n    }\n    // For the moment we'll obtain the DSC from the first span in the array\n    // This might need to be changed if we permit sending multiple spans from\n    // different segments in one envelope\n    const dsc = (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_2__.getDynamicSamplingContextFromSpan)(spans[0]);\n    const dsn = client && client.getDsn();\n    const tunnel = client && client.getOptions().tunnel;\n    const headers = {\n        sent_at: new Date().toISOString(),\n        ...dscHasRequiredProps(dsc) && {\n            trace: dsc\n        },\n        ...!!tunnel && dsn && {\n            dsn: (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__.dsnToString)(dsn)\n        }\n    };\n    const beforeSendSpan = client && client.getOptions().beforeSendSpan;\n    const convertToSpanJSON = beforeSendSpan ? (span)=>{\n        const spanJson = beforeSendSpan((0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(span));\n        if (!spanJson) {\n            (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.showSpanDropWarning)();\n        }\n        return spanJson;\n    } : (span)=>(0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(span);\n    const items = [];\n    for (const span of spans){\n        const spanJson = convertToSpanJSON(span);\n        if (spanJson) {\n            items.push((0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createSpanEnvelopeItem)(spanJson));\n        }\n    }\n    return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(headers, items);\n}\n //# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/envelope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/eventProcessors.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/eventProcessors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   notifyEventProcessors: () => (/* binding */ notifyEventProcessors)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */ function notifyEventProcessors(processors, event, hint, index = 0) {\n    return new _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.SyncPromise((resolve, reject)=>{\n        const processor = processors[index];\n        if (event === null || typeof processor !== \"function\") {\n            resolve(event);\n        } else {\n            const result = processor({\n                ...event\n            }, hint);\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && processor.id && result === null && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`Event processor \"${processor.id}\" dropped event`);\n            if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__.isThenable)(result)) {\n                void result.then((final)=>notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n            } else {\n                void notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n            }\n        }\n    });\n}\n //# sourceMappingURL=eventProcessors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9ldmVudFByb2Nlc3NvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDRTtBQUNBO0FBQ1U7QUFFM0Q7O0NBRUMsR0FDRCxTQUFTSSxzQkFDUEMsVUFBVSxFQUNWQyxLQUFLLEVBQ0xDLElBQUksRUFDSkMsUUFBUSxDQUFDO0lBRVQsT0FBTyxJQUFJTCxvRUFBV0EsQ0FBQyxDQUFDTSxTQUFTQztRQUMvQixNQUFNQyxZQUFZTixVQUFVLENBQUNHLE1BQU07UUFDbkMsSUFBSUYsVUFBVSxRQUFRLE9BQU9LLGNBQWMsWUFBWTtZQUNyREYsUUFBUUg7UUFDVixPQUFPO1lBQ0wsTUFBTU0sU0FBU0QsVUFBVTtnQkFBRSxHQUFHTCxLQUFLO1lBQUMsR0FBR0M7WUFFdkNQLHdEQUFXQSxJQUFJVyxVQUFVRSxFQUFFLElBQUlELFdBQVcsUUFBUVYsMERBQU1BLENBQUNZLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFSCxVQUFVRSxFQUFFLENBQUMsZUFBZSxDQUFDO1lBRTlHLElBQUlaLDhEQUFVQSxDQUFDVyxTQUFTO2dCQUN0QixLQUFLQSxPQUNGRyxJQUFJLENBQUNDLENBQUFBLFFBQVNaLHNCQUFzQkMsWUFBWVcsT0FBT1QsTUFBTUMsUUFBUSxHQUFHTyxJQUFJLENBQUNOLFVBQzdFTSxJQUFJLENBQUMsTUFBTUw7WUFDaEIsT0FBTztnQkFDTCxLQUFLTixzQkFBc0JDLFlBQVlPLFFBQVFMLE1BQU1DLFFBQVEsR0FDMURPLElBQUksQ0FBQ04sU0FDTE0sSUFBSSxDQUFDLE1BQU1MO1lBQ2hCO1FBQ0Y7SUFDRjtBQUNGO0FBRWlDLENBQ2pDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9ldmVudFByb2Nlc3NvcnMuanM/NmI5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgaXNUaGVuYWJsZSB9IGZyb20gJy4vdXRpbHMtaG9pc3QvaXMuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICcuL3V0aWxzLWhvaXN0L3N5bmNwcm9taXNlLmpzJztcblxuLyoqXG4gKiBQcm9jZXNzIGFuIGFycmF5IG9mIGV2ZW50IHByb2Nlc3NvcnMsIHJldHVybmluZyB0aGUgcHJvY2Vzc2VkIGV2ZW50IChvciBgbnVsbGAgaWYgdGhlIGV2ZW50IHdhcyBkcm9wcGVkKS5cbiAqL1xuZnVuY3Rpb24gbm90aWZ5RXZlbnRQcm9jZXNzb3JzKFxuICBwcm9jZXNzb3JzLFxuICBldmVudCxcbiAgaGludCxcbiAgaW5kZXggPSAwLFxuKSB7XG4gIHJldHVybiBuZXcgU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbaW5kZXhdO1xuICAgIGlmIChldmVudCA9PT0gbnVsbCB8fCB0eXBlb2YgcHJvY2Vzc29yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc29yKHsgLi4uZXZlbnQgfSwgaGludCkgO1xuXG4gICAgICBERUJVR19CVUlMRCAmJiBwcm9jZXNzb3IuaWQgJiYgcmVzdWx0ID09PSBudWxsICYmIGxvZ2dlci5sb2coYEV2ZW50IHByb2Nlc3NvciBcIiR7cHJvY2Vzc29yLmlkfVwiIGRyb3BwZWQgZXZlbnRgKTtcblxuICAgICAgaWYgKGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICB2b2lkIHJlc3VsdFxuICAgICAgICAgIC50aGVuKGZpbmFsID0+IG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCBmaW5hbCwgaGludCwgaW5kZXggKyAxKS50aGVuKHJlc29sdmUpKVxuICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2b2lkIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCByZXN1bHQsIGhpbnQsIGluZGV4ICsgMSlcbiAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgbm90aWZ5RXZlbnRQcm9jZXNzb3JzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudFByb2Nlc3NvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJpc1RoZW5hYmxlIiwibG9nZ2VyIiwiU3luY1Byb21pc2UiLCJub3RpZnlFdmVudFByb2Nlc3NvcnMiLCJwcm9jZXNzb3JzIiwiZXZlbnQiLCJoaW50IiwiaW5kZXgiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvY2Vzc29yIiwicmVzdWx0IiwiaWQiLCJsb2ciLCJ0aGVuIiwiZmluYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/eventProcessors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/exports.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/exports.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEventProcessor: () => (/* binding */ addEventProcessor),\n/* harmony export */   captureCheckIn: () => (/* binding */ captureCheckIn),\n/* harmony export */   captureEvent: () => (/* binding */ captureEvent),\n/* harmony export */   captureException: () => (/* binding */ captureException),\n/* harmony export */   captureMessage: () => (/* binding */ captureMessage),\n/* harmony export */   captureSession: () => (/* binding */ captureSession),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   endSession: () => (/* binding */ endSession),\n/* harmony export */   flush: () => (/* binding */ flush),\n/* harmony export */   isEnabled: () => (/* binding */ isEnabled),\n/* harmony export */   isInitialized: () => (/* binding */ isInitialized),\n/* harmony export */   lastEventId: () => (/* binding */ lastEventId),\n/* harmony export */   setContext: () => (/* binding */ setContext),\n/* harmony export */   setExtra: () => (/* binding */ setExtra),\n/* harmony export */   setExtras: () => (/* binding */ setExtras),\n/* harmony export */   setTag: () => (/* binding */ setTag),\n/* harmony export */   setTags: () => (/* binding */ setTags),\n/* harmony export */   setUser: () => (/* binding */ setUser),\n/* harmony export */   startSession: () => (/* binding */ startSession),\n/* harmony export */   withMonitor: () => (/* binding */ withMonitor)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/constants.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/session.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/prepareEvent.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */ function captureException(exception, hint) {\n    return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)().captureException(exception, (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__.parseEventHintOrCaptureContext)(hint));\n}\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */ function captureMessage(message, captureContext) {\n    // This is necessary to provide explicit scopes upgrade, without changing the original\n    // arity of the `captureMessage(message, level)` method.\n    const level = typeof captureContext === \"string\" ? captureContext : undefined;\n    const context = typeof captureContext !== \"string\" ? {\n        captureContext\n    } : undefined;\n    return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)().captureMessage(message, level, context);\n}\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */ function captureEvent(event, hint) {\n    return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)().captureEvent(event, hint);\n}\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */ function setContext(name, context) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setContext(name, context);\n}\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */ function setExtras(extras) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setExtras(extras);\n}\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */ function setExtra(key, extra) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setExtra(key, extra);\n}\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */ function setTags(tags) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setTags(tags);\n}\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */ function setTag(key, value) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setTag(key, value);\n}\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */ function setUser(user) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setUser(user);\n}\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */ function lastEventId() {\n    return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().lastEventId();\n}\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */ function captureCheckIn(checkIn, upsertMonitorConfig) {\n    const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    if (!client) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot capture check-in. No client defined.\");\n    } else if (!client.captureCheckIn) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot capture check-in. Client does not support sending check-ins.\");\n    } else {\n        return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n    }\n    return (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n}\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */ function withMonitor(monitorSlug, callback, upsertMonitorConfig) {\n    const checkInId = captureCheckIn({\n        monitorSlug,\n        status: \"in_progress\"\n    }, upsertMonitorConfig);\n    const now = (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)();\n    function finishCheckIn(status) {\n        captureCheckIn({\n            monitorSlug,\n            status,\n            checkInId,\n            duration: (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)() - now\n        });\n    }\n    return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(()=>{\n        let maybePromiseResult;\n        try {\n            maybePromiseResult = callback();\n        } catch (e) {\n            finishCheckIn(\"error\");\n            throw e;\n        }\n        if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__.isThenable)(maybePromiseResult)) {\n            Promise.resolve(maybePromiseResult).then(()=>{\n                finishCheckIn(\"ok\");\n            }, (e)=>{\n                finishCheckIn(\"error\");\n                throw e;\n            });\n        } else {\n            finishCheckIn(\"ok\");\n        }\n        return maybePromiseResult;\n    });\n}\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */ async function flush(timeout) {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    if (client) {\n        return client.flush(timeout);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot flush events. No client defined.\");\n    return Promise.resolve(false);\n}\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */ async function close(timeout) {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    if (client) {\n        return client.close(timeout);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot flush events and disable SDK. No client defined.\");\n    return Promise.resolve(false);\n}\n/**\n * Returns true if Sentry has been properly initialized.\n */ function isInitialized() {\n    return !!(0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n}\n/** If the SDK is initialized & enabled. */ function isEnabled() {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    return !!client && client.getOptions().enabled !== false && !!client.getTransport();\n}\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */ function addEventProcessor(callback) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().addEventProcessor(callback);\n}\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */ function startSession(context) {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    const currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n    const { release, environment = _constants_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_ENVIRONMENT } = client && client.getOptions() || {};\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_8__.GLOBAL_OBJ.navigator || {};\n    const session = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.makeSession)({\n        release,\n        environment,\n        user: currentScope.getUser() || isolationScope.getUser(),\n        ...userAgent && {\n            userAgent\n        },\n        ...context\n    });\n    // End existing session if there's one\n    const currentSession = isolationScope.getSession();\n    if (currentSession && currentSession.status === \"ok\") {\n        (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.updateSession)(currentSession, {\n            status: \"exited\"\n        });\n    }\n    endSession();\n    // Afterwards we set the new session on the scope\n    isolationScope.setSession(session);\n    // TODO (v8): Remove this and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    currentScope.setSession(session);\n    return session;\n}\n/**\n * End the session on the current isolation scope.\n */ function endSession() {\n    const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    const currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n    const session = currentScope.getSession() || isolationScope.getSession();\n    if (session) {\n        (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.closeSession)(session);\n    }\n    _sendSessionUpdate();\n    // the session is over; take it off of the scope\n    isolationScope.setSession();\n    // TODO (v8): Remove this and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    currentScope.setSession();\n}\n/**\n * Sends the current Session on the scope\n */ function _sendSessionUpdate() {\n    const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n    const currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    // TODO (v8): Remove currentScope and only use the isolation scope(?).\n    // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n    const session = currentScope.getSession() || isolationScope.getSession();\n    if (session && client) {\n        client.captureSession(session);\n    }\n}\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */ function captureSession(end = false) {\n    // both send the update and pull the session from the scope\n    if (end) {\n        endSession();\n        return;\n    }\n    // only send the update\n    _sendSessionUpdate();\n}\n //# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/exports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/integration.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integration.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addIntegration: () => (/* binding */ addIntegration),\n/* harmony export */   afterSetupIntegrations: () => (/* binding */ afterSetupIntegrations),\n/* harmony export */   defineIntegration: () => (/* binding */ defineIntegration),\n/* harmony export */   getIntegrationsToSetup: () => (/* binding */ getIntegrationsToSetup),\n/* harmony export */   installedIntegrations: () => (/* binding */ installedIntegrations),\n/* harmony export */   setupIntegration: () => (/* binding */ setupIntegration),\n/* harmony export */   setupIntegrations: () => (/* binding */ setupIntegrations)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\nconst installedIntegrations = [];\n/** Map of integrations assigned to a client */ /**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */ function filterDuplicates(integrations) {\n    const integrationsByName = {};\n    integrations.forEach((currentInstance)=>{\n        const { name } = currentInstance;\n        const existingInstance = integrationsByName[name];\n        // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n        // default instance to overwrite an existing user instance\n        if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n            return;\n        }\n        integrationsByName[name] = currentInstance;\n    });\n    return Object.values(integrationsByName);\n}\n/** Gets integrations to install */ function getIntegrationsToSetup(options) {\n    const defaultIntegrations = options.defaultIntegrations || [];\n    const userIntegrations = options.integrations;\n    // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n    defaultIntegrations.forEach((integration)=>{\n        integration.isDefaultInstance = true;\n    });\n    let integrations;\n    if (Array.isArray(userIntegrations)) {\n        integrations = [\n            ...defaultIntegrations,\n            ...userIntegrations\n        ];\n    } else if (typeof userIntegrations === \"function\") {\n        const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n        integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [\n            resolvedUserIntegrations\n        ];\n    } else {\n        integrations = defaultIntegrations;\n    }\n    const finalIntegrations = filterDuplicates(integrations);\n    // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n    // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n    // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n    // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n    const debugIndex = finalIntegrations.findIndex((integration)=>integration.name === \"Debug\");\n    if (debugIndex > -1) {\n        const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n        finalIntegrations.push(debugInstance);\n    }\n    return finalIntegrations;\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */ function setupIntegrations(client, integrations) {\n    const integrationIndex = {};\n    integrations.forEach((integration)=>{\n        // guard against empty provided integrations\n        if (integration) {\n            setupIntegration(client, integration, integrationIndex);\n        }\n    });\n    return integrationIndex;\n}\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */ function afterSetupIntegrations(client, integrations) {\n    for (const integration of integrations){\n        // guard against empty provided integrations\n        if (integration && integration.afterAllSetup) {\n            integration.afterAllSetup(client);\n        }\n    }\n}\n/** Setup a single integration.  */ function setupIntegration(client, integration, integrationIndex) {\n    if (integrationIndex[integration.name]) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n        return;\n    }\n    integrationIndex[integration.name] = integration;\n    // `setupOnce` is only called the first time\n    if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === \"function\") {\n        integration.setupOnce();\n        installedIntegrations.push(integration.name);\n    }\n    // `setup` is run for each client\n    if (integration.setup && typeof integration.setup === \"function\") {\n        integration.setup(client);\n    }\n    if (typeof integration.preprocessEvent === \"function\") {\n        const callback = integration.preprocessEvent.bind(integration);\n        client.on(\"preprocessEvent\", (event, hint)=>callback(event, hint, client));\n    }\n    if (typeof integration.processEvent === \"function\") {\n        const callback = integration.processEvent.bind(integration);\n        const processor = Object.assign((event, hint)=>callback(event, hint, client), {\n            id: integration.name\n        });\n        client.addEventProcessor(processor);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Integration installed: ${integration.name}`);\n}\n/** Add an integration to the current scope's client. */ function addIntegration(integration) {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getClient)();\n    if (!client) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n        return;\n    }\n    client.addIntegration(integration);\n}\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */ function defineIntegration(fn) {\n    return fn;\n}\n //# sourceMappingURL=integration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/integration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/integrations/dedupe.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/dedupe.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _shouldDropEvent: () => (/* binding */ _shouldDropEvent),\n/* harmony export */   dedupeIntegration: () => (/* binding */ dedupeIntegration)\n/* harmony export */ });\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../integration.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/stacktrace.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n\n\nconst INTEGRATION_NAME = \"Dedupe\";\nconst _dedupeIntegration = ()=>{\n    let previousEvent;\n    return {\n        name: INTEGRATION_NAME,\n        processEvent (currentEvent) {\n            // We want to ignore any non-error type events, e.g. transactions or replays\n            // These should never be deduped, and also not be compared against as _previousEvent.\n            if (currentEvent.type) {\n                return currentEvent;\n            }\n            // Juuust in case something goes wrong\n            try {\n                if (_shouldDropEvent(currentEvent, previousEvent)) {\n                    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Event dropped due to being a duplicate of previously captured event.\");\n                    return null;\n                }\n            } catch (_oO) {} // eslint-disable-line no-empty\n            return previousEvent = currentEvent;\n        }\n    };\n};\n/**\n * Deduplication filter.\n */ const dedupeIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_dedupeIntegration);\n/** only exported for tests. */ function _shouldDropEvent(currentEvent, previousEvent) {\n    if (!previousEvent) {\n        return false;\n    }\n    if (_isSameMessageEvent(currentEvent, previousEvent)) {\n        return true;\n    }\n    if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n        return true;\n    }\n    return false;\n}\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n    const currentMessage = currentEvent.message;\n    const previousMessage = previousEvent.message;\n    // If neither event has a message property, they were both exceptions, so bail out\n    if (!currentMessage && !previousMessage) {\n        return false;\n    }\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n        return false;\n    }\n    if (currentMessage !== previousMessage) {\n        return false;\n    }\n    if (!_isSameFingerprint(currentEvent, previousEvent)) {\n        return false;\n    }\n    if (!_isSameStacktrace(currentEvent, previousEvent)) {\n        return false;\n    }\n    return true;\n}\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n    const previousException = _getExceptionFromEvent(previousEvent);\n    const currentException = _getExceptionFromEvent(currentEvent);\n    if (!previousException || !currentException) {\n        return false;\n    }\n    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n        return false;\n    }\n    if (!_isSameFingerprint(currentEvent, previousEvent)) {\n        return false;\n    }\n    if (!_isSameStacktrace(currentEvent, previousEvent)) {\n        return false;\n    }\n    return true;\n}\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n    let currentFrames = (0,_utils_hoist_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFramesFromEvent)(currentEvent);\n    let previousFrames = (0,_utils_hoist_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFramesFromEvent)(previousEvent);\n    // If neither event has a stacktrace, they are assumed to be the same\n    if (!currentFrames && !previousFrames) {\n        return true;\n    }\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n        return false;\n    }\n    currentFrames = currentFrames;\n    previousFrames = previousFrames;\n    // If number of frames differ, they are not the same\n    if (previousFrames.length !== currentFrames.length) {\n        return false;\n    }\n    // Otherwise, compare the two\n    for(let i = 0; i < previousFrames.length; i++){\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const frameA = previousFrames[i];\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const frameB = currentFrames[i];\n        if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n    let currentFingerprint = currentEvent.fingerprint;\n    let previousFingerprint = previousEvent.fingerprint;\n    // If neither event has a fingerprint, they are assumed to be the same\n    if (!currentFingerprint && !previousFingerprint) {\n        return true;\n    }\n    // If only one event has a fingerprint, but not the other one, they are not the same\n    if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n        return false;\n    }\n    currentFingerprint = currentFingerprint;\n    previousFingerprint = previousFingerprint;\n    // Otherwise, compare the two\n    try {\n        return !!(currentFingerprint.join(\"\") === previousFingerprint.join(\"\"));\n    } catch (_oO) {\n        return false;\n    }\n}\nfunction _getExceptionFromEvent(event) {\n    return event.exception && event.exception.values && event.exception.values[0];\n}\n //# sourceMappingURL=dedupe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/integrations/dedupe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/integrations/functiontostring.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/functiontostring.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functionToStringIntegration: () => (/* binding */ functionToStringIntegration)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../integration.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n\n\nlet originalFunctionToString;\nconst INTEGRATION_NAME = \"FunctionToString\";\nconst SETUP_CLIENTS = new WeakMap();\nconst _functionToStringIntegration = ()=>{\n    return {\n        name: INTEGRATION_NAME,\n        setupOnce () {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            originalFunctionToString = Function.prototype.toString;\n            // intrinsics (like Function.prototype) might be immutable in some environments\n            // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n            try {\n                Function.prototype.toString = function(...args) {\n                    const originalFunction = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.getOriginalFunction)(this);\n                    const context = SETUP_CLIENTS.has((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getClient)()) && originalFunction !== undefined ? originalFunction : this;\n                    return originalFunctionToString.apply(context, args);\n                };\n            } catch (e) {\n            // ignore errors here, just don't patch this\n            }\n        },\n        setup (client) {\n            SETUP_CLIENTS.set(client, true);\n        }\n    };\n};\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */ const functionToStringIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_functionToStringIntegration);\n //# sourceMappingURL=functiontostring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdEO0FBQ007QUFDUztBQUUvRCxJQUFJRztBQUVKLE1BQU1DLG1CQUFtQjtBQUV6QixNQUFNQyxnQkFBZ0IsSUFBSUM7QUFFMUIsTUFBTUMsK0JBQWdDO0lBQ3BDLE9BQU87UUFDTEMsTUFBTUo7UUFDTks7WUFDRSw2REFBNkQ7WUFDN0ROLDJCQUEyQk8sU0FBU0MsU0FBUyxDQUFDQyxRQUFRO1lBRXRELCtFQUErRTtZQUMvRSx3R0FBd0c7WUFDeEcsSUFBSTtnQkFDRkYsU0FBU0MsU0FBUyxDQUFDQyxRQUFRLEdBQUcsU0FBVyxHQUFHQyxJQUFJO29CQUM5QyxNQUFNQyxtQkFBbUJaLDJFQUFtQkEsQ0FBQyxJQUFJO29CQUNqRCxNQUFNYSxVQUNKVixjQUFjVyxHQUFHLENBQUNoQiw0REFBU0EsT0FBUWMscUJBQXFCRyxZQUFZSCxtQkFBbUIsSUFBSTtvQkFDN0YsT0FBT1gseUJBQXlCZSxLQUFLLENBQUNILFNBQVNGO2dCQUNqRDtZQUNGLEVBQUUsT0FBT00sR0FBRztZQUNWLDRDQUE0QztZQUM5QztRQUNGO1FBQ0FDLE9BQU1DLE1BQU07WUFDVmhCLGNBQWNpQixHQUFHLENBQUNELFFBQVE7UUFDNUI7SUFDRjtBQUNGO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNELE1BQU1FLDhCQUE4QnRCLGtFQUFpQkEsQ0FBQ007QUFFZixDQUN2Qyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanM/NmRlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQgfSBmcm9tICcuLi9jdXJyZW50U2NvcGVzLmpzJztcbmltcG9ydCB7IGRlZmluZUludGVncmF0aW9uIH0gZnJvbSAnLi4vaW50ZWdyYXRpb24uanMnO1xuaW1wb3J0IHsgZ2V0T3JpZ2luYWxGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcyc7XG5cbmxldCBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmc7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRnVuY3Rpb25Ub1N0cmluZyc7XG5cbmNvbnN0IFNFVFVQX0NMSUVOVFMgPSBuZXcgV2Vha01hcCgpO1xuXG5jb25zdCBfZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuICAgICAgLy8gaW50cmluc2ljcyAobGlrZSBGdW5jdGlvbi5wcm90b3R5cGUpIG1pZ2h0IGJlIGltbXV0YWJsZSBpbiBzb21lIGVudmlyb25tZW50c1xuICAgICAgLy8gZS5nLiBOb2RlIHdpdGggLS1mcm96ZW4taW50cmluc2ljcywgWFMgKGFuIGVtYmVkZGVkIEphdmFTY3JpcHQgZW5naW5lKSBvciBTRVMgKGEgSmF2YVNjcmlwdCBwcm9wb3NhbClcbiAgICAgIHRyeSB7XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICggLi4uYXJncykge1xuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRnVuY3Rpb24gPSBnZXRPcmlnaW5hbEZ1bmN0aW9uKHRoaXMpO1xuICAgICAgICAgIGNvbnN0IGNvbnRleHQgPVxuICAgICAgICAgICAgU0VUVVBfQ0xJRU5UUy5oYXMoZ2V0Q2xpZW50KCkgKSAmJiBvcmlnaW5hbEZ1bmN0aW9uICE9PSB1bmRlZmluZWQgPyBvcmlnaW5hbEZ1bmN0aW9uIDogdGhpcztcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGhlcmUsIGp1c3QgZG9uJ3QgcGF0Y2ggdGhpc1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBTRVRVUF9DTElFTlRTLnNldChjbGllbnQsIHRydWUpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogUGF0Y2ggdG9TdHJpbmcgY2FsbHMgdG8gcmV0dXJuIHByb3BlciBuYW1lIGZvciB3cmFwcGVkIGZ1bmN0aW9ucy5cbiAqXG4gKiBgYGBqc1xuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24oKSxcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9IGRlZmluZUludGVncmF0aW9uKF9mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24pO1xuXG5leHBvcnQgeyBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9udG9zdHJpbmcuanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0Q2xpZW50IiwiZGVmaW5lSW50ZWdyYXRpb24iLCJnZXRPcmlnaW5hbEZ1bmN0aW9uIiwib3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nIiwiSU5URUdSQVRJT05fTkFNRSIsIlNFVFVQX0NMSUVOVFMiLCJXZWFrTWFwIiwiX2Z1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiYXJncyIsIm9yaWdpbmFsRnVuY3Rpb24iLCJjb250ZXh0IiwiaGFzIiwidW5kZWZpbmVkIiwiYXBwbHkiLCJlIiwic2V0dXAiLCJjbGllbnQiLCJzZXQiLCJmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/integrations/functiontostring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/integrations/inboundfilters.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/inboundfilters.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inboundFiltersIntegration: () => (/* binding */ inboundFiltersIntegration)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n\n\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n    /^Script error\\.?$/,\n    /^Javascript error: Script error\\.? on line 0$/,\n    /^ResizeObserver loop completed with undelivered notifications.$/,\n    /^Cannot redefine property: googletag$/,\n    \"undefined is not an object (evaluating 'a.L')\",\n    'can\\'t redefine non-configurable property \"solana\"',\n    \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\",\n    \"Can't find variable: _AutofillCallbackHandler\",\n    /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/\n];\n/** Options for the InboundFilters integration */ const INTEGRATION_NAME = \"InboundFilters\";\nconst _inboundFiltersIntegration = (options = {})=>{\n    return {\n        name: INTEGRATION_NAME,\n        processEvent (event, _hint, client) {\n            const clientOptions = client.getOptions();\n            const mergedOptions = _mergeOptions(options, clientOptions);\n            return _shouldDropEvent(event, mergedOptions) ? null : event;\n        }\n    };\n};\nconst inboundFiltersIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(_inboundFiltersIntegration);\nfunction _mergeOptions(internalOptions = {}, clientOptions = {}) {\n    return {\n        allowUrls: [\n            ...internalOptions.allowUrls || [],\n            ...clientOptions.allowUrls || []\n        ],\n        denyUrls: [\n            ...internalOptions.denyUrls || [],\n            ...clientOptions.denyUrls || []\n        ],\n        ignoreErrors: [\n            ...internalOptions.ignoreErrors || [],\n            ...clientOptions.ignoreErrors || [],\n            ...internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS\n        ],\n        ignoreTransactions: [\n            ...internalOptions.ignoreTransactions || [],\n            ...clientOptions.ignoreTransactions || []\n        ],\n        ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n    };\n}\nfunction _shouldDropEvent(event, options) {\n    if (options.ignoreInternal && _isSentryError(event)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isUselessError(event)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n        return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n        return true;\n    }\n    return false;\n}\nfunction _isIgnoredError(event, ignoreErrors) {\n    // If event.type, this is not an error\n    if (event.type || !ignoreErrors || !ignoreErrors.length) {\n        return false;\n    }\n    return _getPossibleEventMessages(event).some((message)=>(0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__.stringMatchesSomePattern)(message, ignoreErrors));\n}\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n    if (event.type !== \"transaction\" || !ignoreTransactions || !ignoreTransactions.length) {\n        return false;\n    }\n    const name = event.transaction;\n    return name ? (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__.stringMatchesSomePattern)(name, ignoreTransactions) : false;\n}\nfunction _isDeniedUrl(event, denyUrls) {\n    // TODO: Use Glob instead?\n    if (!denyUrls || !denyUrls.length) {\n        return false;\n    }\n    const url = _getEventFilterUrl(event);\n    return !url ? false : (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__.stringMatchesSomePattern)(url, denyUrls);\n}\nfunction _isAllowedUrl(event, allowUrls) {\n    // TODO: Use Glob instead?\n    if (!allowUrls || !allowUrls.length) {\n        return true;\n    }\n    const url = _getEventFilterUrl(event);\n    return !url ? true : (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__.stringMatchesSomePattern)(url, allowUrls);\n}\nfunction _getPossibleEventMessages(event) {\n    const possibleMessages = [];\n    if (event.message) {\n        possibleMessages.push(event.message);\n    }\n    let lastException;\n    try {\n        // @ts-expect-error Try catching to save bundle size\n        lastException = event.exception.values[event.exception.values.length - 1];\n    } catch (e) {\n    // try catching to save bundle size checking existence of variables\n    }\n    if (lastException) {\n        if (lastException.value) {\n            possibleMessages.push(lastException.value);\n            if (lastException.type) {\n                possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n            }\n        }\n    }\n    return possibleMessages;\n}\nfunction _isSentryError(event) {\n    try {\n        // @ts-expect-error can't be a sentry error if undefined\n        return event.exception.values[0].type === \"SentryError\";\n    } catch (e) {\n    // ignore\n    }\n    return false;\n}\nfunction _getLastValidUrl(frames = []) {\n    for(let i = frames.length - 1; i >= 0; i--){\n        const frame = frames[i];\n        if (frame && frame.filename !== \"<anonymous>\" && frame.filename !== \"[native code]\") {\n            return frame.filename || null;\n        }\n    }\n    return null;\n}\nfunction _getEventFilterUrl(event) {\n    try {\n        let frames;\n        try {\n            // @ts-expect-error we only care about frames if the whole thing here is defined\n            frames = event.exception.values[0].stacktrace.frames;\n        } catch (e) {\n        // ignore\n        }\n        return frames ? _getLastValidUrl(frames) : null;\n    } catch (oO) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.error(`Cannot extract url for event ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`);\n        return null;\n    }\n}\nfunction _isUselessError(event) {\n    if (event.type) {\n        // event is not an error\n        return false;\n    }\n    // We only want to consider events for dropping that actually have recorded exception values.\n    if (!event.exception || !event.exception.values || event.exception.values.length === 0) {\n        return false;\n    }\n    return(// No top-level message\n    !event.message && // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some((value)=>value.stacktrace || value.type && value.type !== \"Error\" || value.value));\n}\n //# sourceMappingURL=inboundfilters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/integrations/inboundfilters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/metrics/metric-summary.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/metrics/metric-summary.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMetricSummaryJsonForSpan: () => (/* binding */ getMetricSummaryJsonForSpan),\n/* harmony export */   updateMetricSummaryOnSpan: () => (/* binding */ updateMetricSummaryOnSpan)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n/**\n * key: bucketKey\n * value: [exportKey, MetricSummary]\n */ const METRICS_SPAN_FIELD = \"_sentryMetrics\";\n/**\n * Fetches the metric summary if it exists for the passed span\n */ function getMetricSummaryJsonForSpan(span) {\n    const storage = span[METRICS_SPAN_FIELD];\n    if (!storage) {\n        return undefined;\n    }\n    const output = {};\n    for (const [, [exportKey, summary]] of storage){\n        const arr = output[exportKey] || (output[exportKey] = []);\n        arr.push((0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(summary));\n    }\n    return output;\n}\n/**\n * Updates the metric summary on a span.\n */ function updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey) {\n    const existingStorage = span[METRICS_SPAN_FIELD];\n    const storage = existingStorage || (span[METRICS_SPAN_FIELD] = new Map());\n    const exportKey = `${metricType}:${sanitizedName}@${unit}`;\n    const bucketItem = storage.get(bucketKey);\n    if (bucketItem) {\n        const [, summary] = bucketItem;\n        storage.set(bucketKey, [\n            exportKey,\n            {\n                min: Math.min(summary.min, value),\n                max: Math.max(summary.max, value),\n                count: summary.count += 1,\n                sum: summary.sum += value,\n                tags: summary.tags\n            }\n        ]);\n    } else {\n        storage.set(bucketKey, [\n            exportKey,\n            {\n                min: value,\n                max: value,\n                count: 1,\n                sum: value,\n                tags\n            }\n        ]);\n    }\n}\n //# sourceMappingURL=metric-summary.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9tZXRyaWNzL21ldHJpYy1zdW1tYXJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDtBQUU3RDs7O0NBR0MsR0FFRCxNQUFNQyxxQkFBcUI7QUFFM0I7O0NBRUMsR0FDRCxTQUFTQyw0QkFBNEJDLElBQUk7SUFDdkMsTUFBTUMsVUFBVSxJQUFPLENBQUNILG1CQUFtQjtJQUUzQyxJQUFJLENBQUNHLFNBQVM7UUFDWixPQUFPQztJQUNUO0lBQ0EsTUFBTUMsU0FBUyxDQUFDO0lBRWhCLEtBQUssTUFBTSxHQUFHLENBQUNDLFdBQVdDLFFBQVEsQ0FBQyxJQUFJSixRQUFTO1FBQzlDLE1BQU1LLE1BQU1ILE1BQU0sQ0FBQ0MsVUFBVSxJQUFLRCxDQUFBQSxNQUFNLENBQUNDLFVBQVUsR0FBRyxFQUFFO1FBQ3hERSxJQUFJQyxJQUFJLENBQUNWLHlFQUFpQkEsQ0FBQ1E7SUFDN0I7SUFFQSxPQUFPRjtBQUNUO0FBRUE7O0NBRUMsR0FDRCxTQUFTSywwQkFDUFIsSUFBSSxFQUNKUyxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLElBQUksRUFDSkMsU0FBUztJQUVULE1BQU1DLGtCQUFrQixJQUFPLENBQUNqQixtQkFBbUI7SUFDbkQsTUFBTUcsVUFDSmMsbUJBQ0MsS0FBTyxDQUFDakIsbUJBQW1CLEdBQUcsSUFBSWtCLEtBQUk7SUFFekMsTUFBTVosWUFBWSxDQUFDLEVBQUVLLFdBQVcsQ0FBQyxFQUFFQyxjQUFjLENBQUMsRUFBRUUsS0FBSyxDQUFDO0lBQzFELE1BQU1LLGFBQWFoQixRQUFRaUIsR0FBRyxDQUFDSjtJQUUvQixJQUFJRyxZQUFZO1FBQ2QsTUFBTSxHQUFHWixRQUFRLEdBQUdZO1FBQ3BCaEIsUUFBUWtCLEdBQUcsQ0FBQ0wsV0FBVztZQUNyQlY7WUFDQTtnQkFDRWdCLEtBQUtDLEtBQUtELEdBQUcsQ0FBQ2YsUUFBUWUsR0FBRyxFQUFFVDtnQkFDM0JXLEtBQUtELEtBQUtDLEdBQUcsQ0FBQ2pCLFFBQVFpQixHQUFHLEVBQUVYO2dCQUMzQlksT0FBUWxCLFFBQVFrQixLQUFLLElBQUk7Z0JBQ3pCQyxLQUFNbkIsUUFBUW1CLEdBQUcsSUFBSWI7Z0JBQ3JCRSxNQUFNUixRQUFRUSxJQUFJO1lBQ3BCO1NBQ0Q7SUFDSCxPQUFPO1FBQ0xaLFFBQVFrQixHQUFHLENBQUNMLFdBQVc7WUFDckJWO1lBQ0E7Z0JBQ0VnQixLQUFLVDtnQkFDTFcsS0FBS1g7Z0JBQ0xZLE9BQU87Z0JBQ1BDLEtBQUtiO2dCQUNMRTtZQUNGO1NBQ0Q7SUFDSDtBQUNGO0FBRWtFLENBQ2xFLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9tZXRyaWNzL21ldHJpYy1zdW1tYXJ5LmpzP2JkMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHJvcFVuZGVmaW5lZEtleXMgfSBmcm9tICcuLi91dGlscy1ob2lzdC9vYmplY3QuanMnO1xuXG4vKipcbiAqIGtleTogYnVja2V0S2V5XG4gKiB2YWx1ZTogW2V4cG9ydEtleSwgTWV0cmljU3VtbWFyeV1cbiAqL1xuXG5jb25zdCBNRVRSSUNTX1NQQU5fRklFTEQgPSAnX3NlbnRyeU1ldHJpY3MnO1xuXG4vKipcbiAqIEZldGNoZXMgdGhlIG1ldHJpYyBzdW1tYXJ5IGlmIGl0IGV4aXN0cyBmb3IgdGhlIHBhc3NlZCBzcGFuXG4gKi9cbmZ1bmN0aW9uIGdldE1ldHJpY1N1bW1hcnlKc29uRm9yU3BhbihzcGFuKSB7XG4gIGNvbnN0IHN0b3JhZ2UgPSAoc3BhbiApW01FVFJJQ1NfU1BBTl9GSUVMRF07XG5cbiAgaWYgKCFzdG9yYWdlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSB7fTtcblxuICBmb3IgKGNvbnN0IFssIFtleHBvcnRLZXksIHN1bW1hcnldXSBvZiBzdG9yYWdlKSB7XG4gICAgY29uc3QgYXJyID0gb3V0cHV0W2V4cG9ydEtleV0gfHwgKG91dHB1dFtleHBvcnRLZXldID0gW10pO1xuICAgIGFyci5wdXNoKGRyb3BVbmRlZmluZWRLZXlzKHN1bW1hcnkpKTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgbWV0cmljIHN1bW1hcnkgb24gYSBzcGFuLlxuICovXG5mdW5jdGlvbiB1cGRhdGVNZXRyaWNTdW1tYXJ5T25TcGFuKFxuICBzcGFuLFxuICBtZXRyaWNUeXBlLFxuICBzYW5pdGl6ZWROYW1lLFxuICB2YWx1ZSxcbiAgdW5pdCxcbiAgdGFncyxcbiAgYnVja2V0S2V5LFxuKSB7XG4gIGNvbnN0IGV4aXN0aW5nU3RvcmFnZSA9IChzcGFuIClbTUVUUklDU19TUEFOX0ZJRUxEXTtcbiAgY29uc3Qgc3RvcmFnZSA9XG4gICAgZXhpc3RpbmdTdG9yYWdlIHx8XG4gICAgKChzcGFuIClbTUVUUklDU19TUEFOX0ZJRUxEXSA9IG5ldyBNYXAoKSk7XG5cbiAgY29uc3QgZXhwb3J0S2V5ID0gYCR7bWV0cmljVHlwZX06JHtzYW5pdGl6ZWROYW1lfUAke3VuaXR9YDtcbiAgY29uc3QgYnVja2V0SXRlbSA9IHN0b3JhZ2UuZ2V0KGJ1Y2tldEtleSk7XG5cbiAgaWYgKGJ1Y2tldEl0ZW0pIHtcbiAgICBjb25zdCBbLCBzdW1tYXJ5XSA9IGJ1Y2tldEl0ZW07XG4gICAgc3RvcmFnZS5zZXQoYnVja2V0S2V5LCBbXG4gICAgICBleHBvcnRLZXksXG4gICAgICB7XG4gICAgICAgIG1pbjogTWF0aC5taW4oc3VtbWFyeS5taW4sIHZhbHVlKSxcbiAgICAgICAgbWF4OiBNYXRoLm1heChzdW1tYXJ5Lm1heCwgdmFsdWUpLFxuICAgICAgICBjb3VudDogKHN1bW1hcnkuY291bnQgKz0gMSksXG4gICAgICAgIHN1bTogKHN1bW1hcnkuc3VtICs9IHZhbHVlKSxcbiAgICAgICAgdGFnczogc3VtbWFyeS50YWdzLFxuICAgICAgfSxcbiAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICBzdG9yYWdlLnNldChidWNrZXRLZXksIFtcbiAgICAgIGV4cG9ydEtleSxcbiAgICAgIHtcbiAgICAgICAgbWluOiB2YWx1ZSxcbiAgICAgICAgbWF4OiB2YWx1ZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN1bTogdmFsdWUsXG4gICAgICAgIHRhZ3MsXG4gICAgICB9LFxuICAgIF0pO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldE1ldHJpY1N1bW1hcnlKc29uRm9yU3BhbiwgdXBkYXRlTWV0cmljU3VtbWFyeU9uU3BhbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljLXN1bW1hcnkuanMubWFwXG4iXSwibmFtZXMiOlsiZHJvcFVuZGVmaW5lZEtleXMiLCJNRVRSSUNTX1NQQU5fRklFTEQiLCJnZXRNZXRyaWNTdW1tYXJ5SnNvbkZvclNwYW4iLCJzcGFuIiwic3RvcmFnZSIsInVuZGVmaW5lZCIsIm91dHB1dCIsImV4cG9ydEtleSIsInN1bW1hcnkiLCJhcnIiLCJwdXNoIiwidXBkYXRlTWV0cmljU3VtbWFyeU9uU3BhbiIsIm1ldHJpY1R5cGUiLCJzYW5pdGl6ZWROYW1lIiwidmFsdWUiLCJ1bml0IiwidGFncyIsImJ1Y2tldEtleSIsImV4aXN0aW5nU3RvcmFnZSIsIk1hcCIsImJ1Y2tldEl0ZW0iLCJnZXQiLCJzZXQiLCJtaW4iLCJNYXRoIiwibWF4IiwiY291bnQiLCJzdW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/metrics/metric-summary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/scope.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/scope.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scope: () => (/* binding */ Scope)\n/* harmony export */ });\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/session.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_merge_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/merge.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/spanOnScope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\");\n\n\n\n\n\n\n\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */ const DEFAULT_MAX_BREADCRUMBS = 100;\n/**\n * Holds additional event information.\n */ class ScopeClass {\n    /** Flag if notifying is happening. */ /** Callback for client to receive scope changes. */ /** Callback list that will be called during event processing. */ /** Array of breadcrumbs. */ /** User */ /** Tags */ /** Extra */ /** Contexts */ /** Attachments */ /** Propagation Context for distributed tracing */ /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */ /** Fingerprint */ /** Severity */ /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */ /** Session */ /** Request Mode Session Status */ // eslint-disable-next-line deprecation/deprecation\n    /** The client on this scope */ /** Contains the last event id of a captured event.  */ // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n    constructor(){\n        this._notifyingListeners = false;\n        this._scopeListeners = [];\n        this._eventProcessors = [];\n        this._breadcrumbs = [];\n        this._attachments = [];\n        this._user = {};\n        this._tags = {};\n        this._extra = {};\n        this._contexts = {};\n        this._sdkProcessingMetadata = {};\n        this._propagationContext = {\n            traceId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateTraceId)(),\n            spanId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateSpanId)()\n        };\n    }\n    /**\n   * @inheritDoc\n   */ clone() {\n        const newScope = new ScopeClass();\n        newScope._breadcrumbs = [\n            ...this._breadcrumbs\n        ];\n        newScope._tags = {\n            ...this._tags\n        };\n        newScope._extra = {\n            ...this._extra\n        };\n        newScope._contexts = {\n            ...this._contexts\n        };\n        if (this._contexts.flags) {\n            // We need to copy the `values` array so insertions on a cloned scope\n            // won't affect the original array.\n            newScope._contexts.flags = {\n                values: [\n                    ...this._contexts.flags.values\n                ]\n            };\n        }\n        newScope._user = this._user;\n        newScope._level = this._level;\n        newScope._session = this._session;\n        newScope._transactionName = this._transactionName;\n        newScope._fingerprint = this._fingerprint;\n        newScope._eventProcessors = [\n            ...this._eventProcessors\n        ];\n        newScope._requestSession = this._requestSession;\n        newScope._attachments = [\n            ...this._attachments\n        ];\n        newScope._sdkProcessingMetadata = {\n            ...this._sdkProcessingMetadata\n        };\n        newScope._propagationContext = {\n            ...this._propagationContext\n        };\n        newScope._client = this._client;\n        newScope._lastEventId = this._lastEventId;\n        (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._setSpanForScope)(newScope, (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._getSpanForScope)(this));\n        return newScope;\n    }\n    /**\n   * @inheritDoc\n   */ setClient(client) {\n        this._client = client;\n    }\n    /**\n   * @inheritDoc\n   */ setLastEventId(lastEventId) {\n        this._lastEventId = lastEventId;\n    }\n    /**\n   * @inheritDoc\n   */ getClient() {\n        return this._client;\n    }\n    /**\n   * @inheritDoc\n   */ lastEventId() {\n        return this._lastEventId;\n    }\n    /**\n   * @inheritDoc\n   */ addScopeListener(callback) {\n        this._scopeListeners.push(callback);\n    }\n    /**\n   * @inheritDoc\n   */ addEventProcessor(callback) {\n        this._eventProcessors.push(callback);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setUser(user) {\n        // If null is passed we want to unset everything, but still define keys,\n        // so that later down in the pipeline any existing values are cleared.\n        this._user = user || {\n            email: undefined,\n            id: undefined,\n            ip_address: undefined,\n            username: undefined\n        };\n        if (this._session) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_2__.updateSession)(this._session, {\n                user\n            });\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getUser() {\n        return this._user;\n    }\n    /**\n   * @inheritDoc\n   */ // eslint-disable-next-line deprecation/deprecation\n    getRequestSession() {\n        return this._requestSession;\n    }\n    /**\n   * @inheritDoc\n   */ // eslint-disable-next-line deprecation/deprecation\n    setRequestSession(requestSession) {\n        this._requestSession = requestSession;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTags(tags) {\n        this._tags = {\n            ...this._tags,\n            ...tags\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTag(key, value) {\n        this._tags = {\n            ...this._tags,\n            [key]: value\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setExtras(extras) {\n        this._extra = {\n            ...this._extra,\n            ...extras\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setExtra(key, extra) {\n        this._extra = {\n            ...this._extra,\n            [key]: extra\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setFingerprint(fingerprint) {\n        this._fingerprint = fingerprint;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setLevel(level) {\n        this._level = level;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */ setTransactionName(name) {\n        this._transactionName = name;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setContext(key, context) {\n        if (context === null) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this._contexts[key];\n        } else {\n            this._contexts[key] = context;\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setSession(session) {\n        if (!session) {\n            delete this._session;\n        } else {\n            this._session = session;\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getSession() {\n        return this._session;\n    }\n    /**\n   * @inheritDoc\n   */ update(captureContext) {\n        if (!captureContext) {\n            return this;\n        }\n        const scopeToMerge = typeof captureContext === \"function\" ? captureContext(this) : captureContext;\n        const [scopeInstance, requestSession] = scopeToMerge instanceof Scope ? [\n            scopeToMerge.getScopeData(),\n            scopeToMerge.getRequestSession()\n        ] : (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(scopeToMerge) ? [\n            captureContext,\n            captureContext.requestSession\n        ] : [];\n        const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n        this._tags = {\n            ...this._tags,\n            ...tags\n        };\n        this._extra = {\n            ...this._extra,\n            ...extra\n        };\n        this._contexts = {\n            ...this._contexts,\n            ...contexts\n        };\n        if (user && Object.keys(user).length) {\n            this._user = user;\n        }\n        if (level) {\n            this._level = level;\n        }\n        if (fingerprint.length) {\n            this._fingerprint = fingerprint;\n        }\n        if (propagationContext) {\n            this._propagationContext = propagationContext;\n        }\n        if (requestSession) {\n            this._requestSession = requestSession;\n        }\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ clear() {\n        // client is not cleared here on purpose!\n        this._breadcrumbs = [];\n        this._tags = {};\n        this._extra = {};\n        this._user = {};\n        this._contexts = {};\n        this._level = undefined;\n        this._transactionName = undefined;\n        this._fingerprint = undefined;\n        this._requestSession = undefined;\n        this._session = undefined;\n        (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._setSpanForScope)(this, undefined);\n        this._attachments = [];\n        this.setPropagationContext({\n            traceId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateTraceId)()\n        });\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n        const maxCrumbs = typeof maxBreadcrumbs === \"number\" ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n        // No data has been changed, so don't notify scope listeners\n        if (maxCrumbs <= 0) {\n            return this;\n        }\n        const mergedBreadcrumb = {\n            timestamp: (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_4__.dateTimestampInSeconds)(),\n            ...breadcrumb\n        };\n        this._breadcrumbs.push(mergedBreadcrumb);\n        if (this._breadcrumbs.length > maxCrumbs) {\n            this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n            if (this._client) {\n                this._client.recordDroppedEvent(\"buffer_overflow\", \"log_item\");\n            }\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getLastBreadcrumb() {\n        return this._breadcrumbs[this._breadcrumbs.length - 1];\n    }\n    /**\n   * @inheritDoc\n   */ clearBreadcrumbs() {\n        this._breadcrumbs = [];\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ addAttachment(attachment) {\n        this._attachments.push(attachment);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ clearAttachments() {\n        this._attachments = [];\n        return this;\n    }\n    /** @inheritDoc */ getScopeData() {\n        return {\n            breadcrumbs: this._breadcrumbs,\n            attachments: this._attachments,\n            contexts: this._contexts,\n            tags: this._tags,\n            extra: this._extra,\n            user: this._user,\n            level: this._level,\n            fingerprint: this._fingerprint || [],\n            eventProcessors: this._eventProcessors,\n            propagationContext: this._propagationContext,\n            sdkProcessingMetadata: this._sdkProcessingMetadata,\n            transactionName: this._transactionName,\n            span: (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._getSpanForScope)(this)\n        };\n    }\n    /**\n   * @inheritDoc\n   */ setSDKProcessingMetadata(newData) {\n        this._sdkProcessingMetadata = (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_5__.merge)(this._sdkProcessingMetadata, newData, 2);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setPropagationContext(context) {\n        this._propagationContext = {\n            // eslint-disable-next-line deprecation/deprecation\n            spanId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateSpanId)(),\n            ...context\n        };\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getPropagationContext() {\n        return this._propagationContext;\n    }\n    /**\n   * @inheritDoc\n   */ captureException(exception, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_6__.uuid4)();\n        if (!this._client) {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.warn(\"No client configured on scope - will not capture exception!\");\n            return eventId;\n        }\n        const syntheticException = new Error(\"Sentry syntheticException\");\n        this._client.captureException(exception, {\n            originalException: exception,\n            syntheticException,\n            ...hint,\n            event_id: eventId\n        }, this);\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureMessage(message, level, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_6__.uuid4)();\n        if (!this._client) {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.warn(\"No client configured on scope - will not capture message!\");\n            return eventId;\n        }\n        const syntheticException = new Error(message);\n        this._client.captureMessage(message, level, {\n            originalException: message,\n            syntheticException,\n            ...hint,\n            event_id: eventId\n        }, this);\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureEvent(event, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_6__.uuid4)();\n        if (!this._client) {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.warn(\"No client configured on scope - will not capture event!\");\n            return eventId;\n        }\n        this._client.captureEvent(event, {\n            ...hint,\n            event_id: eventId\n        }, this);\n        return eventId;\n    }\n    /**\n   * This will be called on every set call.\n   */ _notifyScopeListeners() {\n        // We need this check for this._notifyingListeners to be able to work on scope during updates\n        // If this check is not here we'll produce endless recursion when something is done with the scope\n        // during the callback.\n        if (!this._notifyingListeners) {\n            this._notifyingListeners = true;\n            this._scopeListeners.forEach((callback)=>{\n                callback(this);\n            });\n            this._notifyingListeners = false;\n        }\n    }\n}\n/**\n * Holds additional event information.\n */ const Scope = ScopeClass;\n/**\n * Holds additional event information.\n */  //# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBNkM7QUFDTztBQUNIO0FBQ0g7QUFDd0M7QUFDdkI7QUFDdEI7QUFDbUM7QUFFNUU7O0NBRUMsR0FDRCxNQUFNVSwwQkFBMEI7QUFFaEM7O0NBRUMsR0FDRCxNQUFNQztJQUNKLG9DQUFvQyxHQUVwQyxrREFBa0QsR0FFbEQsK0RBQStELEdBRS9ELDBCQUEwQixHQUUxQixTQUFTLEdBRVQsU0FBUyxHQUVULFVBQVUsR0FFVixhQUFhLEdBRWIsZ0JBQWdCLEdBRWhCLGdEQUFnRCxHQUVoRDs7O0dBR0MsR0FFRCxnQkFBZ0IsR0FFaEIsYUFBYSxHQUViOzs7OztHQUtDLEdBRUQsWUFBWSxHQUVaLGdDQUFnQyxHQUNoQyxtREFBbUQ7SUFFbkQsNkJBQTZCLEdBRTdCLHFEQUFxRCxHQUVyRCxxSEFBcUg7SUFFcEhDLGFBQWM7UUFDYixJQUFJLENBQUNDLG1CQUFtQixHQUFHO1FBQzNCLElBQUksQ0FBQ0MsZUFBZSxHQUFHLEVBQUU7UUFDekIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxFQUFFO1FBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUNDLEtBQUssR0FBRyxDQUFDO1FBQ2QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsQ0FBQztRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7UUFDZixJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDO1FBQ2xCLElBQUksQ0FBQ0Msc0JBQXNCLEdBQUcsQ0FBQztRQUMvQixJQUFJLENBQUNDLG1CQUFtQixHQUFHO1lBQ3pCQyxTQUFTcEIsbUZBQWVBO1lBQ3hCcUIsUUFBUXBCLGtGQUFjQTtRQUN4QjtJQUNGO0lBRUE7O0dBRUMsR0FDQXFCLFFBQVE7UUFDUCxNQUFNQyxXQUFXLElBQUloQjtRQUNyQmdCLFNBQVNYLFlBQVksR0FBRztlQUFJLElBQUksQ0FBQ0EsWUFBWTtTQUFDO1FBQzlDVyxTQUFTUixLQUFLLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsS0FBSztRQUFDO1FBQ2pDUSxTQUFTUCxNQUFNLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtRQUFDO1FBQ25DTyxTQUFTTixTQUFTLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsU0FBUztRQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDQSxTQUFTLENBQUNPLEtBQUssRUFBRTtZQUN4QixxRUFBcUU7WUFDckUsbUNBQW1DO1lBQ25DRCxTQUFTTixTQUFTLENBQUNPLEtBQUssR0FBRztnQkFDekJDLFFBQVE7dUJBQUksSUFBSSxDQUFDUixTQUFTLENBQUNPLEtBQUssQ0FBQ0MsTUFBTTtpQkFBQztZQUMxQztRQUNGO1FBRUFGLFNBQVNULEtBQUssR0FBRyxJQUFJLENBQUNBLEtBQUs7UUFDM0JTLFNBQVNHLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU07UUFDN0JILFNBQVNJLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7UUFDakNKLFNBQVNLLGdCQUFnQixHQUFHLElBQUksQ0FBQ0EsZ0JBQWdCO1FBQ2pETCxTQUFTTSxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZO1FBQ3pDTixTQUFTWixnQkFBZ0IsR0FBRztlQUFJLElBQUksQ0FBQ0EsZ0JBQWdCO1NBQUM7UUFDdERZLFNBQVNPLGVBQWUsR0FBRyxJQUFJLENBQUNBLGVBQWU7UUFDL0NQLFNBQVNWLFlBQVksR0FBRztlQUFJLElBQUksQ0FBQ0EsWUFBWTtTQUFDO1FBQzlDVSxTQUFTTCxzQkFBc0IsR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDQSxzQkFBc0I7UUFBQztRQUNuRUssU0FBU0osbUJBQW1CLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsbUJBQW1CO1FBQUM7UUFDN0RJLFNBQVNRLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU87UUFDL0JSLFNBQVNTLFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVk7UUFFekM1Qix1RUFBZ0JBLENBQUNtQixVQUFVbEIsdUVBQWdCQSxDQUFDLElBQUk7UUFFaEQsT0FBT2tCO0lBQ1Q7SUFFQTs7R0FFQyxHQUNBVSxVQUFVQyxNQUFNLEVBQUU7UUFDakIsSUFBSSxDQUFDSCxPQUFPLEdBQUdHO0lBQ2pCO0lBRUE7O0dBRUMsR0FDQUMsZUFBZUMsV0FBVyxFQUFFO1FBQzNCLElBQUksQ0FBQ0osWUFBWSxHQUFHSTtJQUN0QjtJQUVBOztHQUVDLEdBQ0FDLFlBQVk7UUFDWCxPQUFPLElBQUksQ0FBQ04sT0FBTztJQUNyQjtJQUVBOztHQUVDLEdBQ0FLLGNBQWM7UUFDYixPQUFPLElBQUksQ0FBQ0osWUFBWTtJQUMxQjtJQUVBOztHQUVDLEdBQ0FNLGlCQUFpQkMsUUFBUSxFQUFFO1FBQzFCLElBQUksQ0FBQzdCLGVBQWUsQ0FBQzhCLElBQUksQ0FBQ0Q7SUFDNUI7SUFFQTs7R0FFQyxHQUNBRSxrQkFBa0JGLFFBQVEsRUFBRTtRQUMzQixJQUFJLENBQUM1QixnQkFBZ0IsQ0FBQzZCLElBQUksQ0FBQ0Q7UUFDM0IsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBRyxRQUFRQyxJQUFJLEVBQUU7UUFDYix3RUFBd0U7UUFDeEUsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQzdCLEtBQUssR0FBRzZCLFFBQVE7WUFDbkJDLE9BQU9DO1lBQ1BDLElBQUlEO1lBQ0pFLFlBQVlGO1lBQ1pHLFVBQVVIO1FBQ1o7UUFFQSxJQUFJLElBQUksQ0FBQ2xCLFFBQVEsRUFBRTtZQUNqQi9CLDBEQUFhQSxDQUFDLElBQUksQ0FBQytCLFFBQVEsRUFBRTtnQkFBRWdCO1lBQUs7UUFDdEM7UUFFQSxJQUFJLENBQUNNLHFCQUFxQjtRQUMxQixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0FDLFVBQVU7UUFDVCxPQUFPLElBQUksQ0FBQ3BDLEtBQUs7SUFDbkI7SUFFQTs7R0FFQyxHQUNELG1EQUFtRDtJQUNsRHFDLG9CQUFvQjtRQUNuQixPQUFPLElBQUksQ0FBQ3JCLGVBQWU7SUFDN0I7SUFFQTs7R0FFQyxHQUNELG1EQUFtRDtJQUNsRHNCLGtCQUFrQkMsY0FBYyxFQUFFO1FBQ2pDLElBQUksQ0FBQ3ZCLGVBQWUsR0FBR3VCO1FBQ3ZCLE9BQU8sSUFBSTtJQUNiO0lBRUE7O0dBRUMsR0FDQUMsUUFBUUMsSUFBSSxFQUFFO1FBQ2IsSUFBSSxDQUFDeEMsS0FBSyxHQUFHO1lBQ1gsR0FBRyxJQUFJLENBQUNBLEtBQUs7WUFDYixHQUFHd0MsSUFBSTtRQUNUO1FBQ0EsSUFBSSxDQUFDTixxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBTyxPQUFPQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUNsQixJQUFJLENBQUMzQyxLQUFLLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsS0FBSztZQUFFLENBQUMwQyxJQUFJLEVBQUVDO1FBQU07UUFDM0MsSUFBSSxDQUFDVCxxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBVSxVQUFVQyxNQUFNLEVBQUU7UUFDakIsSUFBSSxDQUFDNUMsTUFBTSxHQUFHO1lBQ1osR0FBRyxJQUFJLENBQUNBLE1BQU07WUFDZCxHQUFHNEMsTUFBTTtRQUNYO1FBQ0EsSUFBSSxDQUFDWCxxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBWSxTQUFTSixHQUFHLEVBQUVLLEtBQUssRUFBRTtRQUNwQixJQUFJLENBQUM5QyxNQUFNLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtZQUFFLENBQUN5QyxJQUFJLEVBQUVLO1FBQU07UUFDN0MsSUFBSSxDQUFDYixxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBYyxlQUFlQyxXQUFXLEVBQUU7UUFDM0IsSUFBSSxDQUFDbkMsWUFBWSxHQUFHbUM7UUFDcEIsSUFBSSxDQUFDZixxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBZ0IsU0FBU0MsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDeEMsTUFBTSxHQUFHd0M7UUFDZCxJQUFJLENBQUNqQixxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7Ozs7Ozs7OztHQVVDLEdBQ0FrQixtQkFBbUJDLElBQUksRUFBRTtRQUN4QixJQUFJLENBQUN4QyxnQkFBZ0IsR0FBR3dDO1FBQ3hCLElBQUksQ0FBQ25CLHFCQUFxQjtRQUMxQixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0FvQixXQUFXWixHQUFHLEVBQUVhLE9BQU8sRUFBRTtRQUN4QixJQUFJQSxZQUFZLE1BQU07WUFDcEIsZ0VBQWdFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDckQsU0FBUyxDQUFDd0MsSUFBSTtRQUM1QixPQUFPO1lBQ0wsSUFBSSxDQUFDeEMsU0FBUyxDQUFDd0MsSUFBSSxHQUFHYTtRQUN4QjtRQUVBLElBQUksQ0FBQ3JCLHFCQUFxQjtRQUMxQixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0FzQixXQUFXQyxPQUFPLEVBQUU7UUFDbkIsSUFBSSxDQUFDQSxTQUFTO1lBQ1osT0FBTyxJQUFJLENBQUM3QyxRQUFRO1FBQ3RCLE9BQU87WUFDTCxJQUFJLENBQUNBLFFBQVEsR0FBRzZDO1FBQ2xCO1FBQ0EsSUFBSSxDQUFDdkIscUJBQXFCO1FBQzFCLE9BQU8sSUFBSTtJQUNiO0lBRUE7O0dBRUMsR0FDQXdCLGFBQWE7UUFDWixPQUFPLElBQUksQ0FBQzlDLFFBQVE7SUFDdEI7SUFFQTs7R0FFQyxHQUNBK0MsT0FBT0MsY0FBYyxFQUFFO1FBQ3RCLElBQUksQ0FBQ0EsZ0JBQWdCO1lBQ25CLE9BQU8sSUFBSTtRQUNiO1FBRUEsTUFBTUMsZUFBZSxPQUFPRCxtQkFBbUIsYUFBYUEsZUFBZSxJQUFJLElBQUlBO1FBRW5GLE1BQU0sQ0FBQ0UsZUFBZXhCLGVBQWUsR0FDbkN1Qix3QkFBd0JFLFFBRXBCO1lBQUNGLGFBQWFHLFlBQVk7WUFBSUgsYUFBYXpCLGlCQUFpQjtTQUFHLEdBQy9EdEQsaUVBQWFBLENBQUMrRSxnQkFDWjtZQUFDRDtZQUFrQkEsZUFBaUJ0QixjQUFjO1NBQUMsR0FDbkQsRUFBRTtRQUVWLE1BQU0sRUFBRUUsSUFBSSxFQUFFTyxLQUFLLEVBQUVuQixJQUFJLEVBQUVxQyxRQUFRLEVBQUVkLEtBQUssRUFBRUYsY0FBYyxFQUFFLEVBQUVpQixrQkFBa0IsRUFBRSxHQUFHSixpQkFBaUIsQ0FBQztRQUV2RyxJQUFJLENBQUM5RCxLQUFLLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsS0FBSztZQUFFLEdBQUd3QyxJQUFJO1FBQUM7UUFDdEMsSUFBSSxDQUFDdkMsTUFBTSxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUNBLE1BQU07WUFBRSxHQUFHOEMsS0FBSztRQUFDO1FBQ3pDLElBQUksQ0FBQzdDLFNBQVMsR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDQSxTQUFTO1lBQUUsR0FBRytELFFBQVE7UUFBQztRQUVsRCxJQUFJckMsUUFBUXVDLE9BQU9DLElBQUksQ0FBQ3hDLE1BQU15QyxNQUFNLEVBQUU7WUFDcEMsSUFBSSxDQUFDdEUsS0FBSyxHQUFHNkI7UUFDZjtRQUVBLElBQUl1QixPQUFPO1lBQ1QsSUFBSSxDQUFDeEMsTUFBTSxHQUFHd0M7UUFDaEI7UUFFQSxJQUFJRixZQUFZb0IsTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQ3ZELFlBQVksR0FBR21DO1FBQ3RCO1FBRUEsSUFBSWlCLG9CQUFvQjtZQUN0QixJQUFJLENBQUM5RCxtQkFBbUIsR0FBRzhEO1FBQzdCO1FBRUEsSUFBSTVCLGdCQUFnQjtZQUNsQixJQUFJLENBQUN2QixlQUFlLEdBQUd1QjtRQUN6QjtRQUVBLE9BQU8sSUFBSTtJQUNiO0lBRUE7O0dBRUMsR0FDQWdDLFFBQVE7UUFDUCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDekUsWUFBWSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDRyxLQUFLLEdBQUcsQ0FBQztRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7UUFDZixJQUFJLENBQUNGLEtBQUssR0FBRyxDQUFDO1FBQ2QsSUFBSSxDQUFDRyxTQUFTLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUNTLE1BQU0sR0FBR21CO1FBQ2QsSUFBSSxDQUFDakIsZ0JBQWdCLEdBQUdpQjtRQUN4QixJQUFJLENBQUNoQixZQUFZLEdBQUdnQjtRQUNwQixJQUFJLENBQUNmLGVBQWUsR0FBR2U7UUFDdkIsSUFBSSxDQUFDbEIsUUFBUSxHQUFHa0I7UUFDaEJ6Qyx1RUFBZ0JBLENBQUMsSUFBSSxFQUFFeUM7UUFDdkIsSUFBSSxDQUFDaEMsWUFBWSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDeUUscUJBQXFCLENBQUM7WUFBRWxFLFNBQVNwQixtRkFBZUE7UUFBRztRQUV4RCxJQUFJLENBQUNpRCxxQkFBcUI7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBc0MsY0FBY0MsVUFBVSxFQUFFQyxjQUFjLEVBQUU7UUFDekMsTUFBTUMsWUFBWSxPQUFPRCxtQkFBbUIsV0FBV0EsaUJBQWlCbkY7UUFFeEUsNERBQTREO1FBQzVELElBQUlvRixhQUFhLEdBQUc7WUFDbEIsT0FBTyxJQUFJO1FBQ2I7UUFFQSxNQUFNQyxtQkFBbUI7WUFDdkJDLFdBQVcxRiw0RUFBc0JBO1lBQ2pDLEdBQUdzRixVQUFVO1FBQ2Y7UUFFQSxJQUFJLENBQUM1RSxZQUFZLENBQUM0QixJQUFJLENBQUNtRDtRQUN2QixJQUFJLElBQUksQ0FBQy9FLFlBQVksQ0FBQ3dFLE1BQU0sR0FBR00sV0FBVztZQUN4QyxJQUFJLENBQUM5RSxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUNpRixLQUFLLENBQUMsQ0FBQ0g7WUFDN0MsSUFBSSxJQUFJLENBQUMzRCxPQUFPLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQ0EsT0FBTyxDQUFDK0Qsa0JBQWtCLENBQUMsbUJBQW1CO1lBQ3JEO1FBQ0Y7UUFFQSxJQUFJLENBQUM3QyxxQkFBcUI7UUFFMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNBOEMsb0JBQW9CO1FBQ25CLE9BQU8sSUFBSSxDQUFDbkYsWUFBWSxDQUFDLElBQUksQ0FBQ0EsWUFBWSxDQUFDd0UsTUFBTSxHQUFHLEVBQUU7SUFDeEQ7SUFFQTs7R0FFQyxHQUNBWSxtQkFBbUI7UUFDbEIsSUFBSSxDQUFDcEYsWUFBWSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDcUMscUJBQXFCO1FBQzFCLE9BQU8sSUFBSTtJQUNiO0lBRUE7O0dBRUMsR0FDQWdELGNBQWNDLFVBQVUsRUFBRTtRQUN6QixJQUFJLENBQUNyRixZQUFZLENBQUMyQixJQUFJLENBQUMwRDtRQUN2QixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0FDLG1CQUFtQjtRQUNsQixJQUFJLENBQUN0RixZQUFZLEdBQUcsRUFBRTtRQUN0QixPQUFPLElBQUk7SUFDYjtJQUVBLGdCQUFnQixHQUNma0UsZUFBZTtRQUNkLE9BQU87WUFDTHFCLGFBQWEsSUFBSSxDQUFDeEYsWUFBWTtZQUM5QnlGLGFBQWEsSUFBSSxDQUFDeEYsWUFBWTtZQUM5Qm1FLFVBQVUsSUFBSSxDQUFDL0QsU0FBUztZQUN4QnNDLE1BQU0sSUFBSSxDQUFDeEMsS0FBSztZQUNoQitDLE9BQU8sSUFBSSxDQUFDOUMsTUFBTTtZQUNsQjJCLE1BQU0sSUFBSSxDQUFDN0IsS0FBSztZQUNoQm9ELE9BQU8sSUFBSSxDQUFDeEMsTUFBTTtZQUNsQnNDLGFBQWEsSUFBSSxDQUFDbkMsWUFBWSxJQUFJLEVBQUU7WUFDcEN5RSxpQkFBaUIsSUFBSSxDQUFDM0YsZ0JBQWdCO1lBQ3RDc0Usb0JBQW9CLElBQUksQ0FBQzlELG1CQUFtQjtZQUM1Q29GLHVCQUF1QixJQUFJLENBQUNyRixzQkFBc0I7WUFDbERzRixpQkFBaUIsSUFBSSxDQUFDNUUsZ0JBQWdCO1lBQ3RDNkUsTUFBTXBHLHVFQUFnQkEsQ0FBQyxJQUFJO1FBQzdCO0lBQ0Y7SUFFQTs7R0FFQyxHQUNBcUcseUJBQXlCQyxPQUFPLEVBQUU7UUFDakMsSUFBSSxDQUFDekYsc0JBQXNCLEdBQUdmLHNEQUFLQSxDQUFDLElBQUksQ0FBQ2Usc0JBQXNCLEVBQUV5RixTQUFTO1FBQzFFLE9BQU8sSUFBSTtJQUNiO0lBRUE7O0dBRUMsR0FDQXJCLHNCQUNDaEIsT0FBTyxFQUNQO1FBQ0EsSUFBSSxDQUFDbkQsbUJBQW1CLEdBQUc7WUFDekIsbURBQW1EO1lBQ25ERSxRQUFRcEIsa0ZBQWNBO1lBQ3RCLEdBQUdxRSxPQUFPO1FBQ1o7UUFDQSxPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0FzQyx3QkFBd0I7UUFDdkIsT0FBTyxJQUFJLENBQUN6RixtQkFBbUI7SUFDakM7SUFFQTs7R0FFQyxHQUNBMEYsaUJBQWlCQyxTQUFTLEVBQUVDLElBQUksRUFBRTtRQUNqQyxNQUFNQyxVQUFVRCxRQUFRQSxLQUFLRSxRQUFRLEdBQUdGLEtBQUtFLFFBQVEsR0FBR2xILDJEQUFLQTtRQUU3RCxJQUFJLENBQUMsSUFBSSxDQUFDZ0MsT0FBTyxFQUFFO1lBQ2pCakMsMERBQU1BLENBQUNvSCxJQUFJLENBQUM7WUFDWixPQUFPRjtRQUNUO1FBRUEsTUFBTUcscUJBQXFCLElBQUlDLE1BQU07UUFFckMsSUFBSSxDQUFDckYsT0FBTyxDQUFDOEUsZ0JBQWdCLENBQzNCQyxXQUNBO1lBQ0VPLG1CQUFtQlA7WUFDbkJLO1lBQ0EsR0FBR0osSUFBSTtZQUNQRSxVQUFVRDtRQUNaLEdBQ0EsSUFBSTtRQUdOLE9BQU9BO0lBQ1Q7SUFFQTs7R0FFQyxHQUNBTSxlQUFlQyxPQUFPLEVBQUVyRCxLQUFLLEVBQUU2QyxJQUFJLEVBQUU7UUFDcEMsTUFBTUMsVUFBVUQsUUFBUUEsS0FBS0UsUUFBUSxHQUFHRixLQUFLRSxRQUFRLEdBQUdsSCwyREFBS0E7UUFFN0QsSUFBSSxDQUFDLElBQUksQ0FBQ2dDLE9BQU8sRUFBRTtZQUNqQmpDLDBEQUFNQSxDQUFDb0gsSUFBSSxDQUFDO1lBQ1osT0FBT0Y7UUFDVDtRQUVBLE1BQU1HLHFCQUFxQixJQUFJQyxNQUFNRztRQUVyQyxJQUFJLENBQUN4RixPQUFPLENBQUN1RixjQUFjLENBQ3pCQyxTQUNBckQsT0FDQTtZQUNFbUQsbUJBQW1CRTtZQUNuQko7WUFDQSxHQUFHSixJQUFJO1lBQ1BFLFVBQVVEO1FBQ1osR0FDQSxJQUFJO1FBR04sT0FBT0E7SUFDVDtJQUVBOztHQUVDLEdBQ0FRLGFBQWFDLEtBQUssRUFBRVYsSUFBSSxFQUFFO1FBQ3pCLE1BQU1DLFVBQVVELFFBQVFBLEtBQUtFLFFBQVEsR0FBR0YsS0FBS0UsUUFBUSxHQUFHbEgsMkRBQUtBO1FBRTdELElBQUksQ0FBQyxJQUFJLENBQUNnQyxPQUFPLEVBQUU7WUFDakJqQywwREFBTUEsQ0FBQ29ILElBQUksQ0FBQztZQUNaLE9BQU9GO1FBQ1Q7UUFFQSxJQUFJLENBQUNqRixPQUFPLENBQUN5RixZQUFZLENBQUNDLE9BQU87WUFBRSxHQUFHVixJQUFJO1lBQUVFLFVBQVVEO1FBQVEsR0FBRyxJQUFJO1FBRXJFLE9BQU9BO0lBQ1Q7SUFFQTs7R0FFQyxHQUNBL0Qsd0JBQXdCO1FBQ3ZCLDZGQUE2RjtRQUM3RixrR0FBa0c7UUFDbEcsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUN4QyxtQkFBbUIsRUFBRTtZQUM3QixJQUFJLENBQUNBLG1CQUFtQixHQUFHO1lBQzNCLElBQUksQ0FBQ0MsZUFBZSxDQUFDZ0gsT0FBTyxDQUFDbkYsQ0FBQUE7Z0JBQzNCQSxTQUFTLElBQUk7WUFDZjtZQUNBLElBQUksQ0FBQzlCLG1CQUFtQixHQUFHO1FBQzdCO0lBQ0Y7QUFDRjtBQUVBOztDQUVDLEdBQ0QsTUFBTXFFLFFBQVF2RTtBQUVkOztDQUVDLEdBRWdCLENBQ2pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zY29wZS5qcz9lY2M4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVwZGF0ZVNlc3Npb24gfSBmcm9tICcuL3Nlc3Npb24uanMnO1xuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vdXRpbHMtaG9pc3QvaXMuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgdXVpZDQgfSBmcm9tICcuL3V0aWxzLWhvaXN0L21pc2MuanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVUcmFjZUlkLCBnZW5lcmF0ZVNwYW5JZCB9IGZyb20gJy4vdXRpbHMtaG9pc3QvcHJvcGFnYXRpb25Db250ZXh0LmpzJztcbmltcG9ydCB7IGRhdGVUaW1lc3RhbXBJblNlY29uZHMgfSBmcm9tICcuL3V0aWxzLWhvaXN0L3RpbWUuanMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuL3V0aWxzL21lcmdlLmpzJztcbmltcG9ydCB7IF9zZXRTcGFuRm9yU2NvcGUsIF9nZXRTcGFuRm9yU2NvcGUgfSBmcm9tICcuL3V0aWxzL3NwYW5PblNjb3BlLmpzJztcblxuLyoqXG4gKiBEZWZhdWx0IHZhbHVlIGZvciBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC5cbiAqL1xuY29uc3QgREVGQVVMVF9NQVhfQlJFQURDUlVNQlMgPSAxMDA7XG5cbi8qKlxuICogSG9sZHMgYWRkaXRpb25hbCBldmVudCBpbmZvcm1hdGlvbi5cbiAqL1xuY2xhc3MgU2NvcGVDbGFzcyAge1xuICAvKiogRmxhZyBpZiBub3RpZnlpbmcgaXMgaGFwcGVuaW5nLiAqL1xuXG4gIC8qKiBDYWxsYmFjayBmb3IgY2xpZW50IHRvIHJlY2VpdmUgc2NvcGUgY2hhbmdlcy4gKi9cblxuICAvKiogQ2FsbGJhY2sgbGlzdCB0aGF0IHdpbGwgYmUgY2FsbGVkIGR1cmluZyBldmVudCBwcm9jZXNzaW5nLiAqL1xuXG4gIC8qKiBBcnJheSBvZiBicmVhZGNydW1icy4gKi9cblxuICAvKiogVXNlciAqL1xuXG4gIC8qKiBUYWdzICovXG5cbiAgLyoqIEV4dHJhICovXG5cbiAgLyoqIENvbnRleHRzICovXG5cbiAgLyoqIEF0dGFjaG1lbnRzICovXG5cbiAgLyoqIFByb3BhZ2F0aW9uIENvbnRleHQgZm9yIGRpc3RyaWJ1dGVkIHRyYWNpbmcgKi9cblxuICAvKipcbiAgICogQSBwbGFjZSB0byBzdGFzaCBkYXRhIHdoaWNoIGlzIG5lZWRlZCBhdCBzb21lIHBvaW50IGluIHRoZSBTREsncyBldmVudCBwcm9jZXNzaW5nIHBpcGVsaW5lIGJ1dCB3aGljaCBzaG91bGRuJ3QgZ2V0XG4gICAqIHNlbnQgdG8gU2VudHJ5XG4gICAqL1xuXG4gIC8qKiBGaW5nZXJwcmludCAqL1xuXG4gIC8qKiBTZXZlcml0eSAqL1xuXG4gIC8qKlxuICAgKiBUcmFuc2FjdGlvbiBOYW1lXG4gICAqXG4gICAqIElNUE9SVEFOVDogVGhlIHRyYW5zYWN0aW9uIG5hbWUgb24gdGhlIHNjb3BlIGhhcyBub3RoaW5nIHRvIGRvIHdpdGggcm9vdCBzcGFucy90cmFuc2FjdGlvbiBvYmplY3RzLlxuICAgKiBJdCdzIHB1cnBvc2UgaXMgdG8gYXNzaWduIGEgdHJhbnNhY3Rpb24gdG8gdGhlIHNjb3BlIHRoYXQncyBhZGRlZCB0byBub24tdHJhbnNhY3Rpb24gZXZlbnRzLlxuICAgKi9cblxuICAvKiogU2Vzc2lvbiAqL1xuXG4gIC8qKiBSZXF1ZXN0IE1vZGUgU2Vzc2lvbiBTdGF0dXMgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG5cbiAgLyoqIFRoZSBjbGllbnQgb24gdGhpcyBzY29wZSAqL1xuXG4gIC8qKiBDb250YWlucyB0aGUgbGFzdCBldmVudCBpZCBvZiBhIGNhcHR1cmVkIGV2ZW50LiAgKi9cblxuICAvLyBOT1RFOiBBbnkgZmllbGQgd2hpY2ggZ2V0cyBhZGRlZCBoZXJlIHNob3VsZCBnZXQgYWRkZWQgbm90IG9ubHkgdG8gdGhlIGNvbnN0cnVjdG9yIGJ1dCBhbHNvIHRvIHRoZSBgY2xvbmVgIG1ldGhvZC5cblxuICAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzID0gZmFsc2U7XG4gICAgdGhpcy5fc2NvcGVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9ldmVudFByb2Nlc3NvcnMgPSBbXTtcbiAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgIHRoaXMuX2F0dGFjaG1lbnRzID0gW107XG4gICAgdGhpcy5fdXNlciA9IHt9O1xuICAgIHRoaXMuX3RhZ3MgPSB7fTtcbiAgICB0aGlzLl9leHRyYSA9IHt9O1xuICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgdGhpcy5fc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge307XG4gICAgdGhpcy5fcHJvcGFnYXRpb25Db250ZXh0ID0ge1xuICAgICAgdHJhY2VJZDogZ2VuZXJhdGVUcmFjZUlkKCksXG4gICAgICBzcGFuSWQ6IGdlbmVyYXRlU3BhbklkKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGNsb25lKCkge1xuICAgIGNvbnN0IG5ld1Njb3BlID0gbmV3IFNjb3BlQ2xhc3MoKTtcbiAgICBuZXdTY29wZS5fYnJlYWRjcnVtYnMgPSBbLi4udGhpcy5fYnJlYWRjcnVtYnNdO1xuICAgIG5ld1Njb3BlLl90YWdzID0geyAuLi50aGlzLl90YWdzIH07XG4gICAgbmV3U2NvcGUuX2V4dHJhID0geyAuLi50aGlzLl9leHRyYSB9O1xuICAgIG5ld1Njb3BlLl9jb250ZXh0cyA9IHsgLi4udGhpcy5fY29udGV4dHMgfTtcbiAgICBpZiAodGhpcy5fY29udGV4dHMuZmxhZ3MpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gY29weSB0aGUgYHZhbHVlc2AgYXJyYXkgc28gaW5zZXJ0aW9ucyBvbiBhIGNsb25lZCBzY29wZVxuICAgICAgLy8gd29uJ3QgYWZmZWN0IHRoZSBvcmlnaW5hbCBhcnJheS5cbiAgICAgIG5ld1Njb3BlLl9jb250ZXh0cy5mbGFncyA9IHtcbiAgICAgICAgdmFsdWVzOiBbLi4udGhpcy5fY29udGV4dHMuZmxhZ3MudmFsdWVzXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbmV3U2NvcGUuX3VzZXIgPSB0aGlzLl91c2VyO1xuICAgIG5ld1Njb3BlLl9sZXZlbCA9IHRoaXMuX2xldmVsO1xuICAgIG5ld1Njb3BlLl9zZXNzaW9uID0gdGhpcy5fc2Vzc2lvbjtcbiAgICBuZXdTY29wZS5fdHJhbnNhY3Rpb25OYW1lID0gdGhpcy5fdHJhbnNhY3Rpb25OYW1lO1xuICAgIG5ld1Njb3BlLl9maW5nZXJwcmludCA9IHRoaXMuX2ZpbmdlcnByaW50O1xuICAgIG5ld1Njb3BlLl9ldmVudFByb2Nlc3NvcnMgPSBbLi4udGhpcy5fZXZlbnRQcm9jZXNzb3JzXTtcbiAgICBuZXdTY29wZS5fcmVxdWVzdFNlc3Npb24gPSB0aGlzLl9yZXF1ZXN0U2Vzc2lvbjtcbiAgICBuZXdTY29wZS5fYXR0YWNobWVudHMgPSBbLi4udGhpcy5fYXR0YWNobWVudHNdO1xuICAgIG5ld1Njb3BlLl9zZGtQcm9jZXNzaW5nTWV0YWRhdGEgPSB7IC4uLnRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSB9O1xuICAgIG5ld1Njb3BlLl9wcm9wYWdhdGlvbkNvbnRleHQgPSB7IC4uLnRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dCB9O1xuICAgIG5ld1Njb3BlLl9jbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gICAgbmV3U2NvcGUuX2xhc3RFdmVudElkID0gdGhpcy5fbGFzdEV2ZW50SWQ7XG5cbiAgICBfc2V0U3BhbkZvclNjb3BlKG5ld1Njb3BlLCBfZ2V0U3BhbkZvclNjb3BlKHRoaXMpKTtcblxuICAgIHJldHVybiBuZXdTY29wZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldENsaWVudChjbGllbnQpIHtcbiAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXRMYXN0RXZlbnRJZChsYXN0RXZlbnRJZCkge1xuICAgIHRoaXMuX2xhc3RFdmVudElkID0gbGFzdEV2ZW50SWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBnZXRDbGllbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudCA7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBsYXN0RXZlbnRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50SWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBhZGRTY29wZUxpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fc2NvcGVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBhZGRFdmVudFByb2Nlc3NvcihjYWxsYmFjaykge1xuICAgIHRoaXMuX2V2ZW50UHJvY2Vzc29ycy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldFVzZXIodXNlcikge1xuICAgIC8vIElmIG51bGwgaXMgcGFzc2VkIHdlIHdhbnQgdG8gdW5zZXQgZXZlcnl0aGluZywgYnV0IHN0aWxsIGRlZmluZSBrZXlzLFxuICAgIC8vIHNvIHRoYXQgbGF0ZXIgZG93biBpbiB0aGUgcGlwZWxpbmUgYW55IGV4aXN0aW5nIHZhbHVlcyBhcmUgY2xlYXJlZC5cbiAgICB0aGlzLl91c2VyID0gdXNlciB8fCB7XG4gICAgICBlbWFpbDogdW5kZWZpbmVkLFxuICAgICAgaWQ6IHVuZGVmaW5lZCxcbiAgICAgIGlwX2FkZHJlc3M6IHVuZGVmaW5lZCxcbiAgICAgIHVzZXJuYW1lOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLl9zZXNzaW9uKSB7XG4gICAgICB1cGRhdGVTZXNzaW9uKHRoaXMuX3Nlc3Npb24sIHsgdXNlciB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgZ2V0VXNlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICBnZXRSZXF1ZXN0U2Vzc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdFNlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgc2V0UmVxdWVzdFNlc3Npb24ocmVxdWVzdFNlc3Npb24pIHtcbiAgICB0aGlzLl9yZXF1ZXN0U2Vzc2lvbiA9IHJlcXVlc3RTZXNzaW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0VGFncyh0YWdzKSB7XG4gICAgdGhpcy5fdGFncyA9IHtcbiAgICAgIC4uLnRoaXMuX3RhZ3MsXG4gICAgICAuLi50YWdzLFxuICAgIH07XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldFRhZyhrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5fdGFncyA9IHsgLi4udGhpcy5fdGFncywgW2tleV06IHZhbHVlIH07XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldEV4dHJhcyhleHRyYXMpIHtcbiAgICB0aGlzLl9leHRyYSA9IHtcbiAgICAgIC4uLnRoaXMuX2V4dHJhLFxuICAgICAgLi4uZXh0cmFzLFxuICAgIH07XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldEV4dHJhKGtleSwgZXh0cmEpIHtcbiAgICB0aGlzLl9leHRyYSA9IHsgLi4udGhpcy5fZXh0cmEsIFtrZXldOiBleHRyYSB9O1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXRGaW5nZXJwcmludChmaW5nZXJwcmludCkge1xuICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gZmluZ2VycHJpbnQ7XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldExldmVsKGxldmVsKSB7XG4gICAgdGhpcy5fbGV2ZWwgPSBsZXZlbDtcbiAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHRyYW5zYWN0aW9uIG5hbWUgb24gdGhlIHNjb3BlIHNvIHRoYXQgdGhlIG5hbWUgb2YgZS5nLiB0YWtlbiBzZXJ2ZXIgcm91dGUgb3JcbiAgICogdGhlIHBhZ2UgbG9jYXRpb24gaXMgYXR0YWNoZWQgdG8gZnV0dXJlIGV2ZW50cy5cbiAgICpcbiAgICogSU1QT1JUQU5UOiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gZG9lcyBOT1QgY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlXG4gICAqIHJvb3Qgc3Bhbi4gSWYgeW91IHdhbnQgdG8gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSBhY3RpdmUgcm9vdCBzcGFuLCB1c2VcbiAgICogYFNlbnRyeS51cGRhdGVTcGFuTmFtZShyb290U3BhbiwgJ25ldyBuYW1lJylgIGluc3RlYWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBTREsgdXBkYXRlcyB0aGUgc2NvcGUncyB0cmFuc2FjdGlvbiBuYW1lIGF1dG9tYXRpY2FsbHkgb24gc2Vuc2libGVcbiAgICogb2NjYXNpb25zLCBzdWNoIGFzIGEgcGFnZSBuYXZpZ2F0aW9uIG9yIHdoZW4gaGFuZGxpbmcgYSBuZXcgcmVxdWVzdCBvbiB0aGUgc2VydmVyLlxuICAgKi9cbiAgIHNldFRyYW5zYWN0aW9uTmFtZShuYW1lKSB7XG4gICAgdGhpcy5fdHJhbnNhY3Rpb25OYW1lID0gbmFtZTtcbiAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0Q29udGV4dChrZXksIGNvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgZGVsZXRlIHRoaXMuX2NvbnRleHRzW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NvbnRleHRzW2tleV0gPSBjb250ZXh0O1xuICAgIH1cblxuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXRTZXNzaW9uKHNlc3Npb24pIHtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zZXNzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICB9XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGdldFNlc3Npb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICB1cGRhdGUoY2FwdHVyZUNvbnRleHQpIHtcbiAgICBpZiAoIWNhcHR1cmVDb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25zdCBzY29wZVRvTWVyZ2UgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdmdW5jdGlvbicgPyBjYXB0dXJlQ29udGV4dCh0aGlzKSA6IGNhcHR1cmVDb250ZXh0O1xuXG4gICAgY29uc3QgW3Njb3BlSW5zdGFuY2UsIHJlcXVlc3RTZXNzaW9uXSA9XG4gICAgICBzY29wZVRvTWVyZ2UgaW5zdGFuY2VvZiBTY29wZVxuICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgIFtzY29wZVRvTWVyZ2UuZ2V0U2NvcGVEYXRhKCksIHNjb3BlVG9NZXJnZS5nZXRSZXF1ZXN0U2Vzc2lvbigpXVxuICAgICAgICA6IGlzUGxhaW5PYmplY3Qoc2NvcGVUb01lcmdlKVxuICAgICAgICAgID8gW2NhcHR1cmVDb250ZXh0ICwgKGNhcHR1cmVDb250ZXh0ICkucmVxdWVzdFNlc3Npb25dXG4gICAgICAgICAgOiBbXTtcblxuICAgIGNvbnN0IHsgdGFncywgZXh0cmEsIHVzZXIsIGNvbnRleHRzLCBsZXZlbCwgZmluZ2VycHJpbnQgPSBbXSwgcHJvcGFnYXRpb25Db250ZXh0IH0gPSBzY29wZUluc3RhbmNlIHx8IHt9O1xuXG4gICAgdGhpcy5fdGFncyA9IHsgLi4udGhpcy5fdGFncywgLi4udGFncyB9O1xuICAgIHRoaXMuX2V4dHJhID0geyAuLi50aGlzLl9leHRyYSwgLi4uZXh0cmEgfTtcbiAgICB0aGlzLl9jb250ZXh0cyA9IHsgLi4udGhpcy5fY29udGV4dHMsIC4uLmNvbnRleHRzIH07XG5cbiAgICBpZiAodXNlciAmJiBPYmplY3Qua2V5cyh1c2VyKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3VzZXIgPSB1c2VyO1xuICAgIH1cblxuICAgIGlmIChsZXZlbCkge1xuICAgICAgdGhpcy5fbGV2ZWwgPSBsZXZlbDtcbiAgICB9XG5cbiAgICBpZiAoZmluZ2VycHJpbnQubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9maW5nZXJwcmludCA9IGZpbmdlcnByaW50O1xuICAgIH1cblxuICAgIGlmIChwcm9wYWdhdGlvbkNvbnRleHQpIHtcbiAgICAgIHRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dCA9IHByb3BhZ2F0aW9uQ29udGV4dDtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdFNlc3Npb24pIHtcbiAgICAgIHRoaXMuX3JlcXVlc3RTZXNzaW9uID0gcmVxdWVzdFNlc3Npb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBjbGVhcigpIHtcbiAgICAvLyBjbGllbnQgaXMgbm90IGNsZWFyZWQgaGVyZSBvbiBwdXJwb3NlIVxuICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgdGhpcy5fdGFncyA9IHt9O1xuICAgIHRoaXMuX2V4dHJhID0ge307XG4gICAgdGhpcy5fdXNlciA9IHt9O1xuICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgdGhpcy5fbGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdHJhbnNhY3Rpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JlcXVlc3RTZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Nlc3Npb24gPSB1bmRlZmluZWQ7XG4gICAgX3NldFNwYW5Gb3JTY29wZSh0aGlzLCB1bmRlZmluZWQpO1xuICAgIHRoaXMuX2F0dGFjaG1lbnRzID0gW107XG4gICAgdGhpcy5zZXRQcm9wYWdhdGlvbkNvbnRleHQoeyB0cmFjZUlkOiBnZW5lcmF0ZVRyYWNlSWQoKSB9KTtcblxuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIG1heEJyZWFkY3J1bWJzKSB7XG4gICAgY29uc3QgbWF4Q3J1bWJzID0gdHlwZW9mIG1heEJyZWFkY3J1bWJzID09PSAnbnVtYmVyJyA/IG1heEJyZWFkY3J1bWJzIDogREVGQVVMVF9NQVhfQlJFQURDUlVNQlM7XG5cbiAgICAvLyBObyBkYXRhIGhhcyBiZWVuIGNoYW5nZWQsIHNvIGRvbid0IG5vdGlmeSBzY29wZSBsaXN0ZW5lcnNcbiAgICBpZiAobWF4Q3J1bWJzIDw9IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbnN0IG1lcmdlZEJyZWFkY3J1bWIgPSB7XG4gICAgICB0aW1lc3RhbXA6IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSxcbiAgICAgIC4uLmJyZWFkY3J1bWIsXG4gICAgfTtcblxuICAgIHRoaXMuX2JyZWFkY3J1bWJzLnB1c2gobWVyZ2VkQnJlYWRjcnVtYik7XG4gICAgaWYgKHRoaXMuX2JyZWFkY3J1bWJzLmxlbmd0aCA+IG1heENydW1icykge1xuICAgICAgdGhpcy5fYnJlYWRjcnVtYnMgPSB0aGlzLl9icmVhZGNydW1icy5zbGljZSgtbWF4Q3J1bWJzKTtcbiAgICAgIGlmICh0aGlzLl9jbGllbnQpIHtcbiAgICAgICAgdGhpcy5fY2xpZW50LnJlY29yZERyb3BwZWRFdmVudCgnYnVmZmVyX292ZXJmbG93JywgJ2xvZ19pdGVtJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgZ2V0TGFzdEJyZWFkY3J1bWIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWFkY3J1bWJzW3RoaXMuX2JyZWFkY3J1bWJzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgY2xlYXJCcmVhZGNydW1icygpIHtcbiAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBhZGRBdHRhY2htZW50KGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLl9hdHRhY2htZW50cy5wdXNoKGF0dGFjaG1lbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgY2xlYXJBdHRhY2htZW50cygpIHtcbiAgICB0aGlzLl9hdHRhY2htZW50cyA9IFtdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gICBnZXRTY29wZURhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJyZWFkY3J1bWJzOiB0aGlzLl9icmVhZGNydW1icyxcbiAgICAgIGF0dGFjaG1lbnRzOiB0aGlzLl9hdHRhY2htZW50cyxcbiAgICAgIGNvbnRleHRzOiB0aGlzLl9jb250ZXh0cyxcbiAgICAgIHRhZ3M6IHRoaXMuX3RhZ3MsXG4gICAgICBleHRyYTogdGhpcy5fZXh0cmEsXG4gICAgICB1c2VyOiB0aGlzLl91c2VyLFxuICAgICAgbGV2ZWw6IHRoaXMuX2xldmVsLFxuICAgICAgZmluZ2VycHJpbnQ6IHRoaXMuX2ZpbmdlcnByaW50IHx8IFtdLFxuICAgICAgZXZlbnRQcm9jZXNzb3JzOiB0aGlzLl9ldmVudFByb2Nlc3NvcnMsXG4gICAgICBwcm9wYWdhdGlvbkNvbnRleHQ6IHRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dCxcbiAgICAgIHNka1Byb2Nlc3NpbmdNZXRhZGF0YTogdGhpcy5fc2RrUHJvY2Vzc2luZ01ldGFkYXRhLFxuICAgICAgdHJhbnNhY3Rpb25OYW1lOiB0aGlzLl90cmFuc2FjdGlvbk5hbWUsXG4gICAgICBzcGFuOiBfZ2V0U3BhbkZvclNjb3BlKHRoaXMpLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEobmV3RGF0YSkge1xuICAgIHRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IG1lcmdlKHRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSwgbmV3RGF0YSwgMik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXRQcm9wYWdhdGlvbkNvbnRleHQoXG4gICAgY29udGV4dCxcbiAgKSB7XG4gICAgdGhpcy5fcHJvcGFnYXRpb25Db250ZXh0ID0ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBzcGFuSWQ6IGdlbmVyYXRlU3BhbklkKCksXG4gICAgICAuLi5jb250ZXh0LFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBnZXRQcm9wYWdhdGlvbkNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgY29uc3QgZXZlbnRJZCA9IGhpbnQgJiYgaGludC5ldmVudF9pZCA/IGhpbnQuZXZlbnRfaWQgOiB1dWlkNCgpO1xuXG4gICAgaWYgKCF0aGlzLl9jbGllbnQpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdObyBjbGllbnQgY29uZmlndXJlZCBvbiBzY29wZSAtIHdpbGwgbm90IGNhcHR1cmUgZXhjZXB0aW9uIScpO1xuICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc3ludGhldGljRXhjZXB0aW9uID0gbmV3IEVycm9yKCdTZW50cnkgc3ludGhldGljRXhjZXB0aW9uJyk7XG5cbiAgICB0aGlzLl9jbGllbnQuY2FwdHVyZUV4Y2VwdGlvbihcbiAgICAgIGV4Y2VwdGlvbixcbiAgICAgIHtcbiAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICAgICAgc3ludGhldGljRXhjZXB0aW9uLFxuICAgICAgICAuLi5oaW50LFxuICAgICAgICBldmVudF9pZDogZXZlbnRJZCxcbiAgICAgIH0sXG4gICAgICB0aGlzLFxuICAgICk7XG5cbiAgICByZXR1cm4gZXZlbnRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGxldmVsLCBoaW50KSB7XG4gICAgY29uc3QgZXZlbnRJZCA9IGhpbnQgJiYgaGludC5ldmVudF9pZCA/IGhpbnQuZXZlbnRfaWQgOiB1dWlkNCgpO1xuXG4gICAgaWYgKCF0aGlzLl9jbGllbnQpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdObyBjbGllbnQgY29uZmlndXJlZCBvbiBzY29wZSAtIHdpbGwgbm90IGNhcHR1cmUgbWVzc2FnZSEnKTtcbiAgICAgIHJldHVybiBldmVudElkO1xuICAgIH1cblxuICAgIGNvbnN0IHN5bnRoZXRpY0V4Y2VwdGlvbiA9IG5ldyBFcnJvcihtZXNzYWdlKTtcblxuICAgIHRoaXMuX2NsaWVudC5jYXB0dXJlTWVzc2FnZShcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbCxcbiAgICAgIHtcbiAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IG1lc3NhZ2UsXG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICAgICAgLi4uaGludCxcbiAgICAgICAgZXZlbnRfaWQ6IGV2ZW50SWQsXG4gICAgICB9LFxuICAgICAgdGhpcyxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV2ZW50SWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBjYXB0dXJlRXZlbnQoZXZlbnQsIGhpbnQpIHtcbiAgICBjb25zdCBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkID8gaGludC5ldmVudF9pZCA6IHV1aWQ0KCk7XG5cbiAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgbG9nZ2VyLndhcm4oJ05vIGNsaWVudCBjb25maWd1cmVkIG9uIHNjb3BlIC0gd2lsbCBub3QgY2FwdHVyZSBldmVudCEnKTtcbiAgICAgIHJldHVybiBldmVudElkO1xuICAgIH1cblxuICAgIHRoaXMuX2NsaWVudC5jYXB0dXJlRXZlbnQoZXZlbnQsIHsgLi4uaGludCwgZXZlbnRfaWQ6IGV2ZW50SWQgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gZXZlbnRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5IHNldCBjYWxsLlxuICAgKi9cbiAgIF9ub3RpZnlTY29wZUxpc3RlbmVycygpIHtcbiAgICAvLyBXZSBuZWVkIHRoaXMgY2hlY2sgZm9yIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyB0byBiZSBhYmxlIHRvIHdvcmsgb24gc2NvcGUgZHVyaW5nIHVwZGF0ZXNcbiAgICAvLyBJZiB0aGlzIGNoZWNrIGlzIG5vdCBoZXJlIHdlJ2xsIHByb2R1Y2UgZW5kbGVzcyByZWN1cnNpb24gd2hlbiBzb21ldGhpbmcgaXMgZG9uZSB3aXRoIHRoZSBzY29wZVxuICAgIC8vIGR1cmluZyB0aGUgY2FsbGJhY2suXG4gICAgaWYgKCF0aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IHRydWU7XG4gICAgICB0aGlzLl9zY29wZUxpc3RlbmVycy5mb3JFYWNoKGNhbGxiYWNrID0+IHtcbiAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEhvbGRzIGFkZGl0aW9uYWwgZXZlbnQgaW5mb3JtYXRpb24uXG4gKi9cbmNvbnN0IFNjb3BlID0gU2NvcGVDbGFzcztcblxuLyoqXG4gKiBIb2xkcyBhZGRpdGlvbmFsIGV2ZW50IGluZm9ybWF0aW9uLlxuICovXG5cbmV4cG9ydCB7IFNjb3BlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1cGRhdGVTZXNzaW9uIiwiaXNQbGFpbk9iamVjdCIsImxvZ2dlciIsInV1aWQ0IiwiZ2VuZXJhdGVUcmFjZUlkIiwiZ2VuZXJhdGVTcGFuSWQiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwibWVyZ2UiLCJfc2V0U3BhbkZvclNjb3BlIiwiX2dldFNwYW5Gb3JTY29wZSIsIkRFRkFVTFRfTUFYX0JSRUFEQ1JVTUJTIiwiU2NvcGVDbGFzcyIsImNvbnN0cnVjdG9yIiwiX25vdGlmeWluZ0xpc3RlbmVycyIsIl9zY29wZUxpc3RlbmVycyIsIl9ldmVudFByb2Nlc3NvcnMiLCJfYnJlYWRjcnVtYnMiLCJfYXR0YWNobWVudHMiLCJfdXNlciIsIl90YWdzIiwiX2V4dHJhIiwiX2NvbnRleHRzIiwiX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSIsIl9wcm9wYWdhdGlvbkNvbnRleHQiLCJ0cmFjZUlkIiwic3BhbklkIiwiY2xvbmUiLCJuZXdTY29wZSIsImZsYWdzIiwidmFsdWVzIiwiX2xldmVsIiwiX3Nlc3Npb24iLCJfdHJhbnNhY3Rpb25OYW1lIiwiX2ZpbmdlcnByaW50IiwiX3JlcXVlc3RTZXNzaW9uIiwiX2NsaWVudCIsIl9sYXN0RXZlbnRJZCIsInNldENsaWVudCIsImNsaWVudCIsInNldExhc3RFdmVudElkIiwibGFzdEV2ZW50SWQiLCJnZXRDbGllbnQiLCJhZGRTY29wZUxpc3RlbmVyIiwiY2FsbGJhY2siLCJwdXNoIiwiYWRkRXZlbnRQcm9jZXNzb3IiLCJzZXRVc2VyIiwidXNlciIsImVtYWlsIiwidW5kZWZpbmVkIiwiaWQiLCJpcF9hZGRyZXNzIiwidXNlcm5hbWUiLCJfbm90aWZ5U2NvcGVMaXN0ZW5lcnMiLCJnZXRVc2VyIiwiZ2V0UmVxdWVzdFNlc3Npb24iLCJzZXRSZXF1ZXN0U2Vzc2lvbiIsInJlcXVlc3RTZXNzaW9uIiwic2V0VGFncyIsInRhZ3MiLCJzZXRUYWciLCJrZXkiLCJ2YWx1ZSIsInNldEV4dHJhcyIsImV4dHJhcyIsInNldEV4dHJhIiwiZXh0cmEiLCJzZXRGaW5nZXJwcmludCIsImZpbmdlcnByaW50Iiwic2V0TGV2ZWwiLCJsZXZlbCIsInNldFRyYW5zYWN0aW9uTmFtZSIsIm5hbWUiLCJzZXRDb250ZXh0IiwiY29udGV4dCIsInNldFNlc3Npb24iLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsInVwZGF0ZSIsImNhcHR1cmVDb250ZXh0Iiwic2NvcGVUb01lcmdlIiwic2NvcGVJbnN0YW5jZSIsIlNjb3BlIiwiZ2V0U2NvcGVEYXRhIiwiY29udGV4dHMiLCJwcm9wYWdhdGlvbkNvbnRleHQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiY2xlYXIiLCJzZXRQcm9wYWdhdGlvbkNvbnRleHQiLCJhZGRCcmVhZGNydW1iIiwiYnJlYWRjcnVtYiIsIm1heEJyZWFkY3J1bWJzIiwibWF4Q3J1bWJzIiwibWVyZ2VkQnJlYWRjcnVtYiIsInRpbWVzdGFtcCIsInNsaWNlIiwicmVjb3JkRHJvcHBlZEV2ZW50IiwiZ2V0TGFzdEJyZWFkY3J1bWIiLCJjbGVhckJyZWFkY3J1bWJzIiwiYWRkQXR0YWNobWVudCIsImF0dGFjaG1lbnQiLCJjbGVhckF0dGFjaG1lbnRzIiwiYnJlYWRjcnVtYnMiLCJhdHRhY2htZW50cyIsImV2ZW50UHJvY2Vzc29ycyIsInNka1Byb2Nlc3NpbmdNZXRhZGF0YSIsInRyYW5zYWN0aW9uTmFtZSIsInNwYW4iLCJzZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEiLCJuZXdEYXRhIiwiZ2V0UHJvcGFnYXRpb25Db250ZXh0IiwiY2FwdHVyZUV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhpbnQiLCJldmVudElkIiwiZXZlbnRfaWQiLCJ3YXJuIiwic3ludGhldGljRXhjZXB0aW9uIiwiRXJyb3IiLCJvcmlnaW5hbEV4Y2VwdGlvbiIsImNhcHR1cmVNZXNzYWdlIiwibWVzc2FnZSIsImNhcHR1cmVFdmVudCIsImV2ZW50IiwiZm9yRWFjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/scope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/sdk.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/sdk.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAndBind: () => (/* binding */ initAndBind),\n/* harmony export */   setCurrentClient: () => (/* binding */ setCurrentClient)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n/** A class object that can instantiate Client objects. */ /**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */ function initAndBind(clientClass, options) {\n    if (options.debug === true) {\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD) {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.enable();\n        } else {\n            // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n            (0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.consoleSandbox)(()=>{\n                // eslint-disable-next-line no-console\n                console.warn(\"[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.\");\n            });\n        }\n    }\n    const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentScope)();\n    scope.update(options.initialScope);\n    const client = new clientClass(options);\n    setCurrentClient(client);\n    client.init();\n    return client;\n}\n/**\n * Make the given client the current client.\n */ function setCurrentClient(client) {\n    (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentScope)().setClient(client);\n}\n //# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zZGsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUQ7QUFDTjtBQUNrQjtBQUVqRSx3REFBd0QsR0FFeEQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0ksWUFDUEMsV0FBVyxFQUNYQyxPQUFPO0lBRVAsSUFBSUEsUUFBUUMsS0FBSyxLQUFLLE1BQU07UUFDMUIsSUFBSU4sd0RBQVdBLEVBQUU7WUFDZkMsMERBQU1BLENBQUNNLE1BQU07UUFDZixPQUFPO1lBQ0wsa0hBQWtIO1lBQ2xITCxzRUFBY0EsQ0FBQztnQkFDYixzQ0FBc0M7Z0JBQ3RDTSxRQUFRQyxJQUFJLENBQUM7WUFDZjtRQUNGO0lBQ0Y7SUFDQSxNQUFNQyxRQUFRWCxrRUFBZUE7SUFDN0JXLE1BQU1DLE1BQU0sQ0FBQ04sUUFBUU8sWUFBWTtJQUVqQyxNQUFNQyxTQUFTLElBQUlULFlBQVlDO0lBQy9CUyxpQkFBaUJEO0lBQ2pCQSxPQUFPRSxJQUFJO0lBQ1gsT0FBT0Y7QUFDVDtBQUVBOztDQUVDLEdBQ0QsU0FBU0MsaUJBQWlCRCxNQUFNO0lBQzlCZCxrRUFBZUEsR0FBR2lCLFNBQVMsQ0FBQ0g7QUFDOUI7QUFFeUMsQ0FDekMsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3Nkay5qcz8zY2JlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEN1cnJlbnRTY29wZSB9IGZyb20gJy4vY3VycmVudFNjb3Blcy5qcyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgbG9nZ2VyLCBjb25zb2xlU2FuZGJveCB9IGZyb20gJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcblxuLyoqIEEgY2xhc3Mgb2JqZWN0IHRoYXQgY2FuIGluc3RhbnRpYXRlIENsaWVudCBvYmplY3RzLiAqL1xuXG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBTREsgY2xpZW50IGluc3RhbmNlLiBUaGUgY2xpZW50IGlzXG4gKiBpbnN0YWxsZWQgYW5kIHRoZW4gYm91bmQgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogQHBhcmFtIGNsaWVudENsYXNzIFRoZSBjbGllbnQgY2xhc3MgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gaW5pdEFuZEJpbmQoXG4gIGNsaWVudENsYXNzLFxuICBvcHRpb25zLFxuKSB7XG4gIGlmIChvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgaWYgKERFQlVHX0JVSUxEKSB7XG4gICAgICBsb2dnZXIuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBgY29uc29sZS53YXJuYCByYXRoZXIgdGhhbiBgbG9nZ2VyLndhcm5gIHNpbmNlIGJ5IG5vbi1kZWJ1ZyBidW5kbGVzIGhhdmUgYWxsIGBsb2dnZXIueGAgc3RhdGVtZW50cyBzdHJpcHBlZFxuICAgICAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1tTZW50cnldIENhbm5vdCBpbml0aWFsaXplIFNESyB3aXRoIGBkZWJ1Z2Agb3B0aW9uIHVzaW5nIGEgbm9uLWRlYnVnIGJ1bmRsZS4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBzY29wZSA9IGdldEN1cnJlbnRTY29wZSgpO1xuICBzY29wZS51cGRhdGUob3B0aW9ucy5pbml0aWFsU2NvcGUpO1xuXG4gIGNvbnN0IGNsaWVudCA9IG5ldyBjbGllbnRDbGFzcyhvcHRpb25zKTtcbiAgc2V0Q3VycmVudENsaWVudChjbGllbnQpO1xuICBjbGllbnQuaW5pdCgpO1xuICByZXR1cm4gY2xpZW50O1xufVxuXG4vKipcbiAqIE1ha2UgdGhlIGdpdmVuIGNsaWVudCB0aGUgY3VycmVudCBjbGllbnQuXG4gKi9cbmZ1bmN0aW9uIHNldEN1cnJlbnRDbGllbnQoY2xpZW50KSB7XG4gIGdldEN1cnJlbnRTY29wZSgpLnNldENsaWVudChjbGllbnQpO1xufVxuXG5leHBvcnQgeyBpbml0QW5kQmluZCwgc2V0Q3VycmVudENsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldEN1cnJlbnRTY29wZSIsIkRFQlVHX0JVSUxEIiwibG9nZ2VyIiwiY29uc29sZVNhbmRib3giLCJpbml0QW5kQmluZCIsImNsaWVudENsYXNzIiwib3B0aW9ucyIsImRlYnVnIiwiZW5hYmxlIiwiY29uc29sZSIsIndhcm4iLCJzY29wZSIsInVwZGF0ZSIsImluaXRpYWxTY29wZSIsImNsaWVudCIsInNldEN1cnJlbnRDbGllbnQiLCJpbml0Iiwic2V0Q2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/semanticAttributes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/semanticAttributes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SEMANTIC_ATTRIBUTE_CACHE_HIT: () => (/* binding */ SEMANTIC_ATTRIBUTE_CACHE_HIT),\n/* harmony export */   SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE: () => (/* binding */ SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_CACHE_KEY: () => (/* binding */ SEMANTIC_ATTRIBUTE_CACHE_KEY),\n/* harmony export */   SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME: () => (/* binding */ SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME),\n/* harmony export */   SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD: () => (/* binding */ SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD),\n/* harmony export */   SEMANTIC_ATTRIBUTE_PROFILE_ID: () => (/* binding */ SEMANTIC_ATTRIBUTE_PROFILE_ID),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_OP: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_OP),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SOURCE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_URL_FULL: () => (/* binding */ SEMANTIC_ATTRIBUTE_URL_FULL)\n/* harmony export */ });\n/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */ const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = \"sentry.source\";\n/**\n * Use this attribute to represent the sample rate used for a span.\n */ const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = \"sentry.sample_rate\";\n/**\n * Use this attribute to represent the operation of a span.\n */ const SEMANTIC_ATTRIBUTE_SENTRY_OP = \"sentry.op\";\n/**\n * Use this attribute to represent the origin of a span.\n */ const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = \"sentry.origin\";\n/** The reason why an idle span finished. */ const SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = \"sentry.idle_span_finish_reason\";\n/** The unit of a measurement, which may be stored as a TimedEvent. */ const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = \"sentry.measurement_unit\";\n/** The value of a measurement, which may be stored as a TimedEvent. */ const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = \"sentry.measurement_value\";\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */ const SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = \"sentry.custom_span_name\";\n/**\n * The id of the profile that this span occurred in.\n */ const SEMANTIC_ATTRIBUTE_PROFILE_ID = \"sentry.profile_id\";\nconst SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = \"sentry.exclusive_time\";\nconst SEMANTIC_ATTRIBUTE_CACHE_HIT = \"cache.hit\";\nconst SEMANTIC_ATTRIBUTE_CACHE_KEY = \"cache.key\";\nconst SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = \"cache.item_size\";\n/** TODO: Remove these once we update to latest semantic conventions */ const SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = \"http.request.method\";\nconst SEMANTIC_ATTRIBUTE_URL_FULL = \"url.full\";\n //# sourceMappingURL=semanticAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zZW1hbnRpY0F0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLG1DQUFtQztBQUV6Qzs7Q0FFQyxHQUNELE1BQU1DLHdDQUF3QztBQUU5Qzs7Q0FFQyxHQUNELE1BQU1DLCtCQUErQjtBQUVyQzs7Q0FFQyxHQUNELE1BQU1DLG1DQUFtQztBQUV6QywwQ0FBMEMsR0FDMUMsTUFBTUMsb0RBQW9EO0FBRTFELG9FQUFvRSxHQUNwRSxNQUFNQyw2Q0FBNkM7QUFFbkQscUVBQXFFLEdBQ3JFLE1BQU1DLDhDQUE4QztBQUVwRDs7Ozs7O0NBTUMsR0FDRCxNQUFNQyw2Q0FBNkM7QUFFbkQ7O0NBRUMsR0FDRCxNQUFNQyxnQ0FBZ0M7QUFFdEMsTUFBTUMsb0NBQW9DO0FBRTFDLE1BQU1DLCtCQUErQjtBQUVyQyxNQUFNQywrQkFBK0I7QUFFckMsTUFBTUMscUNBQXFDO0FBRTNDLHFFQUFxRSxHQUNyRSxNQUFNQyx5Q0FBeUM7QUFDL0MsTUFBTUMsOEJBQThCO0FBRThnQixDQUNsakIsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3NlbWFudGljQXR0cmlidXRlcy5qcz8zN2FiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgc291cmNlIG9mIGEgc3Bhbi5cbiAqIFNob3VsZCBiZSBvbmUgb2Y6IGN1c3RvbSwgdXJsLCByb3V0ZSwgdmlldywgY29tcG9uZW50LCB0YXNrLCB1bmtub3duXG4gKlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSA9ICdzZW50cnkuc291cmNlJztcblxuLyoqXG4gKiBVc2UgdGhpcyBhdHRyaWJ1dGUgdG8gcmVwcmVzZW50IHRoZSBzYW1wbGUgcmF0ZSB1c2VkIGZvciBhIHNwYW4uXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEUgPSAnc2VudHJ5LnNhbXBsZV9yYXRlJztcblxuLyoqXG4gKiBVc2UgdGhpcyBhdHRyaWJ1dGUgdG8gcmVwcmVzZW50IHRoZSBvcGVyYXRpb24gb2YgYSBzcGFuLlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QID0gJ3NlbnRyeS5vcCc7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgb3JpZ2luIG9mIGEgc3Bhbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSAnc2VudHJ5Lm9yaWdpbic7XG5cbi8qKiBUaGUgcmVhc29uIHdoeSBhbiBpZGxlIHNwYW4gZmluaXNoZWQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OID0gJ3NlbnRyeS5pZGxlX3NwYW5fZmluaXNoX3JlYXNvbic7XG5cbi8qKiBUaGUgdW5pdCBvZiBhIG1lYXN1cmVtZW50LCB3aGljaCBtYXkgYmUgc3RvcmVkIGFzIGEgVGltZWRFdmVudC4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCA9ICdzZW50cnkubWVhc3VyZW1lbnRfdW5pdCc7XG5cbi8qKiBUaGUgdmFsdWUgb2YgYSBtZWFzdXJlbWVudCwgd2hpY2ggbWF5IGJlIHN0b3JlZCBhcyBhIFRpbWVkRXZlbnQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFID0gJ3NlbnRyeS5tZWFzdXJlbWVudF92YWx1ZSc7XG5cbi8qKlxuICogQSBjdXN0b20gc3BhbiBuYW1lIHNldCBieSB1c2VycyBndWFyYW50ZWVkIHRvIGJlIHRha2VuIG92ZXIgYW55IGF1dG9tYXRpY2FsbHlcbiAqIGluZmVycmVkIG5hbWUuIFRoaXMgYXR0cmlidXRlIGlzIHJlbW92ZWQgYmVmb3JlIHRoZSBzcGFuIGlzIHNlbnQuXG4gKlxuICogQGludGVybmFsIG9ubHkgbWVhbnQgZm9yIGludGVybmFsIFNESyB1c2FnZVxuICogQGhpZGRlblxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUgPSAnc2VudHJ5LmN1c3RvbV9zcGFuX25hbWUnO1xuXG4vKipcbiAqIFRoZSBpZCBvZiB0aGUgcHJvZmlsZSB0aGF0IHRoaXMgc3BhbiBvY2N1cnJlZCBpbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQgPSAnc2VudHJ5LnByb2ZpbGVfaWQnO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUgPSAnc2VudHJ5LmV4Y2x1c2l2ZV90aW1lJztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCA9ICdjYWNoZS5oaXQnO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZID0gJ2NhY2hlLmtleSc7XG5cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUgPSAnY2FjaGUuaXRlbV9zaXplJztcblxuLyoqIFRPRE86IFJlbW92ZSB0aGVzZSBvbmNlIHdlIHVwZGF0ZSB0byBsYXRlc3Qgc2VtYW50aWMgY29udmVudGlvbnMgKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EID0gJ2h0dHAucmVxdWVzdC5tZXRob2QnO1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMID0gJ3VybC5mdWxsJztcblxuZXhwb3J0IHsgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCwgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSwgU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FLCBTRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCwgU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQsIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRSwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTiwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklULCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFLCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURSwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UsIFNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VtYW50aWNBdHRyaWJ1dGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfSURMRV9TUEFOX0ZJTklTSF9SRUFTT04iLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FIiwiU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElUIiwiU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSIsIlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCIsIlNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/semanticAttributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/session.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/session.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeSession: () => (/* binding */ closeSession),\n/* harmony export */   makeSession: () => (/* binding */ makeSession),\n/* harmony export */   updateSession: () => (/* binding */ updateSession)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n\n\n\n\n\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */ function makeSession(context) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n    const session = {\n        sid: (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n        init: true,\n        timestamp: startingTime,\n        started: startingTime,\n        duration: 0,\n        status: \"ok\",\n        errors: 0,\n        ignoreDuration: false,\n        toJSON: ()=>sessionToJSON(session)\n    };\n    if (context) {\n        updateSession(session, context);\n    }\n    return session;\n}\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */ // eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n    if (context.user) {\n        if (!session.ipAddress && context.user.ip_address) {\n            session.ipAddress = context.user.ip_address;\n        }\n        if (!session.did && !context.did) {\n            session.did = context.user.id || context.user.email || context.user.username;\n        }\n    }\n    session.timestamp = context.timestamp || (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n    if (context.abnormal_mechanism) {\n        session.abnormal_mechanism = context.abnormal_mechanism;\n    }\n    if (context.ignoreDuration) {\n        session.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n        // Good enough uuid validation. — Kamil\n        session.sid = context.sid.length === 32 ? context.sid : (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)();\n    }\n    if (context.init !== undefined) {\n        session.init = context.init;\n    }\n    if (!session.did && context.did) {\n        session.did = `${context.did}`;\n    }\n    if (typeof context.started === \"number\") {\n        session.started = context.started;\n    }\n    if (session.ignoreDuration) {\n        session.duration = undefined;\n    } else if (typeof context.duration === \"number\") {\n        session.duration = context.duration;\n    } else {\n        const duration = session.timestamp - session.started;\n        session.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n        session.release = context.release;\n    }\n    if (context.environment) {\n        session.environment = context.environment;\n    }\n    if (!session.ipAddress && context.ipAddress) {\n        session.ipAddress = context.ipAddress;\n    }\n    if (!session.userAgent && context.userAgent) {\n        session.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === \"number\") {\n        session.errors = context.errors;\n    }\n    if (context.status) {\n        session.status = context.status;\n    }\n}\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */ function closeSession(session, status) {\n    let context = {};\n    if (status) {\n        context = {\n            status\n        };\n    } else if (session.status === \"ok\") {\n        context = {\n            status: \"exited\"\n        };\n    }\n    updateSession(session, context);\n}\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */ function sessionToJSON(session) {\n    return (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_2__.dropUndefinedKeys)({\n        sid: `${session.sid}`,\n        init: session.init,\n        // Make sure that sec is converted to ms for date constructor\n        started: new Date(session.started * 1000).toISOString(),\n        timestamp: new Date(session.timestamp * 1000).toISOString(),\n        status: session.status,\n        errors: session.errors,\n        did: typeof session.did === \"number\" || typeof session.did === \"string\" ? `${session.did}` : undefined,\n        duration: session.duration,\n        abnormal_mechanism: session.abnormal_mechanism,\n        attrs: {\n            release: session.release,\n            environment: session.environment,\n            ip_address: session.ipAddress,\n            user_agent: session.userAgent\n        }\n    });\n}\n //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   freezeDscOnSpan: () => (/* binding */ freezeDscOnSpan),\n/* harmony export */   getDynamicSamplingContextFromClient: () => (/* binding */ getDynamicSamplingContextFromClient),\n/* harmony export */   getDynamicSamplingContextFromScope: () => (/* binding */ getDynamicSamplingContextFromScope),\n/* harmony export */   getDynamicSamplingContextFromSpan: () => (/* binding */ getDynamicSamplingContextFromSpan),\n/* harmony export */   spanToBaggageHeader: () => (/* binding */ spanToBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/constants.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../semanticAttributes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/hasTracingEnabled.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n\n\n\n\n\n\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */ const FROZEN_DSC_FIELD = \"_frozenDsc\";\n/**\n * Freeze the given DSC on the given span.\n */ function freezeDscOnSpan(span, dsc) {\n    const spanWithMaybeDsc = span;\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */ function getDynamicSamplingContextFromClient(trace_id, client) {\n    const options = client.getOptions();\n    const { publicKey: public_key } = client.getDsn() || {};\n    const dsc = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        environment: options.environment || _constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ENVIRONMENT,\n        release: options.release,\n        public_key,\n        trace_id\n    });\n    client.emit(\"createDsc\", dsc);\n    return dsc;\n}\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */ function getDynamicSamplingContextFromScope(client, scope) {\n    const propagationContext = scope.getPropagationContext();\n    return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */ function getDynamicSamplingContextFromSpan(span) {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getClient)();\n    if (!client) {\n        return {};\n    }\n    const rootSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.getRootSpan)(span);\n    // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n    const frozenDsc = rootSpan[FROZEN_DSC_FIELD];\n    if (frozenDsc) {\n        return frozenDsc;\n    }\n    // For OpenTelemetry, we freeze the DSC on the trace state\n    const traceState = rootSpan.spanContext().traceState;\n    const traceStateDsc = traceState && traceState.get(\"sentry.dsc\");\n    // If the span has a DSC, we want it to take precedence\n    const dscOnTraceState = traceStateDsc && (0,_utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_4__.baggageHeaderToDynamicSamplingContext)(traceStateDsc);\n    if (dscOnTraceState) {\n        return dscOnTraceState;\n    }\n    // Else, we generate it from the span\n    const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n    const jsonSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(rootSpan);\n    const attributes = jsonSpan.data || {};\n    const maybeSampleRate = attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n    if (maybeSampleRate != null) {\n        dsc.sample_rate = `${maybeSampleRate}`;\n    }\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const source = attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    // after JSON conversion, txn.name becomes jsonSpan.description\n    const name = jsonSpan.description;\n    if (source !== \"url\" && name) {\n        dsc.transaction = name;\n    }\n    // How can we even land here with hasTracingEnabled() returning false?\n    // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n    // So we end up with an active span that is not sampled (neither positively nor negatively)\n    if ((0,_utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_6__.hasTracingEnabled)()) {\n        dsc.sampled = String((0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanIsSampled)(rootSpan));\n    }\n    client.emit(\"createDsc\", dsc, rootSpan);\n    return dsc;\n}\n/**\n * Convert a Span to a baggage header.\n */ function spanToBaggageHeader(span) {\n    const dsc = getDynamicSamplingContextFromSpan(span);\n    return (0,_utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_4__.dynamicSamplingContextToSentryBaggageHeader)(dsc);\n}\n //# sourceMappingURL=dynamicSamplingContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/tracing/spanstatus.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/spanstatus.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPAN_STATUS_ERROR: () => (/* binding */ SPAN_STATUS_ERROR),\n/* harmony export */   SPAN_STATUS_OK: () => (/* binding */ SPAN_STATUS_OK),\n/* harmony export */   SPAN_STATUS_UNSET: () => (/* binding */ SPAN_STATUS_UNSET),\n/* harmony export */   getSpanStatusFromHttpCode: () => (/* binding */ getSpanStatusFromHttpCode),\n/* harmony export */   setHttpStatus: () => (/* binding */ setHttpStatus)\n/* harmony export */ });\nconst SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */ // https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n    if (httpStatus < 400 && httpStatus >= 100) {\n        return {\n            code: SPAN_STATUS_OK\n        };\n    }\n    if (httpStatus >= 400 && httpStatus < 500) {\n        switch(httpStatus){\n            case 401:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"unauthenticated\"\n                };\n            case 403:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"permission_denied\"\n                };\n            case 404:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"not_found\"\n                };\n            case 409:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"already_exists\"\n                };\n            case 413:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"failed_precondition\"\n                };\n            case 429:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"resource_exhausted\"\n                };\n            case 499:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"cancelled\"\n                };\n            default:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"invalid_argument\"\n                };\n        }\n    }\n    if (httpStatus >= 500 && httpStatus < 600) {\n        switch(httpStatus){\n            case 501:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"unimplemented\"\n                };\n            case 503:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"unavailable\"\n                };\n            case 504:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"deadline_exceeded\"\n                };\n            default:\n                return {\n                    code: SPAN_STATUS_ERROR,\n                    message: \"internal_error\"\n                };\n        }\n    }\n    return {\n        code: SPAN_STATUS_ERROR,\n        message: \"unknown_error\"\n    };\n}\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */ function setHttpStatus(span, httpStatus) {\n    span.setAttribute(\"http.response.status_code\", httpStatus);\n    const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n    if (spanStatus.message !== \"unknown_error\") {\n        span.setStatus(spanStatus);\n    }\n}\n //# sourceMappingURL=spanstatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL3NwYW5zdGF0dXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNQSxvQkFBb0I7QUFDMUIsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLG9CQUFvQjtBQUUxQjs7Ozs7Q0FLQyxHQUNELHNEQUFzRDtBQUN0RCxTQUFTQywwQkFBMEJDLFVBQVU7SUFDM0MsSUFBSUEsYUFBYSxPQUFPQSxjQUFjLEtBQUs7UUFDekMsT0FBTztZQUFFQyxNQUFNSjtRQUFlO0lBQ2hDO0lBRUEsSUFBSUcsY0FBYyxPQUFPQSxhQUFhLEtBQUs7UUFDekMsT0FBUUE7WUFDTixLQUFLO2dCQUNILE9BQU87b0JBQUVDLE1BQU1IO29CQUFtQkksU0FBUztnQkFBa0I7WUFDL0QsS0FBSztnQkFDSCxPQUFPO29CQUFFRCxNQUFNSDtvQkFBbUJJLFNBQVM7Z0JBQW9CO1lBQ2pFLEtBQUs7Z0JBQ0gsT0FBTztvQkFBRUQsTUFBTUg7b0JBQW1CSSxTQUFTO2dCQUFZO1lBQ3pELEtBQUs7Z0JBQ0gsT0FBTztvQkFBRUQsTUFBTUg7b0JBQW1CSSxTQUFTO2dCQUFpQjtZQUM5RCxLQUFLO2dCQUNILE9BQU87b0JBQUVELE1BQU1IO29CQUFtQkksU0FBUztnQkFBc0I7WUFDbkUsS0FBSztnQkFDSCxPQUFPO29CQUFFRCxNQUFNSDtvQkFBbUJJLFNBQVM7Z0JBQXFCO1lBQ2xFLEtBQUs7Z0JBQ0gsT0FBTztvQkFBRUQsTUFBTUg7b0JBQW1CSSxTQUFTO2dCQUFZO1lBQ3pEO2dCQUNFLE9BQU87b0JBQUVELE1BQU1IO29CQUFtQkksU0FBUztnQkFBbUI7UUFDbEU7SUFDRjtJQUVBLElBQUlGLGNBQWMsT0FBT0EsYUFBYSxLQUFLO1FBQ3pDLE9BQVFBO1lBQ04sS0FBSztnQkFDSCxPQUFPO29CQUFFQyxNQUFNSDtvQkFBbUJJLFNBQVM7Z0JBQWdCO1lBQzdELEtBQUs7Z0JBQ0gsT0FBTztvQkFBRUQsTUFBTUg7b0JBQW1CSSxTQUFTO2dCQUFjO1lBQzNELEtBQUs7Z0JBQ0gsT0FBTztvQkFBRUQsTUFBTUg7b0JBQW1CSSxTQUFTO2dCQUFvQjtZQUNqRTtnQkFDRSxPQUFPO29CQUFFRCxNQUFNSDtvQkFBbUJJLFNBQVM7Z0JBQWlCO1FBQ2hFO0lBQ0Y7SUFFQSxPQUFPO1FBQUVELE1BQU1IO1FBQW1CSSxTQUFTO0lBQWdCO0FBQzdEO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0MsY0FBY0MsSUFBSSxFQUFFSixVQUFVO0lBQ3JDSSxLQUFLQyxZQUFZLENBQUMsNkJBQTZCTDtJQUUvQyxNQUFNTSxhQUFhUCwwQkFBMEJDO0lBQzdDLElBQUlNLFdBQVdKLE9BQU8sS0FBSyxpQkFBaUI7UUFDMUNFLEtBQUtHLFNBQVMsQ0FBQ0Q7SUFDakI7QUFDRjtBQUUwRyxDQUMxRyxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdHJhY2luZy9zcGFuc3RhdHVzLmpzPzM4ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU1BBTl9TVEFUVVNfVU5TRVQgPSAwO1xuY29uc3QgU1BBTl9TVEFUVVNfT0sgPSAxO1xuY29uc3QgU1BBTl9TVEFUVVNfRVJST1IgPSAyO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEgc2VudHJ5IHN0YXR1cyB3aXRoIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0gaHR0cFN0YXR1cyBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAqIEByZXR1cm5zIFRoZSBzcGFuIHN0YXR1cyBvciB1bmtub3duX2Vycm9yLlxuICovXG4vLyBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZXZlbnQtcGF5bG9hZHMvc3Bhbi9cbmZ1bmN0aW9uIGdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUoaHR0cFN0YXR1cykge1xuICBpZiAoaHR0cFN0YXR1cyA8IDQwMCAmJiBodHRwU3RhdHVzID49IDEwMCkge1xuICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX09LIH07XG4gIH1cblxuICBpZiAoaHR0cFN0YXR1cyA+PSA0MDAgJiYgaHR0cFN0YXR1cyA8IDUwMCkge1xuICAgIHN3aXRjaCAoaHR0cFN0YXR1cykge1xuICAgICAgY2FzZSA0MDE6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5hdXRoZW50aWNhdGVkJyB9O1xuICAgICAgY2FzZSA0MDM6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAncGVybWlzc2lvbl9kZW5pZWQnIH07XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdub3RfZm91bmQnIH07XG4gICAgICBjYXNlIDQwOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdhbHJlYWR5X2V4aXN0cycgfTtcbiAgICAgIGNhc2UgNDEzOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ZhaWxlZF9wcmVjb25kaXRpb24nIH07XG4gICAgICBjYXNlIDQyOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdyZXNvdXJjZV9leGhhdXN0ZWQnIH07XG4gICAgICBjYXNlIDQ5OTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdjYW5jZWxsZWQnIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludmFsaWRfYXJndW1lbnQnIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKGh0dHBTdGF0dXMgPj0gNTAwICYmIGh0dHBTdGF0dXMgPCA2MDApIHtcbiAgICBzd2l0Y2ggKGh0dHBTdGF0dXMpIHtcbiAgICAgIGNhc2UgNTAxOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3VuaW1wbGVtZW50ZWQnIH07XG4gICAgICBjYXNlIDUwMzpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmF2YWlsYWJsZScgfTtcbiAgICAgIGNhc2UgNTA0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2RlYWRsaW5lX2V4Y2VlZGVkJyB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdpbnRlcm5hbF9lcnJvcicgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3Vua25vd25fZXJyb3InIH07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgSHR0cCBzdGF0dXMgYXR0cmlidXRlcyBvbiB0aGUgY3VycmVudCBzcGFuIGJhc2VkIG9uIHRoZSBodHRwIGNvZGUuXG4gKiBBZGRpdGlvbmFsbHksIHRoZSBzcGFuJ3Mgc3RhdHVzIGlzIHVwZGF0ZWQsIGRlcGVuZGluZyBvbiB0aGUgaHR0cCBjb2RlLlxuICovXG5mdW5jdGlvbiBzZXRIdHRwU3RhdHVzKHNwYW4sIGh0dHBTdGF0dXMpIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2h0dHAucmVzcG9uc2Uuc3RhdHVzX2NvZGUnLCBodHRwU3RhdHVzKTtcblxuICBjb25zdCBzcGFuU3RhdHVzID0gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZShodHRwU3RhdHVzKTtcbiAgaWYgKHNwYW5TdGF0dXMubWVzc2FnZSAhPT0gJ3Vua25vd25fZXJyb3InKSB7XG4gICAgc3Bhbi5zZXRTdGF0dXMoc3BhblN0YXR1cyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU1BBTl9TVEFUVVNfRVJST1IsIFNQQU5fU1RBVFVTX09LLCBTUEFOX1NUQVRVU19VTlNFVCwgZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZSwgc2V0SHR0cFN0YXR1cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhbnN0YXR1cy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTUEFOX1NUQVRVU19VTlNFVCIsIlNQQU5fU1RBVFVTX09LIiwiU1BBTl9TVEFUVVNfRVJST1IiLCJnZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlIiwiaHR0cFN0YXR1cyIsImNvZGUiLCJtZXNzYWdlIiwic2V0SHR0cFN0YXR1cyIsInNwYW4iLCJzZXRBdHRyaWJ1dGUiLCJzcGFuU3RhdHVzIiwic2V0U3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/transports/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/transports/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TRANSPORT_BUFFER_SIZE: () => (/* binding */ DEFAULT_TRANSPORT_BUFFER_SIZE),\n/* harmony export */   createTransport: () => (/* binding */ createTransport)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/error.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/error.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_promisebuffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/promisebuffer.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js\");\n/* harmony import */ var _utils_hoist_ratelimit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/ratelimit.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/syncpromise.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n\n\n\n\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */ function createTransport(options, makeRequest, buffer = (0,_utils_hoist_promisebuffer_js__WEBPACK_IMPORTED_MODULE_0__.makePromiseBuffer)(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {\n    let rateLimits = {};\n    const flush = (timeout)=>buffer.drain(timeout);\n    function send(envelope) {\n        const filteredEnvelopeItems = [];\n        // Drop rate limited items from envelope\n        (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(envelope, (item, type)=>{\n            const dataCategory = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.envelopeItemTypeToDataCategory)(type);\n            if ((0,_utils_hoist_ratelimit_js__WEBPACK_IMPORTED_MODULE_2__.isRateLimited)(rateLimits, dataCategory)) {\n                const event = getEventForEnvelopeItem(item, type);\n                options.recordDroppedEvent(\"ratelimit_backoff\", dataCategory, event);\n            } else {\n                filteredEnvelopeItems.push(item);\n            }\n        });\n        // Skip sending if envelope is empty after filtering out rate limited events\n        if (filteredEnvelopeItems.length === 0) {\n            return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_3__.resolvedSyncPromise)({});\n        }\n        const filteredEnvelope = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(envelope[0], filteredEnvelopeItems);\n        // Creates client report for each item in an envelope\n        const recordEnvelopeLoss = (reason)=>{\n            (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(filteredEnvelope, (item, type)=>{\n                const event = getEventForEnvelopeItem(item, type);\n                options.recordDroppedEvent(reason, (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.envelopeItemTypeToDataCategory)(type), event);\n            });\n        };\n        const requestTask = ()=>makeRequest({\n                body: (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.serializeEnvelope)(filteredEnvelope)\n            }).then((response)=>{\n                // We don't want to throw on NOK responses, but we want to at least log them\n                if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n                }\n                rateLimits = (0,_utils_hoist_ratelimit_js__WEBPACK_IMPORTED_MODULE_2__.updateRateLimits)(rateLimits, response);\n                return response;\n            }, (error)=>{\n                recordEnvelopeLoss(\"network_error\");\n                throw error;\n            });\n        return buffer.add(requestTask).then((result)=>result, (error)=>{\n            if (error instanceof _utils_hoist_error_js__WEBPACK_IMPORTED_MODULE_6__.SentryError) {\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Skipped sending event because buffer is full.\");\n                recordEnvelopeLoss(\"queue_overflow\");\n                return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_3__.resolvedSyncPromise)({});\n            } else {\n                throw error;\n            }\n        });\n    }\n    return {\n        send,\n        flush\n    };\n}\nfunction getEventForEnvelopeItem(item, type) {\n    if (type !== \"event\" && type !== \"transaction\") {\n        return undefined;\n    }\n    return Array.isArray(item) ? item[1] : undefined;\n}\n //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFuc3BvcnRzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ29GO0FBQzlFO0FBQ0o7QUFDa0I7QUFDVTtBQUNWO0FBRXBFLE1BQU1XLGdDQUFnQztBQUV0Qzs7Ozs7Q0FLQyxHQUNELFNBQVNDLGdCQUNQQyxPQUFPLEVBQ1BDLFdBQVcsRUFDWEMsU0FBU1IsZ0ZBQWlCQSxDQUN4Qk0sUUFBUUcsVUFBVSxJQUFJTCw4QkFDdkI7SUFFRCxJQUFJTSxhQUFhLENBQUM7SUFDbEIsTUFBTUMsUUFBUSxDQUFDQyxVQUFZSixPQUFPSyxLQUFLLENBQUNEO0lBRXhDLFNBQVNFLEtBQUtDLFFBQVE7UUFDcEIsTUFBTUMsd0JBQXdCLEVBQUU7UUFFaEMsd0NBQXdDO1FBQ3hDdEIsNkVBQW1CQSxDQUFDcUIsVUFBVSxDQUFDRSxNQUFNQztZQUNuQyxNQUFNQyxlQUFleEIsd0ZBQThCQSxDQUFDdUI7WUFDcEQsSUFBSWpCLHdFQUFhQSxDQUFDUyxZQUFZUyxlQUFlO2dCQUMzQyxNQUFNQyxRQUFRQyx3QkFBd0JKLE1BQU1DO2dCQUM1Q1osUUFBUWdCLGtCQUFrQixDQUFDLHFCQUFxQkgsY0FBY0M7WUFDaEUsT0FBTztnQkFDTEosc0JBQXNCTyxJQUFJLENBQUNOO1lBQzdCO1FBQ0Y7UUFFQSw0RUFBNEU7UUFDNUUsSUFBSUQsc0JBQXNCUSxNQUFNLEtBQUssR0FBRztZQUN0QyxPQUFPckIsZ0ZBQW1CQSxDQUFDLENBQUM7UUFDOUI7UUFFQSxNQUFNc0IsbUJBQW1CN0Isd0VBQWNBLENBQUNtQixRQUFRLENBQUMsRUFBRSxFQUFFQztRQUVyRCxxREFBcUQ7UUFDckQsTUFBTVUscUJBQXFCLENBQUNDO1lBQzFCakMsNkVBQW1CQSxDQUFDK0Isa0JBQWtCLENBQUNSLE1BQU1DO2dCQUMzQyxNQUFNRSxRQUFRQyx3QkFBd0JKLE1BQU1DO2dCQUM1Q1osUUFBUWdCLGtCQUFrQixDQUFDSyxRQUFRaEMsd0ZBQThCQSxDQUFDdUIsT0FBT0U7WUFDM0U7UUFDRjtRQUVBLE1BQU1RLGNBQWMsSUFDbEJyQixZQUFZO2dCQUFFc0IsTUFBTWhDLDJFQUFpQkEsQ0FBQzRCO1lBQWtCLEdBQUdLLElBQUksQ0FDN0RDLENBQUFBO2dCQUNFLDRFQUE0RTtnQkFDNUUsSUFBSUEsU0FBU0MsVUFBVSxLQUFLQyxhQUFjRixDQUFBQSxTQUFTQyxVQUFVLEdBQUcsT0FBT0QsU0FBU0MsVUFBVSxJQUFJLEdBQUUsR0FBSTtvQkFDbEd2Qyx3REFBV0EsSUFBSU0sMERBQU1BLENBQUNtQyxJQUFJLENBQUMsQ0FBQyxrQ0FBa0MsRUFBRUgsU0FBU0MsVUFBVSxDQUFDLGVBQWUsQ0FBQztnQkFDdEc7Z0JBRUF0QixhQUFhUiwyRUFBZ0JBLENBQUNRLFlBQVlxQjtnQkFDMUMsT0FBT0E7WUFDVCxHQUNBSSxDQUFBQTtnQkFDRVQsbUJBQW1CO2dCQUNuQixNQUFNUztZQUNSO1FBR0osT0FBTzNCLE9BQU80QixHQUFHLENBQUNSLGFBQWFFLElBQUksQ0FDakNPLENBQUFBLFNBQVVBLFFBQ1ZGLENBQUFBO1lBQ0UsSUFBSUEsaUJBQWlCckMsOERBQVdBLEVBQUU7Z0JBQ2hDTCx3REFBV0EsSUFBSU0sMERBQU1BLENBQUNvQyxLQUFLLENBQUM7Z0JBQzVCVCxtQkFBbUI7Z0JBQ25CLE9BQU92QixnRkFBbUJBLENBQUMsQ0FBQztZQUM5QixPQUFPO2dCQUNMLE1BQU1nQztZQUNSO1FBQ0Y7SUFFSjtJQUVBLE9BQU87UUFDTHJCO1FBQ0FIO0lBQ0Y7QUFDRjtBQUVBLFNBQVNVLHdCQUF3QkosSUFBSSxFQUFFQyxJQUFJO0lBQ3pDLElBQUlBLFNBQVMsV0FBV0EsU0FBUyxlQUFlO1FBQzlDLE9BQU9lO0lBQ1Q7SUFFQSxPQUFPSyxNQUFNQyxPQUFPLENBQUN0QixRQUFRLElBQU8sQ0FBQyxFQUFFLEdBQUdnQjtBQUM1QztBQUUwRCxDQUMxRCxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdHJhbnNwb3J0cy9iYXNlLmpzPzgyNTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBmb3JFYWNoRW52ZWxvcGVJdGVtLCBlbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnksIGNyZWF0ZUVudmVsb3BlLCBzZXJpYWxpemVFbnZlbG9wZSB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzJztcbmltcG9ydCB7IFNlbnRyeUVycm9yIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvZXJyb3IuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcbmltcG9ydCB7IG1ha2VQcm9taXNlQnVmZmVyIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvcHJvbWlzZWJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBpc1JhdGVMaW1pdGVkLCB1cGRhdGVSYXRlTGltaXRzIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvcmF0ZWxpbWl0LmpzJztcbmltcG9ydCB7IHJlc29sdmVkU3luY1Byb21pc2UgfSBmcm9tICcuLi91dGlscy1ob2lzdC9zeW5jcHJvbWlzZS5qcyc7XG5cbmNvbnN0IERFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFID0gNjQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBhIFNlbnRyeSBgVHJhbnNwb3J0YFxuICpcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcGFyYW0gbWFrZVJlcXVlc3RcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNwb3J0KFxuICBvcHRpb25zLFxuICBtYWtlUmVxdWVzdCxcbiAgYnVmZmVyID0gbWFrZVByb21pc2VCdWZmZXIoXG4gICAgb3B0aW9ucy5idWZmZXJTaXplIHx8IERFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFLFxuICApLFxuKSB7XG4gIGxldCByYXRlTGltaXRzID0ge307XG4gIGNvbnN0IGZsdXNoID0gKHRpbWVvdXQpID0+IGJ1ZmZlci5kcmFpbih0aW1lb3V0KTtcblxuICBmdW5jdGlvbiBzZW5kKGVudmVsb3BlKSB7XG4gICAgY29uc3QgZmlsdGVyZWRFbnZlbG9wZUl0ZW1zID0gW107XG5cbiAgICAvLyBEcm9wIHJhdGUgbGltaXRlZCBpdGVtcyBmcm9tIGVudmVsb3BlXG4gICAgZm9yRWFjaEVudmVsb3BlSXRlbShlbnZlbG9wZSwgKGl0ZW0sIHR5cGUpID0+IHtcbiAgICAgIGNvbnN0IGRhdGFDYXRlZ29yeSA9IGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSh0eXBlKTtcbiAgICAgIGlmIChpc1JhdGVMaW1pdGVkKHJhdGVMaW1pdHMsIGRhdGFDYXRlZ29yeSkpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBnZXRFdmVudEZvckVudmVsb3BlSXRlbShpdGVtLCB0eXBlKTtcbiAgICAgICAgb3B0aW9ucy5yZWNvcmREcm9wcGVkRXZlbnQoJ3JhdGVsaW1pdF9iYWNrb2ZmJywgZGF0YUNhdGVnb3J5LCBldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWx0ZXJlZEVudmVsb3BlSXRlbXMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNraXAgc2VuZGluZyBpZiBlbnZlbG9wZSBpcyBlbXB0eSBhZnRlciBmaWx0ZXJpbmcgb3V0IHJhdGUgbGltaXRlZCBldmVudHNcbiAgICBpZiAoZmlsdGVyZWRFbnZlbG9wZUl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJlc29sdmVkU3luY1Byb21pc2Uoe30pO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbHRlcmVkRW52ZWxvcGUgPSBjcmVhdGVFbnZlbG9wZShlbnZlbG9wZVswXSwgZmlsdGVyZWRFbnZlbG9wZUl0ZW1zICk7XG5cbiAgICAvLyBDcmVhdGVzIGNsaWVudCByZXBvcnQgZm9yIGVhY2ggaXRlbSBpbiBhbiBlbnZlbG9wZVxuICAgIGNvbnN0IHJlY29yZEVudmVsb3BlTG9zcyA9IChyZWFzb24pID0+IHtcbiAgICAgIGZvckVhY2hFbnZlbG9wZUl0ZW0oZmlsdGVyZWRFbnZlbG9wZSwgKGl0ZW0sIHR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBnZXRFdmVudEZvckVudmVsb3BlSXRlbShpdGVtLCB0eXBlKTtcbiAgICAgICAgb3B0aW9ucy5yZWNvcmREcm9wcGVkRXZlbnQocmVhc29uLCBlbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnkodHlwZSksIGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCByZXF1ZXN0VGFzayA9ICgpID0+XG4gICAgICBtYWtlUmVxdWVzdCh7IGJvZHk6IHNlcmlhbGl6ZUVudmVsb3BlKGZpbHRlcmVkRW52ZWxvcGUpIH0pLnRoZW4oXG4gICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHRocm93IG9uIE5PSyByZXNwb25zZXMsIGJ1dCB3ZSB3YW50IHRvIGF0IGxlYXN0IGxvZyB0aGVtXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IHVuZGVmaW5lZCAmJiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA8IDIwMCB8fCByZXNwb25zZS5zdGF0dXNDb2RlID49IDMwMCkpIHtcbiAgICAgICAgICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci53YXJuKGBTZW50cnkgcmVzcG9uZGVkIHdpdGggc3RhdHVzIGNvZGUgJHtyZXNwb25zZS5zdGF0dXNDb2RlfSB0byBzZW50IGV2ZW50LmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJhdGVMaW1pdHMgPSB1cGRhdGVSYXRlTGltaXRzKHJhdGVMaW1pdHMsIHJlc3BvbnNlKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICByZWNvcmRFbnZlbG9wZUxvc3MoJ25ldHdvcmtfZXJyb3InKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICByZXR1cm4gYnVmZmVyLmFkZChyZXF1ZXN0VGFzaykudGhlbihcbiAgICAgIHJlc3VsdCA9PiByZXN1bHQsXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFNlbnRyeUVycm9yKSB7XG4gICAgICAgICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmVycm9yKCdTa2lwcGVkIHNlbmRpbmcgZXZlbnQgYmVjYXVzZSBidWZmZXIgaXMgZnVsbC4nKTtcbiAgICAgICAgICByZWNvcmRFbnZlbG9wZUxvc3MoJ3F1ZXVlX292ZXJmbG93Jyk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVkU3luY1Byb21pc2Uoe30pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNlbmQsXG4gICAgZmx1c2gsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50Rm9yRW52ZWxvcGVJdGVtKGl0ZW0sIHR5cGUpIHtcbiAgaWYgKHR5cGUgIT09ICdldmVudCcgJiYgdHlwZSAhPT0gJ3RyYW5zYWN0aW9uJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtKSA/IChpdGVtIClbMV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFLCBjcmVhdGVUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJmb3JFYWNoRW52ZWxvcGVJdGVtIiwiZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5IiwiY3JlYXRlRW52ZWxvcGUiLCJzZXJpYWxpemVFbnZlbG9wZSIsIlNlbnRyeUVycm9yIiwibG9nZ2VyIiwibWFrZVByb21pc2VCdWZmZXIiLCJpc1JhdGVMaW1pdGVkIiwidXBkYXRlUmF0ZUxpbWl0cyIsInJlc29sdmVkU3luY1Byb21pc2UiLCJERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSIsImNyZWF0ZVRyYW5zcG9ydCIsIm9wdGlvbnMiLCJtYWtlUmVxdWVzdCIsImJ1ZmZlciIsImJ1ZmZlclNpemUiLCJyYXRlTGltaXRzIiwiZmx1c2giLCJ0aW1lb3V0IiwiZHJhaW4iLCJzZW5kIiwiZW52ZWxvcGUiLCJmaWx0ZXJlZEVudmVsb3BlSXRlbXMiLCJpdGVtIiwidHlwZSIsImRhdGFDYXRlZ29yeSIsImV2ZW50IiwiZ2V0RXZlbnRGb3JFbnZlbG9wZUl0ZW0iLCJyZWNvcmREcm9wcGVkRXZlbnQiLCJwdXNoIiwibGVuZ3RoIiwiZmlsdGVyZWRFbnZlbG9wZSIsInJlY29yZEVudmVsb3BlTG9zcyIsInJlYXNvbiIsInJlcXVlc3RUYXNrIiwiYm9keSIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJ1bmRlZmluZWQiLCJ3YXJuIiwiZXJyb3IiLCJhZGQiLCJyZXN1bHQiLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/transports/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAggregateErrorsToEvent: () => (/* binding */ applyAggregateErrorsToEvent)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */ function applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, maxValueLimit = 250, key, limit, event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(hint.originalException, Error)) {\n        return;\n    }\n    // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n    const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n    // We only create exception grouping if there is an exception in the event.\n    if (originalException) {\n        event.exception.values = truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0), maxValueLimit);\n    }\n}\nfunction aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {\n    if (prevExceptions.length >= limit + 1) {\n        return prevExceptions;\n    }\n    let newExceptions = [\n        ...prevExceptions\n    ];\n    // Recursively call this function in order to walk down a chain of errors\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(error[key], Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, error[key]);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [\n            newException,\n            ...newExceptions\n        ], newException, newExceptionId);\n    }\n    // This will create exception grouping for AggregateErrors\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n    if (Array.isArray(error.errors)) {\n        error.errors.forEach((childError, i)=>{\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(childError, Error)) {\n                applyExceptionGroupFieldsForParentException(exception, exceptionId);\n                const newException = exceptionFromErrorImplementation(parser, childError);\n                const newExceptionId = newExceptions.length;\n                applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n                newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [\n                    newException,\n                    ...newExceptions\n                ], newException, newExceptionId);\n            }\n        });\n    }\n    return newExceptions;\n}\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n    // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n    exception.mechanism = exception.mechanism || {\n        type: \"generic\",\n        handled: true\n    };\n    exception.mechanism = {\n        ...exception.mechanism,\n        ...exception.type === \"AggregateError\" && {\n            is_exception_group: true\n        },\n        exception_id: exceptionId\n    };\n}\nfunction applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {\n    // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n    exception.mechanism = exception.mechanism || {\n        type: \"generic\",\n        handled: true\n    };\n    exception.mechanism = {\n        ...exception.mechanism,\n        type: \"chained\",\n        source,\n        exception_id: exceptionId,\n        parent_id: parentId\n    };\n}\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */ function truncateAggregateExceptions(exceptions, maxValueLength) {\n    return exceptions.map((exception)=>{\n        if (exception.value) {\n            exception.value = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.truncate)(exception.value, maxValueLength);\n        }\n        return exception;\n    });\n}\n //# sourceMappingURL=aggregate-errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER_NAME: () => (/* binding */ BAGGAGE_HEADER_NAME),\n/* harmony export */   MAX_BAGGAGE_STRING_LENGTH: () => (/* binding */ MAX_BAGGAGE_STRING_LENGTH),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX_REGEX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX_REGEX),\n/* harmony export */   baggageHeaderToDynamicSamplingContext: () => (/* binding */ baggageHeaderToDynamicSamplingContext),\n/* harmony export */   dynamicSamplingContextToSentryBaggageHeader: () => (/* binding */ dynamicSamplingContextToSentryBaggageHeader),\n/* harmony export */   parseBaggageHeader: () => (/* binding */ parseBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n/**\n * @deprecated Use a `\"baggage\"` string directly\n */ const BAGGAGE_HEADER_NAME = \"baggage\";\nconst SENTRY_BAGGAGE_KEY_PREFIX = \"sentry-\";\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */ const MAX_BAGGAGE_STRING_LENGTH = 8192;\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */ function baggageHeaderToDynamicSamplingContext(// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n    const baggageObject = parseBaggageHeader(baggageHeader);\n    if (!baggageObject) {\n        return undefined;\n    }\n    // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value])=>{\n        if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n            const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n            acc[nonPrefixedKey] = value;\n        }\n        return acc;\n    }, {});\n    // Only return a dynamic sampling context object if there are keys in it.\n    // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n    if (Object.keys(dynamicSamplingContext).length > 0) {\n        return dynamicSamplingContext;\n    } else {\n        return undefined;\n    }\n}\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */ function dynamicSamplingContextToSentryBaggageHeader(// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n    if (!dynamicSamplingContext) {\n        return undefined;\n    }\n    // Prefix all DSC keys with \"sentry-\" and put them into a new object\n    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue])=>{\n        if (dscValue) {\n            acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n        }\n        return acc;\n    }, {});\n    return objectToBaggageHeader(sentryPrefixedDSC);\n}\n/**\n * Take a baggage header and parse it into an object.\n */ function parseBaggageHeader(baggageHeader) {\n    if (!baggageHeader || !(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(baggageHeader) && !Array.isArray(baggageHeader)) {\n        return undefined;\n    }\n    if (Array.isArray(baggageHeader)) {\n        // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n        return baggageHeader.reduce((acc, curr)=>{\n            const currBaggageObject = baggageHeaderToObject(curr);\n            Object.entries(currBaggageObject).forEach(([key, value])=>{\n                acc[key] = value;\n            });\n            return acc;\n        }, {});\n    }\n    return baggageHeaderToObject(baggageHeader);\n}\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */ function baggageHeaderToObject(baggageHeader) {\n    return baggageHeader.split(\",\").map((baggageEntry)=>baggageEntry.split(\"=\").map((keyOrValue)=>decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value])=>{\n        if (key && value) {\n            acc[key] = value;\n        }\n        return acc;\n    }, {});\n}\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */ function objectToBaggageHeader(object) {\n    if (Object.keys(object).length === 0) {\n        // An empty baggage header is not spec compliant: We return undefined.\n        return undefined;\n    }\n    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex)=>{\n        const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n        const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n        if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n            return baggageHeader;\n        } else {\n            return newBaggageHeader;\n        }\n    }, \"\");\n}\n //# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBreadcrumbLogLevelFromHttpStatusCode: () => (/* binding */ getBreadcrumbLogLevelFromHttpStatusCode)\n/* harmony export */ });\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */ function getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {\n    // NOTE: undefined defaults to 'info' in Sentry\n    if (statusCode === undefined) {\n        return undefined;\n    } else if (statusCode >= 400 && statusCode < 500) {\n        return \"warning\";\n    } else if (statusCode >= 500) {\n        return \"error\";\n    } else {\n        return undefined;\n    }\n}\n //# sourceMappingURL=breadcrumb-log-level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9icmVhZGNydW1iLWxvZy1sZXZlbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSx3Q0FBd0NDLFVBQVU7SUFDekQsK0NBQStDO0lBQy9DLElBQUlBLGVBQWVDLFdBQVc7UUFDNUIsT0FBT0E7SUFDVCxPQUFPLElBQUlELGNBQWMsT0FBT0EsYUFBYSxLQUFLO1FBQ2hELE9BQU87SUFDVCxPQUFPLElBQUlBLGNBQWMsS0FBSztRQUM1QixPQUFPO0lBQ1QsT0FBTztRQUNMLE9BQU9DO0lBQ1Q7QUFDRjtBQUVtRCxDQUNuRCxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvYnJlYWRjcnVtYi1sb2ctbGV2ZWwuanM/YzI3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERldGVybWluZSBhIGJyZWFkY3J1bWIncyBsb2cgbGV2ZWwgKG9ubHkgYHdhcm5pbmdgIG9yIGBlcnJvcmApIGJhc2VkIG9uIGFuIEhUVFAgc3RhdHVzIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZShzdGF0dXNDb2RlKSB7XG4gIC8vIE5PVEU6IHVuZGVmaW5lZCBkZWZhdWx0cyB0byAnaW5mbycgaW4gU2VudHJ5XG4gIGlmIChzdGF0dXNDb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKHN0YXR1c0NvZGUgPj0gNDAwICYmIHN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICByZXR1cm4gJ3dhcm5pbmcnO1xuICB9IGVsc2UgaWYgKHN0YXR1c0NvZGUgPj0gNTAwKSB7XG4gICAgcmV0dXJuICdlcnJvcic7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRCcmVhZGNydW1iTG9nTGV2ZWxGcm9tSHR0cFN0YXR1c0NvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWItbG9nLWxldmVsLmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZSIsInN0YXR1c0NvZGUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComponentName: () => (/* binding */ getComponentName),\n/* harmony export */   getDomElement: () => (/* binding */ getDomElement),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\nconst WINDOW = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function htmlTreeAsString(elem, options = {}) {\n    if (!elem) {\n        return \"<unknown>\";\n    }\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out = [];\n        let height = 0;\n        let len = 0;\n        const separator = \" > \";\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n            // - the length of the string that would be created exceeds maxStringLength\n            //   (ignore this limit if we are on the first iteration)\n            if (nextStr === \"html\" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n                break;\n            }\n            out.push(nextStr);\n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function _htmlElementAsString(el, keyAttrs) {\n    const elem = el;\n    const out = [];\n    if (!elem || !elem.tagName) {\n        return \"\";\n    }\n    // @ts-expect-error WINDOW has HTMLElement\n    if (WINDOW.HTMLElement) {\n        // If using the component name annotation plugin, this value may be available on the DOM node\n        if (elem instanceof HTMLElement && elem.dataset) {\n            if (elem.dataset[\"sentryComponent\"]) {\n                return elem.dataset[\"sentryComponent\"];\n            }\n            if (elem.dataset[\"sentryElement\"]) {\n                return elem.dataset[\"sentryElement\"];\n            }\n        }\n    }\n    out.push(elem.tagName.toLowerCase());\n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[\n            keyAttr,\n            elem.getAttribute(keyAttr)\n        ]) : null;\n    if (keyAttrPairs && keyAttrPairs.length) {\n        keyAttrPairs.forEach((keyAttrPair)=>{\n            out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n        });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n        const className = elem.className;\n        if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n            const classes = className.split(/\\s+/);\n            for (const c of classes){\n                out.push(`.${c}`);\n            }\n        }\n    }\n    const allowedAttrs = [\n        \"aria-label\",\n        \"type\",\n        \"name\",\n        \"title\",\n        \"alt\"\n    ];\n    for (const k of allowedAttrs){\n        const attr = elem.getAttribute(k);\n        if (attr) {\n            out.push(`[${k}=\"${attr}\"]`);\n        }\n    }\n    return out.join(\"\");\n}\n/**\n * A safe form of location.href\n */ function getLocationHref() {\n    try {\n        return WINDOW.document.location.href;\n    } catch (oO) {\n        return \"\";\n    }\n}\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existence of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n *\n * @deprecated This method is deprecated and will be removed in the next major version.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n    if (WINDOW.document && WINDOW.document.querySelector) {\n        return WINDOW.document.querySelector(selector);\n    }\n    return null;\n}\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */ function getComponentName(elem) {\n    // @ts-expect-error WINDOW has HTMLElement\n    if (!WINDOW.HTMLElement) {\n        return null;\n    }\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    for(let i = 0; i < MAX_TRAVERSE_HEIGHT; i++){\n        if (!currentElem) {\n            return null;\n        }\n        if (currentElem instanceof HTMLElement) {\n            if (currentElem.dataset[\"sentryComponent\"]) {\n                return currentElem.dataset[\"sentryComponent\"];\n            }\n            if (currentElem.dataset[\"sentryElement\"]) {\n                return currentElem.dataset[\"sentryElement\"];\n            }\n        }\n        currentElem = currentElem.parentNode;\n    }\n    return null;\n}\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClientReportEnvelope: () => (/* binding */ createClientReportEnvelope)\n/* harmony export */ });\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./envelope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */ function createClientReportEnvelope(discarded_events, dsn, timestamp) {\n    const clientReportItem = [\n        {\n            type: \"client_report\"\n        },\n        {\n            timestamp: timestamp || (0,_time_js__WEBPACK_IMPORTED_MODULE_0__.dateTimestampInSeconds)(),\n            discarded_events\n        }\n    ];\n    return (0,_envelope_js__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(dsn ? {\n        dsn\n    } : {}, [\n        clientReportItem\n    ]);\n}\n //# sourceMappingURL=clientreport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9jbGllbnRyZXBvcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ0k7QUFFbkQ7Ozs7Q0FJQyxHQUNELFNBQVNFLDJCQUNQQyxnQkFBZ0IsRUFDaEJDLEdBQUcsRUFDSEMsU0FBUztJQUVULE1BQU1DLG1CQUFtQjtRQUN2QjtZQUFFQyxNQUFNO1FBQWdCO1FBQ3hCO1lBQ0VGLFdBQVdBLGFBQWFKLGdFQUFzQkE7WUFDOUNFO1FBQ0Y7S0FDRDtJQUNELE9BQU9ILDREQUFjQSxDQUFDSSxNQUFNO1FBQUVBO0lBQUksSUFBSSxDQUFDLEdBQUc7UUFBQ0U7S0FBaUI7QUFDOUQ7QUFFc0MsQ0FDdEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2NsaWVudHJlcG9ydC5qcz81ZjY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVudmVsb3BlIH0gZnJvbSAnLi9lbnZlbG9wZS5qcyc7XG5pbXBvcnQgeyBkYXRlVGltZXN0YW1wSW5TZWNvbmRzIH0gZnJvbSAnLi90aW1lLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGNsaWVudCByZXBvcnQgZW52ZWxvcGVcbiAqIEBwYXJhbSBkaXNjYXJkZWRfZXZlbnRzIEFuIGFycmF5IG9mIGRpc2NhcmQgZXZlbnRzXG4gKiBAcGFyYW0gZHNuIEEgRFNOIHRoYXQgY2FuIGJlIHNldCBvbiB0aGUgaGVhZGVyLiBPcHRpb25hbC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGUoXG4gIGRpc2NhcmRlZF9ldmVudHMsXG4gIGRzbixcbiAgdGltZXN0YW1wLFxuKSB7XG4gIGNvbnN0IGNsaWVudFJlcG9ydEl0ZW0gPSBbXG4gICAgeyB0eXBlOiAnY2xpZW50X3JlcG9ydCcgfSxcbiAgICB7XG4gICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCB8fCBkYXRlVGltZXN0YW1wSW5TZWNvbmRzKCksXG4gICAgICBkaXNjYXJkZWRfZXZlbnRzLFxuICAgIH0sXG4gIF07XG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShkc24gPyB7IGRzbiB9IDoge30sIFtjbGllbnRSZXBvcnRJdGVtXSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNsaWVudFJlcG9ydEVudmVsb3BlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRyZXBvcnQuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlRW52ZWxvcGUiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwiY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGUiLCJkaXNjYXJkZWRfZXZlbnRzIiwiZHNuIiwidGltZXN0YW1wIiwiY2xpZW50UmVwb3J0SXRlbSIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsT0FBT0MscUJBQXFCLGVBQWVBO0FBRXpDLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9kZWJ1Zy1idWlsZC5qcz83YmU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydCB7IERFQlVHX0JVSUxEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsIl9fU0VOVFJZX0RFQlVHX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDebugImagesForResources: () => (/* binding */ getDebugImagesForResources),\n/* harmony export */   getFilenameToDebugIdMap: () => (/* binding */ getFilenameToDebugIdMap)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n/**\n * Returns a map of filenames to debug identifiers.\n */ function getFilenameToDebugIdMap(stackParser) {\n    const debugIdMap = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryDebugIds;\n    if (!debugIdMap) {\n        return {};\n    }\n    const debugIdKeys = Object.keys(debugIdMap);\n    // If the count of registered globals hasn't changed since the last call, we\n    // can just return the cached result.\n    if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n        return cachedFilenameDebugIds;\n    }\n    lastKeysCount = debugIdKeys.length;\n    // Build a map of filename -> debug_id.\n    cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey)=>{\n        if (!parsedStackResults) {\n            parsedStackResults = {};\n        }\n        const result = parsedStackResults[stackKey];\n        if (result) {\n            acc[result[0]] = result[1];\n        } else {\n            const parsedStack = stackParser(stackKey);\n            for(let i = parsedStack.length - 1; i >= 0; i--){\n                const stackFrame = parsedStack[i];\n                const filename = stackFrame && stackFrame.filename;\n                const debugId = debugIdMap[stackKey];\n                if (filename && debugId) {\n                    acc[filename] = debugId;\n                    parsedStackResults[stackKey] = [\n                        filename,\n                        debugId\n                    ];\n                    break;\n                }\n            }\n        }\n        return acc;\n    }, {});\n    return cachedFilenameDebugIds;\n}\n/**\n * Returns a list of debug images for the given resources.\n */ function getDebugImagesForResources(stackParser, resource_paths) {\n    const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n    if (!filenameDebugIdMap) {\n        return [];\n    }\n    const images = [];\n    for (const path of resource_paths){\n        if (path && filenameDebugIdMap[path]) {\n            images.push({\n                type: \"sourcemap\",\n                code_file: path,\n                debug_id: filenameDebugIdMap[path]\n            });\n        }\n    }\n    return images;\n}\n //# sourceMappingURL=debug-ids.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9kZWJ1Zy1pZHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBRTVDLElBQUlDO0FBQ0osSUFBSUM7QUFDSixJQUFJQztBQUVKOztDQUVDLEdBQ0QsU0FBU0Msd0JBQXdCQyxXQUFXO0lBQzFDLE1BQU1DLGFBQWFOLHFEQUFVQSxDQUFDTyxlQUFlO0lBQzdDLElBQUksQ0FBQ0QsWUFBWTtRQUNmLE9BQU8sQ0FBQztJQUNWO0lBRUEsTUFBTUUsY0FBY0MsT0FBT0MsSUFBSSxDQUFDSjtJQUVoQyw0RUFBNEU7SUFDNUUscUNBQXFDO0lBQ3JDLElBQUlILDBCQUEwQkssWUFBWUcsTUFBTSxLQUFLVCxlQUFlO1FBQ2xFLE9BQU9DO0lBQ1Q7SUFFQUQsZ0JBQWdCTSxZQUFZRyxNQUFNO0lBRWxDLHVDQUF1QztJQUN2Q1IseUJBQXlCSyxZQUFZSSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0M7UUFDaEQsSUFBSSxDQUFDYixvQkFBb0I7WUFDdkJBLHFCQUFxQixDQUFDO1FBQ3hCO1FBRUEsTUFBTWMsU0FBU2Qsa0JBQWtCLENBQUNhLFNBQVM7UUFFM0MsSUFBSUMsUUFBUTtZQUNWRixHQUFHLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBR0EsTUFBTSxDQUFDLEVBQUU7UUFDNUIsT0FBTztZQUNMLE1BQU1DLGNBQWNYLFlBQVlTO1lBRWhDLElBQUssSUFBSUcsSUFBSUQsWUFBWUwsTUFBTSxHQUFHLEdBQUdNLEtBQUssR0FBR0EsSUFBSztnQkFDaEQsTUFBTUMsYUFBYUYsV0FBVyxDQUFDQyxFQUFFO2dCQUNqQyxNQUFNRSxXQUFXRCxjQUFjQSxXQUFXQyxRQUFRO2dCQUNsRCxNQUFNQyxVQUFVZCxVQUFVLENBQUNRLFNBQVM7Z0JBRXBDLElBQUlLLFlBQVlDLFNBQVM7b0JBQ3ZCUCxHQUFHLENBQUNNLFNBQVMsR0FBR0M7b0JBQ2hCbkIsa0JBQWtCLENBQUNhLFNBQVMsR0FBRzt3QkFBQ0s7d0JBQVVDO3FCQUFRO29CQUNsRDtnQkFDRjtZQUNGO1FBQ0Y7UUFFQSxPQUFPUDtJQUNULEdBQUcsQ0FBQztJQUVKLE9BQU9WO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNELFNBQVNrQiwyQkFDUGhCLFdBQVcsRUFDWGlCLGNBQWM7SUFFZCxNQUFNQyxxQkFBcUJuQix3QkFBd0JDO0lBRW5ELElBQUksQ0FBQ2tCLG9CQUFvQjtRQUN2QixPQUFPLEVBQUU7SUFDWDtJQUVBLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1DLFFBQVFILGVBQWdCO1FBQ2pDLElBQUlHLFFBQVFGLGtCQUFrQixDQUFDRSxLQUFLLEVBQUU7WUFDcENELE9BQU9FLElBQUksQ0FBQztnQkFDVkMsTUFBTTtnQkFDTkMsV0FBV0g7Z0JBQ1hJLFVBQVVOLGtCQUFrQixDQUFDRSxLQUFLO1lBQ3BDO1FBQ0Y7SUFDRjtJQUVBLE9BQU9EO0FBQ1Q7QUFFK0QsQ0FDL0QscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2RlYnVnLWlkcy5qcz9hNDRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuL3dvcmxkd2lkZS5qcyc7XG5cbmxldCBwYXJzZWRTdGFja1Jlc3VsdHM7XG5sZXQgbGFzdEtleXNDb3VudDtcbmxldCBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xuXG4vKipcbiAqIFJldHVybnMgYSBtYXAgb2YgZmlsZW5hbWVzIHRvIGRlYnVnIGlkZW50aWZpZXJzLlxuICovXG5mdW5jdGlvbiBnZXRGaWxlbmFtZVRvRGVidWdJZE1hcChzdGFja1BhcnNlcikge1xuICBjb25zdCBkZWJ1Z0lkTWFwID0gR0xPQkFMX09CSi5fc2VudHJ5RGVidWdJZHM7XG4gIGlmICghZGVidWdJZE1hcCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGRlYnVnSWRLZXlzID0gT2JqZWN0LmtleXMoZGVidWdJZE1hcCk7XG5cbiAgLy8gSWYgdGhlIGNvdW50IG9mIHJlZ2lzdGVyZWQgZ2xvYmFscyBoYXNuJ3QgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLCB3ZVxuICAvLyBjYW4ganVzdCByZXR1cm4gdGhlIGNhY2hlZCByZXN1bHQuXG4gIGlmIChjYWNoZWRGaWxlbmFtZURlYnVnSWRzICYmIGRlYnVnSWRLZXlzLmxlbmd0aCA9PT0gbGFzdEtleXNDb3VudCkge1xuICAgIHJldHVybiBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xuICB9XG5cbiAgbGFzdEtleXNDb3VudCA9IGRlYnVnSWRLZXlzLmxlbmd0aDtcblxuICAvLyBCdWlsZCBhIG1hcCBvZiBmaWxlbmFtZSAtPiBkZWJ1Z19pZC5cbiAgY2FjaGVkRmlsZW5hbWVEZWJ1Z0lkcyA9IGRlYnVnSWRLZXlzLnJlZHVjZSgoYWNjLCBzdGFja0tleSkgPT4ge1xuICAgIGlmICghcGFyc2VkU3RhY2tSZXN1bHRzKSB7XG4gICAgICBwYXJzZWRTdGFja1Jlc3VsdHMgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBwYXJzZWRTdGFja1Jlc3VsdHNbc3RhY2tLZXldO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgYWNjW3Jlc3VsdFswXV0gPSByZXN1bHRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBhcnNlZFN0YWNrID0gc3RhY2tQYXJzZXIoc3RhY2tLZXkpO1xuXG4gICAgICBmb3IgKGxldCBpID0gcGFyc2VkU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgc3RhY2tGcmFtZSA9IHBhcnNlZFN0YWNrW2ldO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHN0YWNrRnJhbWUgJiYgc3RhY2tGcmFtZS5maWxlbmFtZTtcbiAgICAgICAgY29uc3QgZGVidWdJZCA9IGRlYnVnSWRNYXBbc3RhY2tLZXldO1xuXG4gICAgICAgIGlmIChmaWxlbmFtZSAmJiBkZWJ1Z0lkKSB7XG4gICAgICAgICAgYWNjW2ZpbGVuYW1lXSA9IGRlYnVnSWQ7XG4gICAgICAgICAgcGFyc2VkU3RhY2tSZXN1bHRzW3N0YWNrS2V5XSA9IFtmaWxlbmFtZSwgZGVidWdJZF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIGNhY2hlZEZpbGVuYW1lRGVidWdJZHM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgZGVidWcgaW1hZ2VzIGZvciB0aGUgZ2l2ZW4gcmVzb3VyY2VzLlxuICovXG5mdW5jdGlvbiBnZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcyhcbiAgc3RhY2tQYXJzZXIsXG4gIHJlc291cmNlX3BhdGhzLFxuKSB7XG4gIGNvbnN0IGZpbGVuYW1lRGVidWdJZE1hcCA9IGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwKHN0YWNrUGFyc2VyKTtcblxuICBpZiAoIWZpbGVuYW1lRGVidWdJZE1hcCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGltYWdlcyA9IFtdO1xuICBmb3IgKGNvbnN0IHBhdGggb2YgcmVzb3VyY2VfcGF0aHMpIHtcbiAgICBpZiAocGF0aCAmJiBmaWxlbmFtZURlYnVnSWRNYXBbcGF0aF0pIHtcbiAgICAgIGltYWdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3NvdXJjZW1hcCcsXG4gICAgICAgIGNvZGVfZmlsZTogcGF0aCxcbiAgICAgICAgZGVidWdfaWQ6IGZpbGVuYW1lRGVidWdJZE1hcFtwYXRoXSAsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW1hZ2VzO1xufVxuXG5leHBvcnQgeyBnZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcywgZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWlkcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJHTE9CQUxfT0JKIiwicGFyc2VkU3RhY2tSZXN1bHRzIiwibGFzdEtleXNDb3VudCIsImNhY2hlZEZpbGVuYW1lRGVidWdJZHMiLCJnZXRGaWxlbmFtZVRvRGVidWdJZE1hcCIsInN0YWNrUGFyc2VyIiwiZGVidWdJZE1hcCIsIl9zZW50cnlEZWJ1Z0lkcyIsImRlYnVnSWRLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInJlZHVjZSIsImFjYyIsInN0YWNrS2V5IiwicmVzdWx0IiwicGFyc2VkU3RhY2siLCJpIiwic3RhY2tGcmFtZSIsImZpbGVuYW1lIiwiZGVidWdJZCIsImdldERlYnVnSW1hZ2VzRm9yUmVzb3VyY2VzIiwicmVzb3VyY2VfcGF0aHMiLCJmaWxlbmFtZURlYnVnSWRNYXAiLCJpbWFnZXMiLCJwYXRoIiwicHVzaCIsInR5cGUiLCJjb2RlX2ZpbGUiLCJkZWJ1Z19pZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dsnFromString: () => (/* binding */ dsnFromString),\n/* harmony export */   dsnToString: () => (/* binding */ dsnToString),\n/* harmony export */   makeDsn: () => (/* binding */ makeDsn)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n/** Regular expression used to parse a Dsn. */ const DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n    return protocol === \"http\" || protocol === \"https\";\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */ function dsnToString(dsn, withPassword = false) {\n    const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n    return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : \"\"}` + `@${host}${port ? `:${port}` : \"\"}/${path ? `${path}/` : path}${projectId}`;\n}\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */ function dsnFromString(str) {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n        // This should be logged to the console\n        (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.consoleSandbox)(()=>{\n            // eslint-disable-next-line no-console\n            console.error(`Invalid Sentry Dsn: ${str}`);\n        });\n        return undefined;\n    }\n    const [protocol, publicKey, pass = \"\", host = \"\", port = \"\", lastPath = \"\"] = match.slice(1);\n    let path = \"\";\n    let projectId = lastPath;\n    const split = projectId.split(\"/\");\n    if (split.length > 1) {\n        path = split.slice(0, -1).join(\"/\");\n        projectId = split.pop();\n    }\n    if (projectId) {\n        const projectMatch = projectId.match(/^\\d+/);\n        if (projectMatch) {\n            projectId = projectMatch[0];\n        }\n    }\n    return dsnFromComponents({\n        host,\n        pass,\n        path,\n        projectId,\n        port,\n        protocol: protocol,\n        publicKey\n    });\n}\nfunction dsnFromComponents(components) {\n    return {\n        protocol: components.protocol,\n        publicKey: components.publicKey || \"\",\n        pass: components.pass || \"\",\n        host: components.host,\n        port: components.port || \"\",\n        path: components.path || \"\",\n        projectId: components.projectId\n    };\n}\nfunction validateDsn(dsn) {\n    if (!_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        return true;\n    }\n    const { port, projectId, protocol } = dsn;\n    const requiredComponents = [\n        \"protocol\",\n        \"publicKey\",\n        \"host\",\n        \"projectId\"\n    ];\n    const hasMissingRequiredComponent = requiredComponents.find((component)=>{\n        if (!dsn[component]) {\n            _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n            return true;\n        }\n        return false;\n    });\n    if (hasMissingRequiredComponent) {\n        return false;\n    }\n    if (!projectId.match(/^\\d+$/)) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n        return false;\n    }\n    if (!isValidProtocol(protocol)) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n        return false;\n    }\n    if (port && isNaN(parseInt(port, 10))) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */ function makeDsn(from) {\n    const components = typeof from === \"string\" ? dsnFromString(from) : dsnFromComponents(from);\n    if (!components || !validateDsn(components)) {\n        return undefined;\n    }\n    return components;\n}\n //# sourceMappingURL=dsn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9kc24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDTTtBQUVyRCw0Q0FBNEMsR0FDNUMsTUFBTUcsWUFBWTtBQUVsQixTQUFTQyxnQkFBZ0JDLFFBQVE7SUFDL0IsT0FBT0EsYUFBYSxVQUFVQSxhQUFhO0FBQzdDO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLGVBQWUsS0FBSztJQUM1QyxNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsU0FBUyxFQUFFUixRQUFRLEVBQUVTLFNBQVMsRUFBRSxHQUFHUDtJQUNuRSxPQUNFLENBQUMsRUFBRUYsU0FBUyxHQUFHLEVBQUVTLFVBQVUsRUFBRU4sZ0JBQWdCRyxPQUFPLENBQUMsQ0FBQyxFQUFFQSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FDckUsQ0FBQyxDQUFDLEVBQUVGLEtBQUssRUFBRUcsT0FBTyxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUVGLE9BQU8sQ0FBQyxFQUFFQSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxLQUFLLEVBQUVHLFVBQVUsQ0FBQztBQUUvRTtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU0UsY0FBY0MsR0FBRztJQUN4QixNQUFNQyxRQUFRZCxVQUFVZSxJQUFJLENBQUNGO0lBRTdCLElBQUksQ0FBQ0MsT0FBTztRQUNWLHVDQUF1QztRQUN2Q2hCLDBEQUFjQSxDQUFDO1lBQ2Isc0NBQXNDO1lBQ3RDa0IsUUFBUUMsS0FBSyxDQUFDLENBQUMsb0JBQW9CLEVBQUVKLElBQUksQ0FBQztRQUM1QztRQUNBLE9BQU9LO0lBQ1Q7SUFFQSxNQUFNLENBQUNoQixVQUFVUyxXQUFXSCxPQUFPLEVBQUUsRUFBRUYsT0FBTyxFQUFFLEVBQUVHLE9BQU8sRUFBRSxFQUFFVSxXQUFXLEVBQUUsQ0FBQyxHQUFHTCxNQUFNTSxLQUFLLENBQUM7SUFDMUYsSUFBSWIsT0FBTztJQUNYLElBQUlHLFlBQVlTO0lBRWhCLE1BQU1FLFFBQVFYLFVBQVVXLEtBQUssQ0FBQztJQUM5QixJQUFJQSxNQUFNQyxNQUFNLEdBQUcsR0FBRztRQUNwQmYsT0FBT2MsTUFBTUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHRyxJQUFJLENBQUM7UUFDL0JiLFlBQVlXLE1BQU1HLEdBQUc7SUFDdkI7SUFFQSxJQUFJZCxXQUFXO1FBQ2IsTUFBTWUsZUFBZWYsVUFBVUksS0FBSyxDQUFDO1FBQ3JDLElBQUlXLGNBQWM7WUFDaEJmLFlBQVllLFlBQVksQ0FBQyxFQUFFO1FBQzdCO0lBQ0Y7SUFFQSxPQUFPQyxrQkFBa0I7UUFBRXBCO1FBQU1FO1FBQU1EO1FBQU1HO1FBQVdEO1FBQU1QLFVBQVVBO1FBQVdTO0lBQVU7QUFDL0Y7QUFFQSxTQUFTZSxrQkFBa0JDLFVBQVU7SUFDbkMsT0FBTztRQUNMekIsVUFBVXlCLFdBQVd6QixRQUFRO1FBQzdCUyxXQUFXZ0IsV0FBV2hCLFNBQVMsSUFBSTtRQUNuQ0gsTUFBTW1CLFdBQVduQixJQUFJLElBQUk7UUFDekJGLE1BQU1xQixXQUFXckIsSUFBSTtRQUNyQkcsTUFBTWtCLFdBQVdsQixJQUFJLElBQUk7UUFDekJGLE1BQU1vQixXQUFXcEIsSUFBSSxJQUFJO1FBQ3pCRyxXQUFXaUIsV0FBV2pCLFNBQVM7SUFDakM7QUFDRjtBQUVBLFNBQVNrQixZQUFZeEIsR0FBRztJQUN0QixJQUFJLENBQUNQLHdEQUFXQSxFQUFFO1FBQ2hCLE9BQU87SUFDVDtJQUVBLE1BQU0sRUFBRVksSUFBSSxFQUFFQyxTQUFTLEVBQUVSLFFBQVEsRUFBRSxHQUFHRTtJQUV0QyxNQUFNeUIscUJBQXFCO1FBQUM7UUFBWTtRQUFhO1FBQVE7S0FBWTtJQUN6RSxNQUFNQyw4QkFBOEJELG1CQUFtQkUsSUFBSSxDQUFDQyxDQUFBQTtRQUMxRCxJQUFJLENBQUM1QixHQUFHLENBQUM0QixVQUFVLEVBQUU7WUFDbkJqQyw4Q0FBTUEsQ0FBQ2tCLEtBQUssQ0FBQyxDQUFDLG9CQUFvQixFQUFFZSxVQUFVLFFBQVEsQ0FBQztZQUN2RCxPQUFPO1FBQ1Q7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxJQUFJRiw2QkFBNkI7UUFDL0IsT0FBTztJQUNUO0lBRUEsSUFBSSxDQUFDcEIsVUFBVUksS0FBSyxDQUFDLFVBQVU7UUFDN0JmLDhDQUFNQSxDQUFDa0IsS0FBSyxDQUFDLENBQUMsc0NBQXNDLEVBQUVQLFVBQVUsQ0FBQztRQUNqRSxPQUFPO0lBQ1Q7SUFFQSxJQUFJLENBQUNULGdCQUFnQkMsV0FBVztRQUM5QkgsOENBQU1BLENBQUNrQixLQUFLLENBQUMsQ0FBQyxxQ0FBcUMsRUFBRWYsU0FBUyxDQUFDO1FBQy9ELE9BQU87SUFDVDtJQUVBLElBQUlPLFFBQVF3QixNQUFNQyxTQUFTekIsTUFBTSxNQUFNO1FBQ3JDViw4Q0FBTUEsQ0FBQ2tCLEtBQUssQ0FBQyxDQUFDLGlDQUFpQyxFQUFFUixLQUFLLENBQUM7UUFDdkQsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBUzBCLFFBQVFDLElBQUk7SUFDbkIsTUFBTVQsYUFBYSxPQUFPUyxTQUFTLFdBQVd4QixjQUFjd0IsUUFBUVYsa0JBQWtCVTtJQUN0RixJQUFJLENBQUNULGNBQWMsQ0FBQ0MsWUFBWUQsYUFBYTtRQUMzQyxPQUFPVDtJQUNUO0lBQ0EsT0FBT1M7QUFDVDtBQUUrQyxDQUMvQywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvZHNuLmpzPzhhN2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94LCBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlci5qcyc7XG5cbi8qKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBwYXJzZSBhIERzbi4gKi9cbmNvbnN0IERTTl9SRUdFWCA9IC9eKD86KFxcdyspOilcXC9cXC8oPzooXFx3KykoPzo6KFxcdyspPyk/QCkoW1xcdy4tXSspKD86OihcXGQrKSk/XFwvKC4rKS87XG5cbmZ1bmN0aW9uIGlzVmFsaWRQcm90b2NvbChwcm90b2NvbCkge1xuICByZXR1cm4gcHJvdG9jb2wgPT09ICdodHRwJyB8fCBwcm90b2NvbCA9PT0gJ2h0dHBzJztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEc24uXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyB3aWxsIHJlbmRlciB0aGUgcHVibGljIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgdGhlIHBhc3N3b3JkXG4gKiBjb21wb25lbnQuIFRvIGdldCB0aGUgZGVwcmVjYXRlZCBwcml2YXRlIHJlcHJlc2VudGF0aW9uLCBzZXQgYHdpdGhQYXNzd29yZGBcbiAqIHRvIHRydWUuXG4gKlxuICogQHBhcmFtIHdpdGhQYXNzd29yZCBXaGVuIHNldCB0byB0cnVlLCB0aGUgcGFzc3dvcmQgd2lsbCBiZSBpbmNsdWRlZC5cbiAqL1xuZnVuY3Rpb24gZHNuVG9TdHJpbmcoZHNuLCB3aXRoUGFzc3dvcmQgPSBmYWxzZSkge1xuICBjb25zdCB7IGhvc3QsIHBhdGgsIHBhc3MsIHBvcnQsIHByb2plY3RJZCwgcHJvdG9jb2wsIHB1YmxpY0tleSB9ID0gZHNuO1xuICByZXR1cm4gKFxuICAgIGAke3Byb3RvY29sfTovLyR7cHVibGljS2V5fSR7d2l0aFBhc3N3b3JkICYmIHBhc3MgPyBgOiR7cGFzc31gIDogJyd9YCArXG4gICAgYEAke2hvc3R9JHtwb3J0ID8gYDoke3BvcnR9YCA6ICcnfS8ke3BhdGggPyBgJHtwYXRofS9gIDogcGF0aH0ke3Byb2plY3RJZH1gXG4gICk7XG59XG5cbi8qKlxuICogUGFyc2VzIGEgRHNuIGZyb20gYSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHN0ciBBIERzbiBhcyBzdHJpbmdcbiAqIEByZXR1cm5zIERzbiBhcyBEc25Db21wb25lbnRzIG9yIHVuZGVmaW5lZCBpZiBAcGFyYW0gc3RyIGlzIG5vdCBhIHZhbGlkIERTTiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZHNuRnJvbVN0cmluZyhzdHIpIHtcbiAgY29uc3QgbWF0Y2ggPSBEU05fUkVHRVguZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGVcbiAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiAke3N0cn1gKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgW3Byb3RvY29sLCBwdWJsaWNLZXksIHBhc3MgPSAnJywgaG9zdCA9ICcnLCBwb3J0ID0gJycsIGxhc3RQYXRoID0gJyddID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXRoID0gJyc7XG4gIGxldCBwcm9qZWN0SWQgPSBsYXN0UGF0aDtcblxuICBjb25zdCBzcGxpdCA9IHByb2plY3RJZC5zcGxpdCgnLycpO1xuICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgIHBhdGggPSBzcGxpdC5zbGljZSgwLCAtMSkuam9pbignLycpO1xuICAgIHByb2plY3RJZCA9IHNwbGl0LnBvcCgpIDtcbiAgfVxuXG4gIGlmIChwcm9qZWN0SWQpIHtcbiAgICBjb25zdCBwcm9qZWN0TWF0Y2ggPSBwcm9qZWN0SWQubWF0Y2goL15cXGQrLyk7XG4gICAgaWYgKHByb2plY3RNYXRjaCkge1xuICAgICAgcHJvamVjdElkID0gcHJvamVjdE1hdGNoWzBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkc25Gcm9tQ29tcG9uZW50cyh7IGhvc3QsIHBhc3MsIHBhdGgsIHByb2plY3RJZCwgcG9ydCwgcHJvdG9jb2w6IHByb3RvY29sICwgcHVibGljS2V5IH0pO1xufVxuXG5mdW5jdGlvbiBkc25Gcm9tQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIHJldHVybiB7XG4gICAgcHJvdG9jb2w6IGNvbXBvbmVudHMucHJvdG9jb2wsXG4gICAgcHVibGljS2V5OiBjb21wb25lbnRzLnB1YmxpY0tleSB8fCAnJyxcbiAgICBwYXNzOiBjb21wb25lbnRzLnBhc3MgfHwgJycsXG4gICAgaG9zdDogY29tcG9uZW50cy5ob3N0LFxuICAgIHBvcnQ6IGNvbXBvbmVudHMucG9ydCB8fCAnJyxcbiAgICBwYXRoOiBjb21wb25lbnRzLnBhdGggfHwgJycsXG4gICAgcHJvamVjdElkOiBjb21wb25lbnRzLnByb2plY3RJZCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEc24oZHNuKSB7XG4gIGlmICghREVCVUdfQlVJTEQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHsgcG9ydCwgcHJvamVjdElkLCBwcm90b2NvbCB9ID0gZHNuO1xuXG4gIGNvbnN0IHJlcXVpcmVkQ29tcG9uZW50cyA9IFsncHJvdG9jb2wnLCAncHVibGljS2V5JywgJ2hvc3QnLCAncHJvamVjdElkJ107XG4gIGNvbnN0IGhhc01pc3NpbmdSZXF1aXJlZENvbXBvbmVudCA9IHJlcXVpcmVkQ29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiB7XG4gICAgaWYgKCFkc25bY29tcG9uZW50XSkge1xuICAgICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246ICR7Y29tcG9uZW50fSBtaXNzaW5nYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICBpZiAoaGFzTWlzc2luZ1JlcXVpcmVkQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFwcm9qZWN0SWQubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcHJvamVjdElkICR7cHJvamVjdElkfWApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghaXNWYWxpZFByb3RvY29sKHByb3RvY29sKSkge1xuICAgIGxvZ2dlci5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiBJbnZhbGlkIHByb3RvY29sICR7cHJvdG9jb2x9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBvcnQgJiYgaXNOYU4ocGFyc2VJbnQocG9ydCwgMTApKSkge1xuICAgIGxvZ2dlci5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiBJbnZhbGlkIHBvcnQgJHtwb3J0fWApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB2YWxpZCBTZW50cnkgRHNuIG9iamVjdCwgaWRlbnRpZnlpbmcgYSBTZW50cnkgaW5zdGFuY2UgYW5kIHByb2plY3QuXG4gKiBAcmV0dXJucyBhIHZhbGlkIERzbkNvbXBvbmVudHMgb2JqZWN0IG9yIGB1bmRlZmluZWRgIGlmIEBwYXJhbSBmcm9tIGlzIGFuIGludmFsaWQgRFNOIHNvdXJjZVxuICovXG5mdW5jdGlvbiBtYWtlRHNuKGZyb20pIHtcbiAgY29uc3QgY29tcG9uZW50cyA9IHR5cGVvZiBmcm9tID09PSAnc3RyaW5nJyA/IGRzbkZyb21TdHJpbmcoZnJvbSkgOiBkc25Gcm9tQ29tcG9uZW50cyhmcm9tKTtcbiAgaWYgKCFjb21wb25lbnRzIHx8ICF2YWxpZGF0ZURzbihjb21wb25lbnRzKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudHM7XG59XG5cbmV4cG9ydCB7IGRzbkZyb21TdHJpbmcsIGRzblRvU3RyaW5nLCBtYWtlRHNuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kc24uanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJjb25zb2xlU2FuZGJveCIsImxvZ2dlciIsIkRTTl9SRUdFWCIsImlzVmFsaWRQcm90b2NvbCIsInByb3RvY29sIiwiZHNuVG9TdHJpbmciLCJkc24iLCJ3aXRoUGFzc3dvcmQiLCJob3N0IiwicGF0aCIsInBhc3MiLCJwb3J0IiwicHJvamVjdElkIiwicHVibGljS2V5IiwiZHNuRnJvbVN0cmluZyIsInN0ciIsIm1hdGNoIiwiZXhlYyIsImNvbnNvbGUiLCJlcnJvciIsInVuZGVmaW5lZCIsImxhc3RQYXRoIiwic2xpY2UiLCJzcGxpdCIsImxlbmd0aCIsImpvaW4iLCJwb3AiLCJwcm9qZWN0TWF0Y2giLCJkc25Gcm9tQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJ2YWxpZGF0ZURzbiIsInJlcXVpcmVkQ29tcG9uZW50cyIsImhhc01pc3NpbmdSZXF1aXJlZENvbXBvbmVudCIsImZpbmQiLCJjb21wb25lbnQiLCJpc05hTiIsInBhcnNlSW50IiwibWFrZURzbiIsImZyb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/env.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/env.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSDKSource: () => (/* binding */ getSDKSource),\n/* harmony export */   isBrowserBundle: () => (/* binding */ isBrowserBundle)\n/* harmony export */ });\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */ /**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */ function isBrowserBundle() {\n    return typeof __SENTRY_BROWSER_BUNDLE__ !== \"undefined\" && !!__SENTRY_BROWSER_BUNDLE__;\n}\n/**\n * Get source of SDK.\n */ function getSDKSource() {\n    // This comment is used to identify this line in the CDN bundle build step and replace this with \"return 'cdn';\"\n    /* __SENTRY_SDK_SOURCE__ */ return \"npm\";\n}\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBO0lBQ1AsT0FBTyxPQUFPQyw4QkFBOEIsZUFBZSxDQUFDLENBQUNBO0FBQy9EO0FBRUE7O0NBRUMsR0FDRCxTQUFTQztJQUNQLGdIQUFnSDtJQUNoSCx5QkFBeUIsR0FBRyxPQUFPO0FBQ3JDO0FBRXlDLENBQ3pDLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9lbnYuanM/NDc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGhpcyBtb2R1bGUgZXhpc3RzIGZvciBvcHRpbWl6YXRpb25zIGluIHRoZSBidWlsZCBwcm9jZXNzIHRocm91Z2ggcm9sbHVwIGFuZCB0ZXJzZXIuICBXZSBkZWZpbmUgc29tZSBnbG9iYWxcbiAqIGNvbnN0YW50cywgd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gZHVyaW5nIGJ1aWxkLiBCeSBndWFyZGluZyBjZXJ0YWluIHBpZWNlcyBvZiBjb2RlIHdpdGggZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHRoZXNlXG4gKiBjb25zdGFudHMsIHdlIGNhbiBjb250cm9sIHdoZXRoZXIgb3Igbm90IHRoZXkgYXBwZWFyIGluIHRoZSBmaW5hbCBidW5kbGUuIChBbnkgY29kZSBndWFyZGVkIGJ5IGEgZmFsc2UgY29uZGl0aW9uIHdpbGxcbiAqIG5ldmVyIHJ1biwgYW5kIHdpbGwgaGVuY2UgYmUgZHJvcHBlZCBkdXJpbmcgdHJlZXNoYWtpbmcuKSBUaGUgdHdvIHByaW1hcnkgdXNlcyBmb3IgdGhpcyBhcmUgc3RyaXBwaW5nIG91dCBjYWxscyB0b1xuICogYGxvZ2dlcmAgYW5kIHByZXZlbnRpbmcgbm9kZS1yZWxhdGVkIGNvZGUgZnJvbSBhcHBlYXJpbmcgaW4gYnJvd3NlciBidW5kbGVzLlxuICpcbiAqIEF0dGVudGlvbjpcbiAqIFRoaXMgZmlsZSBzaG91bGQgbm90IGJlIHVzZWQgdG8gZGVmaW5lIGNvbnN0YW50cy9mbGFncyB0aGF0IGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIGZvciB0cmVlLXNoYWtpbmcgY29uZHVjdGVkIGJ5XG4gKiB1c2Vycy4gVGhlc2UgZmxhZ3Mgc2hvdWxkIGxpdmUgaW4gdGhlaXIgcmVzcGVjdGl2ZSBwYWNrYWdlcywgYXMgd2UgaWRlbnRpZmllZCB1c2VyIHRvb2xpbmcgKHNwZWNpZmljYWxseSB3ZWJwYWNrKVxuICogaGF2aW5nIGlzc3VlcyB0cmVlLXNoYWtpbmcgdGhlc2UgY29uc3RhbnRzIGFjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMuXG4gKiBBbiBleGFtcGxlIGZvciB0aGlzIGlzIHRoZSBfX1NFTlRSWV9ERUJVR19fIGNvbnN0YW50LiBJdCBpcyBkZWNsYXJlZCBpbiBlYWNoIHBhY2thZ2UgaW5kaXZpZHVhbGx5IGJlY2F1c2Ugd2Ugd2FudFxuICogdXNlcnMgdG8gYmUgYWJsZSB0byBzaGFrZSBhd2F5IGV4cHJlc3Npb25zIHRoYXQgaXQgZ3VhcmRzLlxuICovXG5cbi8qKlxuICogRmlndXJlcyBvdXQgaWYgd2UncmUgYnVpbGRpbmcgYSBicm93c2VyIGJ1bmRsZS5cbiAqXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSBicm93c2VyIGJ1bmRsZSBidWlsZC5cbiAqL1xuZnVuY3Rpb24gaXNCcm93c2VyQnVuZGxlKCkge1xuICByZXR1cm4gdHlwZW9mIF9fU0VOVFJZX0JST1dTRVJfQlVORExFX18gIT09ICd1bmRlZmluZWQnICYmICEhX19TRU5UUllfQlJPV1NFUl9CVU5ETEVfXztcbn1cblxuLyoqXG4gKiBHZXQgc291cmNlIG9mIFNESy5cbiAqL1xuZnVuY3Rpb24gZ2V0U0RLU291cmNlKCkge1xuICAvLyBUaGlzIGNvbW1lbnQgaXMgdXNlZCB0byBpZGVudGlmeSB0aGlzIGxpbmUgaW4gdGhlIENETiBidW5kbGUgYnVpbGQgc3RlcCBhbmQgcmVwbGFjZSB0aGlzIHdpdGggXCJyZXR1cm4gJ2Nkbic7XCJcbiAgLyogX19TRU5UUllfU0RLX1NPVVJDRV9fICovIHJldHVybiAnbnBtJztcbn1cblxuZXhwb3J0IHsgZ2V0U0RLU291cmNlLCBpc0Jyb3dzZXJCdW5kbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXJCdW5kbGUiLCJfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fIiwiZ2V0U0RLU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addItemToEnvelope: () => (/* binding */ addItemToEnvelope),\n/* harmony export */   createAttachmentEnvelopeItem: () => (/* binding */ createAttachmentEnvelopeItem),\n/* harmony export */   createEnvelope: () => (/* binding */ createEnvelope),\n/* harmony export */   createEventEnvelopeHeaders: () => (/* binding */ createEventEnvelopeHeaders),\n/* harmony export */   createSpanEnvelopeItem: () => (/* binding */ createSpanEnvelopeItem),\n/* harmony export */   envelopeContainsItemType: () => (/* binding */ envelopeContainsItemType),\n/* harmony export */   envelopeItemTypeToDataCategory: () => (/* binding */ envelopeItemTypeToDataCategory),\n/* harmony export */   forEachEnvelopeItem: () => (/* binding */ forEachEnvelopeItem),\n/* harmony export */   getSdkMetadataForEnvelopeHeader: () => (/* binding */ getSdkMetadataForEnvelopeHeader),\n/* harmony export */   parseEnvelope: () => (/* binding */ parseEnvelope),\n/* harmony export */   serializeEnvelope: () => (/* binding */ serializeEnvelope)\n/* harmony export */ });\n/* harmony import */ var _dsn_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dsn.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */ function createEnvelope(headers, items = []) {\n    return [\n        headers,\n        items\n    ];\n}\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */ function addItemToEnvelope(envelope, newItem) {\n    const [headers, items] = envelope;\n    return [\n        headers,\n        [\n            ...items,\n            newItem\n        ]\n    ];\n}\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */ function forEachEnvelopeItem(envelope, callback) {\n    const envelopeItems = envelope[1];\n    for (const envelopeItem of envelopeItems){\n        const envelopeItemType = envelopeItem[0].type;\n        const result = callback(envelopeItem, envelopeItemType);\n        if (result) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */ function envelopeContainsItemType(envelope, types) {\n    return forEachEnvelopeItem(envelope, (_, type)=>types.includes(type));\n}\n/**\n * Encode a string to UTF8 array.\n */ function encodeUTF8(input) {\n    return _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.__SENTRY__ && _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.__SENTRY__.encodePolyfill ? _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.__SENTRY__.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n/**\n * Decode a UTF8 array to string.\n */ function decodeUTF8(input) {\n    return _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.__SENTRY__ && _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.__SENTRY__.decodePolyfill ? _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.__SENTRY__.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n/**\n * Serializes an envelope.\n */ function serializeEnvelope(envelope) {\n    const [envHeaders, items] = envelope;\n    // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n    let parts = JSON.stringify(envHeaders);\n    function append(next) {\n        if (typeof parts === \"string\") {\n            parts = typeof next === \"string\" ? parts + next : [\n                encodeUTF8(parts),\n                next\n            ];\n        } else {\n            parts.push(typeof next === \"string\" ? encodeUTF8(next) : next);\n        }\n    }\n    for (const item of items){\n        const [itemHeaders, payload] = item;\n        append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n        if (typeof payload === \"string\" || payload instanceof Uint8Array) {\n            append(payload);\n        } else {\n            let stringifiedPayload;\n            try {\n                stringifiedPayload = JSON.stringify(payload);\n            } catch (e) {\n                // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n                // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n                // performance impact but in this case a performance hit is better than throwing.\n                stringifiedPayload = JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(payload));\n            }\n            append(stringifiedPayload);\n        }\n    }\n    return typeof parts === \"string\" ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n    const totalLength = buffers.reduce((acc, buf)=>acc + buf.length, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const buffer of buffers){\n        merged.set(buffer, offset);\n        offset += buffer.length;\n    }\n    return merged;\n}\n/**\n * Parses an envelope\n */ function parseEnvelope(env) {\n    let buffer = typeof env === \"string\" ? encodeUTF8(env) : env;\n    function readBinary(length) {\n        const bin = buffer.subarray(0, length);\n        // Replace the buffer with the remaining data excluding trailing newline\n        buffer = buffer.subarray(length + 1);\n        return bin;\n    }\n    function readJson() {\n        let i = buffer.indexOf(0xa);\n        // If we couldn't find a newline, we must have found the end of the buffer\n        if (i < 0) {\n            i = buffer.length;\n        }\n        return JSON.parse(decodeUTF8(readBinary(i)));\n    }\n    const envelopeHeader = readJson();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const items = [];\n    while(buffer.length){\n        const itemHeader = readJson();\n        const binaryLength = typeof itemHeader.length === \"number\" ? itemHeader.length : undefined;\n        items.push([\n            itemHeader,\n            binaryLength ? readBinary(binaryLength) : readJson()\n        ]);\n    }\n    return [\n        envelopeHeader,\n        items\n    ];\n}\n/**\n * Creates envelope item for a single span\n */ function createSpanEnvelopeItem(spanJson) {\n    const spanHeaders = {\n        type: \"span\"\n    };\n    return [\n        spanHeaders,\n        spanJson\n    ];\n}\n/**\n * Creates attachment envelope items\n */ function createAttachmentEnvelopeItem(attachment) {\n    const buffer = typeof attachment.data === \"string\" ? encodeUTF8(attachment.data) : attachment.data;\n    return [\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.dropUndefinedKeys)({\n            type: \"attachment\",\n            length: buffer.length,\n            filename: attachment.filename,\n            content_type: attachment.contentType,\n            attachment_type: attachment.attachmentType\n        }),\n        buffer\n    ];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n    session: \"session\",\n    sessions: \"session\",\n    attachment: \"attachment\",\n    transaction: \"transaction\",\n    event: \"error\",\n    client_report: \"internal\",\n    user_report: \"default\",\n    profile: \"profile\",\n    profile_chunk: \"profile\",\n    replay_event: \"replay\",\n    replay_recording: \"replay\",\n    check_in: \"monitor\",\n    feedback: \"feedback\",\n    span: \"span\",\n    statsd: \"metric_bucket\",\n    raw_security: \"security\"\n};\n/**\n * Maps the type of an envelope item to a data category.\n */ function envelopeItemTypeToDataCategory(type) {\n    return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n/** Extracts the minimal SDK info from the metadata or an events */ function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n    if (!metadataOrEvent || !metadataOrEvent.sdk) {\n        return;\n    }\n    const { name, version } = metadataOrEvent.sdk;\n    return {\n        name,\n        version\n    };\n}\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */ function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n    const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n    return {\n        event_id: event.event_id,\n        sent_at: new Date().toISOString(),\n        ...sdkInfo && {\n            sdk: sdkInfo\n        },\n        ...!!tunnel && dsn && {\n            dsn: (0,_dsn_js__WEBPACK_IMPORTED_MODULE_3__.dsnToString)(dsn)\n        },\n        ...dynamicSamplingContext && {\n            trace: (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.dropUndefinedKeys)({\n                ...dynamicSamplingContext\n            })\n        }\n    };\n}\n //# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/error.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/error.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SentryError: () => (/* binding */ SentryError)\n/* harmony export */ });\n/** An error emitted by Sentry SDKs and related utilities. */ class SentryError extends Error {\n    constructor(message, logLevel = \"warn\"){\n        super(message);\n        this.message = message;\n        this.logLevel = logLevel;\n    }\n}\n //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkRBQTJELEdBQzNELE1BQU1BLG9CQUFvQkM7SUFFdkJDLFlBQ0VDLE9BQU8sRUFDUkMsV0FBVyxNQUFNLENBQ2pCO1FBQ0EsS0FBSyxDQUFDRDtRQUFTLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUM5QixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDbEI7QUFDRjtBQUV1QixDQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvZXJyb3IuanM/YTMzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQW4gZXJyb3IgZW1pdHRlZCBieSBTZW50cnkgU0RLcyBhbmQgcmVsYXRlZCB1dGlsaXRpZXMuICovXG5jbGFzcyBTZW50cnlFcnJvciBleHRlbmRzIEVycm9yIHtcblxuICAgY29uc3RydWN0b3IoXG4gICAgIG1lc3NhZ2UsXG4gICAgbG9nTGV2ZWwgPSAnd2FybicsXG4gICkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5sb2dMZXZlbCA9IGxvZ0xldmVsO1xuICB9XG59XG5cbmV4cG9ydCB7IFNlbnRyeUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTZW50cnlFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibG9nTGV2ZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConsoleInstrumentationHandler: () => (/* binding */ addConsoleInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\n\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addConsoleInstrumentationHandler(handler) {\n    const type = \"console\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentConsole);\n}\nfunction instrumentConsole() {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ)) {\n        return;\n    }\n    _logger_js__WEBPACK_IMPORTED_MODULE_2__.CONSOLE_LEVELS.forEach(function(level) {\n        if (!(level in _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console)) {\n            return;\n        }\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_3__.fill)(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console, level, function(originalConsoleMethod) {\n            _logger_js__WEBPACK_IMPORTED_MODULE_2__.originalConsoleMethods[level] = originalConsoleMethod;\n            return function(...args) {\n                const handlerData = {\n                    args,\n                    level\n                };\n                (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"console\", handlerData);\n                const log = _logger_js__WEBPACK_IMPORTED_MODULE_2__.originalConsoleMethods[level];\n                log && log.apply(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console, args);\n            };\n        });\n    });\n}\n //# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0U7QUFDbEM7QUFDUztBQUNnQztBQUU3RTs7Ozs7Q0FLQyxHQUNELFNBQVNPLGlDQUFpQ0MsT0FBTztJQUMvQyxNQUFNQyxPQUFPO0lBQ2JMLHdEQUFVQSxDQUFDSyxNQUFNRDtJQUNqQkgsNkRBQWVBLENBQUNJLE1BQU1DO0FBQ3hCO0FBRUEsU0FBU0E7SUFDUCxJQUFJLENBQUUsbUVBQXNCLEdBQUk7UUFDOUI7SUFDRjtJQUVBVixzREFBY0EsQ0FBQ1csT0FBTyxDQUFDLFNBQVVDLEtBQUs7UUFDcEMsSUFBSSxDQUFFQSxDQUFBQSxTQUFTVCxxREFBVUEsQ0FBQ1UsT0FBTyxHQUFHO1lBQ2xDO1FBQ0Y7UUFFQVgsZ0RBQUlBLENBQUNDLHFEQUFVQSxDQUFDVSxPQUFPLEVBQUVELE9BQU8sU0FBVUUscUJBQXFCO1lBQzdEYiw4REFBc0IsQ0FBQ1csTUFBTSxHQUFHRTtZQUVoQyxPQUFPLFNBQVUsR0FBR0MsSUFBSTtnQkFDdEIsTUFBTUMsY0FBYztvQkFBRUQ7b0JBQU1IO2dCQUFNO2dCQUNsQ04sNkRBQWVBLENBQUMsV0FBV1U7Z0JBRTNCLE1BQU1DLE1BQU1oQiw4REFBc0IsQ0FBQ1csTUFBTTtnQkFDekNLLE9BQU9BLElBQUlDLEtBQUssQ0FBQ2YscURBQVVBLENBQUNVLE9BQU8sRUFBRUU7WUFDdkM7UUFDRjtJQUNGO0FBQ0Y7QUFFNEMsQ0FDNUMsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvY29uc29sZS5qcz9iODJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENPTlNPTEVfTEVWRUxTLCBvcmlnaW5hbENvbnNvbGVNZXRob2RzIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGZpbGwgfSBmcm9tICcuLi9vYmplY3QuanMnO1xuaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4uL3dvcmxkd2lkZS5qcyc7XG5pbXBvcnQgeyBhZGRIYW5kbGVyLCBtYXliZUluc3RydW1lbnQsIHRyaWdnZXJIYW5kbGVycyB9IGZyb20gJy4vaGFuZGxlcnMuanMnO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhIGNvbnNvbGUueHh4IG1ldGhvZCBpcyBjYWxsZWQuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoaGFuZGxlcikge1xuICBjb25zdCB0eXBlID0gJ2NvbnNvbGUnO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudENvbnNvbGUpO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50Q29uc29sZSgpIHtcbiAgaWYgKCEoJ2NvbnNvbGUnIGluIEdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICBpZiAoIShsZXZlbCBpbiBHTE9CQUxfT0JKLmNvbnNvbGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmlsbChHTE9CQUxfT0JKLmNvbnNvbGUsIGxldmVsLCBmdW5jdGlvbiAob3JpZ2luYWxDb25zb2xlTWV0aG9kKSB7XG4gICAgICBvcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJEYXRhID0geyBhcmdzLCBsZXZlbCB9O1xuICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2NvbnNvbGUnLCBoYW5kbGVyRGF0YSk7XG5cbiAgICAgICAgY29uc3QgbG9nID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF07XG4gICAgICAgIGxvZyAmJiBsb2cuYXBwbHkoR0xPQkFMX09CSi5jb25zb2xlLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJDT05TT0xFX0xFVkVMUyIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZHMiLCJmaWxsIiwiR0xPQkFMX09CSiIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJ0cmlnZ2VySGFuZGxlcnMiLCJhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJ0eXBlIiwiaW5zdHJ1bWVudENvbnNvbGUiLCJmb3JFYWNoIiwibGV2ZWwiLCJjb25zb2xlIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kIiwiYXJncyIsImhhbmRsZXJEYXRhIiwibG9nIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addFetchEndInstrumentationHandler: () => (/* binding */ addFetchEndInstrumentationHandler),\n/* harmony export */   addFetchInstrumentationHandler: () => (/* binding */ addFetchInstrumentationHandler),\n/* harmony export */   parseFetchArgs: () => (/* binding */ parseFetchArgs)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _supports_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../supports.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\");\n/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\n\n\n\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addFetchInstrumentationHandler(handler, skipNativeFetchCheck) {\n    const type = \"fetch\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, ()=>instrumentFetch(undefined, skipNativeFetchCheck));\n}\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */ function addFetchEndInstrumentationHandler(handler) {\n    const type = \"fetch-body-resolved\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, ()=>instrumentFetch(streamHandler));\n}\nfunction instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {\n    if (skipNativeFetchCheck && !(0,_supports_js__WEBPACK_IMPORTED_MODULE_1__.supportsNativeFetch)()) {\n        return;\n    }\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.fill)(_worldwide_js__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_OBJ, \"fetch\", function(originalFetch) {\n        return function(...args) {\n            // We capture the error right here and not in the Promise error callback because Safari (and probably other\n            // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            const virtualError = new Error();\n            const { method, url } = parseFetchArgs(args);\n            const handlerData = {\n                args,\n                fetchData: {\n                    method,\n                    url\n                },\n                startTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n                // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n                virtualError\n            };\n            // if there is no callback, fetch is instrumented directly\n            if (!onFetchResolved) {\n                (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"fetch\", {\n                    ...handlerData\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return originalFetch.apply(_worldwide_js__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_OBJ, args).then(async (response)=>{\n                if (onFetchResolved) {\n                    onFetchResolved(response);\n                } else {\n                    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"fetch\", {\n                        ...handlerData,\n                        endTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n                        response\n                    });\n                }\n                return response;\n            }, (error)=>{\n                (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"fetch\", {\n                    ...handlerData,\n                    endTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n                    error\n                });\n                if ((0,_is_js__WEBPACK_IMPORTED_MODULE_5__.isError)(error) && error.stack === undefined) {\n                    // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n                    //       it means the error, that was caused by your fetch call did not\n                    //       have a stack trace, so the SDK backfilled the stack trace so\n                    //       you can see which fetch call failed.\n                    error.stack = virtualError.stack;\n                    (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(error, \"framesToPop\", 1);\n                }\n                // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n                //       it means the sentry.javascript SDK caught an error invoking your application code.\n                //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n                throw error;\n            });\n        };\n    });\n}\nasync function resolveResponse(res, onFinishedResolving) {\n    if (res && res.body) {\n        const body = res.body;\n        const responseReader = body.getReader();\n        // Define a maximum duration after which we just cancel\n        const maxFetchDurationTimeout = setTimeout(()=>{\n            body.cancel().then(null, ()=>{\n            // noop\n            });\n        }, 90 * 1000);\n        let readingActive = true;\n        while(readingActive){\n            let chunkTimeout;\n            try {\n                // abort reading if read op takes more than 5s\n                chunkTimeout = setTimeout(()=>{\n                    body.cancel().then(null, ()=>{\n                    // noop on error\n                    });\n                }, 5000);\n                // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n                const { done } = await responseReader.read();\n                clearTimeout(chunkTimeout);\n                if (done) {\n                    onFinishedResolving();\n                    readingActive = false;\n                }\n            } catch (error) {\n                readingActive = false;\n            } finally{\n                clearTimeout(chunkTimeout);\n            }\n        }\n        clearTimeout(maxFetchDurationTimeout);\n        responseReader.releaseLock();\n        body.cancel().then(null, ()=>{\n        // noop on error\n        });\n    }\n}\nfunction streamHandler(response) {\n    // clone response for awaiting stream\n    let clonedResponseForResolving;\n    try {\n        clonedResponseForResolving = response.clone();\n    } catch (e) {\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    resolveResponse(clonedResponseForResolving, ()=>{\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"fetch-body-resolved\", {\n            endTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n            response\n        });\n    });\n}\nfunction hasProp(obj, prop) {\n    return !!obj && typeof obj === \"object\" && !!obj[prop];\n}\nfunction getUrlFromResource(resource) {\n    if (typeof resource === \"string\") {\n        return resource;\n    }\n    if (!resource) {\n        return \"\";\n    }\n    if (hasProp(resource, \"url\")) {\n        return resource.url;\n    }\n    if (resource.toString) {\n        return resource.toString();\n    }\n    return \"\";\n}\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */ function parseFetchArgs(fetchArgs) {\n    if (fetchArgs.length === 0) {\n        return {\n            method: \"GET\",\n            url: \"\"\n        };\n    }\n    if (fetchArgs.length === 2) {\n        const [url, options] = fetchArgs;\n        return {\n            url: getUrlFromResource(url),\n            method: hasProp(options, \"method\") ? String(options.method).toUpperCase() : \"GET\"\n        };\n    }\n    const arg = fetchArgs[0];\n    return {\n        url: getUrlFromResource(arg),\n        method: hasProp(arg, \"method\") ? String(arg.method).toUpperCase() : \"GET\"\n    };\n}\n //# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalErrorInstrumentationHandler: () => (/* binding */ addGlobalErrorInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\nlet _oldOnErrorHandler = null;\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addGlobalErrorInstrumentationHandler(handler) {\n    const type = \"error\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentError);\n}\nfunction instrumentError() {\n    _oldOnErrorHandler = _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror;\n    // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n    // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror = function(msg, url, line, column, error) {\n        const handlerData = {\n            column,\n            error,\n            line,\n            msg,\n            url\n        };\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"error\", handlerData);\n        if (_oldOnErrorHandler) {\n            // eslint-disable-next-line prefer-rest-params\n            return _oldOnErrorHandler.apply(this, arguments);\n        }\n        return false;\n    };\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n //# sourceMappingURL=globalError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNnQztBQUU3RSxJQUFJSSxxQkFBcUI7QUFFekI7Ozs7O0NBS0MsR0FDRCxTQUFTQyxxQ0FBcUNDLE9BQU87SUFDbkQsTUFBTUMsT0FBTztJQUNiTix3REFBVUEsQ0FBQ00sTUFBTUQ7SUFDakJKLDZEQUFlQSxDQUFDSyxNQUFNQztBQUN4QjtBQUVBLFNBQVNBO0lBQ1BKLHFCQUFxQkoscURBQVVBLENBQUNTLE9BQU87SUFFdkMsMkZBQTJGO0lBQzNGLGlHQUFpRztJQUNqR1QscURBQVVBLENBQUNTLE9BQU8sR0FBRyxTQUNuQkMsR0FBRyxFQUNIQyxHQUFHLEVBQ0hDLElBQUksRUFDSkMsTUFBTSxFQUNOQyxLQUFLO1FBRUwsTUFBTUMsY0FBYztZQUNsQkY7WUFDQUM7WUFDQUY7WUFDQUY7WUFDQUM7UUFDRjtRQUNBUiw2REFBZUEsQ0FBQyxTQUFTWTtRQUV6QixJQUFJWCxvQkFBb0I7WUFDdEIsOENBQThDO1lBQzlDLE9BQU9BLG1CQUFtQlksS0FBSyxDQUFDLElBQUksRUFBRUM7UUFDeEM7UUFFQSxPQUFPO0lBQ1Q7SUFFQWpCLHFEQUFVQSxDQUFDUyxPQUFPLENBQUNTLHVCQUF1QixHQUFHO0FBQy9DO0FBRWdELENBQ2hELHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzP2EyOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4uL3dvcmxkd2lkZS5qcyc7XG5pbXBvcnQgeyBhZGRIYW5kbGVyLCBtYXliZUluc3RydW1lbnQsIHRyaWdnZXJIYW5kbGVycyB9IGZyb20gJy4vaGFuZGxlcnMuanMnO1xuXG5sZXQgX29sZE9uRXJyb3JIYW5kbGVyID0gbnVsbDtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYW4gZXJyb3IgaXMgY2FwdHVyZWQgYnkgdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gIGNvbnN0IHR5cGUgPSAnZXJyb3InO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEVycm9yKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudEVycm9yKCkge1xuICBfb2xkT25FcnJvckhhbmRsZXIgPSBHTE9CQUxfT0JKLm9uZXJyb3I7XG5cbiAgLy8gTm90ZTogVGhlIHJlYXNvbiB3ZSBhcmUgZG9pbmcgd2luZG93Lm9uZXJyb3IgaW5zdGVhZCBvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InKVxuICAvLyBpcyB0aGF0IHdlIGFyZSB1c2luZyB0aGlzIGhhbmRsZXIgaW4gdGhlIExvYWRlciBTY3JpcHQsIHRvIGhhbmRsZSBidWZmZXJlZCBlcnJvcnMgY29uc2lzdGVudGx5XG4gIEdMT0JBTF9PQkoub25lcnJvciA9IGZ1bmN0aW9uIChcbiAgICBtc2csXG4gICAgdXJsLFxuICAgIGxpbmUsXG4gICAgY29sdW1uLFxuICAgIGVycm9yLFxuICApIHtcbiAgICBjb25zdCBoYW5kbGVyRGF0YSA9IHtcbiAgICAgIGNvbHVtbixcbiAgICAgIGVycm9yLFxuICAgICAgbGluZSxcbiAgICAgIG1zZyxcbiAgICAgIHVybCxcbiAgICB9O1xuICAgIHRyaWdnZXJIYW5kbGVycygnZXJyb3InLCBoYW5kbGVyRGF0YSk7XG5cbiAgICBpZiAoX29sZE9uRXJyb3JIYW5kbGVyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICByZXR1cm4gX29sZE9uRXJyb3JIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEdMT0JBTF9PQkoub25lcnJvci5fX1NFTlRSWV9JTlNUUlVNRU5URURfXyA9IHRydWU7XG59XG5cbmV4cG9ydCB7IGFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsRXJyb3IuanMubWFwXG4iXSwibmFtZXMiOlsiR0xPQkFMX09CSiIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJ0cmlnZ2VySGFuZGxlcnMiLCJfb2xkT25FcnJvckhhbmRsZXIiLCJhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJoYW5kbGVyIiwidHlwZSIsImluc3RydW1lbnRFcnJvciIsIm9uZXJyb3IiLCJtc2ciLCJ1cmwiLCJsaW5lIiwiY29sdW1uIiwiZXJyb3IiLCJoYW5kbGVyRGF0YSIsImFwcGx5IiwiYXJndW1lbnRzIiwiX19TRU5UUllfSU5TVFJVTUVOVEVEX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalUnhandledRejectionInstrumentationHandler: () => (/* binding */ addGlobalUnhandledRejectionInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\nlet _oldOnUnhandledRejectionHandler = null;\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addGlobalUnhandledRejectionInstrumentationHandler(handler) {\n    const type = \"unhandledrejection\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentUnhandledRejection);\n}\nfunction instrumentUnhandledRejection() {\n    _oldOnUnhandledRejectionHandler = _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection;\n    // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n    // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection = function(e) {\n        const handlerData = e;\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"unhandledrejection\", handlerData);\n        if (_oldOnUnhandledRejectionHandler) {\n            // eslint-disable-next-line prefer-rest-params\n            return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n        return true;\n    };\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n //# sourceMappingURL=globalUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDZ0M7QUFFN0UsSUFBSUksa0NBQWtDO0FBRXRDOzs7OztDQUtDLEdBQ0QsU0FBU0Msa0RBQ1BDLE9BQU87SUFFUCxNQUFNQyxPQUFPO0lBQ2JOLHdEQUFVQSxDQUFDTSxNQUFNRDtJQUNqQkosNkRBQWVBLENBQUNLLE1BQU1DO0FBQ3hCO0FBRUEsU0FBU0E7SUFDUEosa0NBQWtDSixxREFBVUEsQ0FBQ1Msb0JBQW9CO0lBRWpFLHFIQUFxSDtJQUNySCxxR0FBcUc7SUFDckdULHFEQUFVQSxDQUFDUyxvQkFBb0IsR0FBRyxTQUFVQyxDQUFDO1FBQzNDLE1BQU1DLGNBQWNEO1FBQ3BCUCw2REFBZUEsQ0FBQyxzQkFBc0JRO1FBRXRDLElBQUlQLGlDQUFpQztZQUNuQyw4Q0FBOEM7WUFDOUMsT0FBT0EsZ0NBQWdDUSxLQUFLLENBQUMsSUFBSSxFQUFFQztRQUNyRDtRQUVBLE9BQU87SUFDVDtJQUVBYixxREFBVUEsQ0FBQ1Msb0JBQW9CLENBQUNLLHVCQUF1QixHQUFHO0FBQzVEO0FBRTZELENBQzdELG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcz9iZmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuLi93b3JsZHdpZGUuanMnO1xuaW1wb3J0IHsgYWRkSGFuZGxlciwgbWF5YmVJbnN0cnVtZW50LCB0cmlnZ2VySGFuZGxlcnMgfSBmcm9tICcuL2hhbmRsZXJzLmpzJztcblxubGV0IF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhbiB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24gaXMgY2FwdHVyZWQuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihcbiAgaGFuZGxlcixcbikge1xuICBjb25zdCB0eXBlID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG4gIGFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIG1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbigpIHtcbiAgX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IEdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb247XG5cbiAgLy8gTm90ZTogVGhlIHJlYXNvbiB3ZSBhcmUgZG9pbmcgd2luZG93Lm9udW5oYW5kbGVkcmVqZWN0aW9uIGluc3RlYWQgb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicpXG4gIC8vIGlzIHRoYXQgd2UgYXJlIHVzaW5nIHRoaXMgaGFuZGxlciBpbiB0aGUgTG9hZGVyIFNjcmlwdCwgdG8gaGFuZGxlIGJ1ZmZlcmVkIHJlamVjdGlvbnMgY29uc2lzdGVudGx5XG4gIEdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0gZTtcbiAgICB0cmlnZ2VySGFuZGxlcnMoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGhhbmRsZXJEYXRhKTtcblxuICAgIGlmIChfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICByZXR1cm4gX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb24uX19TRU5UUllfSU5TVFJVTUVOVEVEX18gPSB0cnVlO1xufVxuXG5leHBvcnQgeyBhZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMubWFwXG4iXSwibmFtZXMiOlsiR0xPQkFMX09CSiIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJ0cmlnZ2VySGFuZGxlcnMiLCJfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwiYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJ0eXBlIiwiaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbiIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwiZSIsImhhbmRsZXJEYXRhIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfX1NFTlRSWV9JTlNUUlVNRU5URURfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHandler: () => (/* binding */ addHandler),\n/* harmony export */   maybeInstrument: () => (/* binding */ maybeInstrument),\n/* harmony export */   resetInstrumentationHandlers: () => (/* binding */ resetInstrumentationHandlers),\n/* harmony export */   triggerHandlers: () => (/* binding */ triggerHandlers)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stacktrace.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n/** Add a handler function. */ function addHandler(type, handler) {\n    handlers[type] = handlers[type] || [];\n    handlers[type].push(handler);\n}\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */ function resetInstrumentationHandlers() {\n    Object.keys(handlers).forEach((key)=>{\n        handlers[key] = undefined;\n    });\n}\n/** Maybe run an instrumentation function, unless it was already called. */ function maybeInstrument(type, instrumentFn) {\n    if (!instrumented[type]) {\n        instrumented[type] = true;\n        try {\n            instrumentFn();\n        } catch (e) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error while instrumenting ${type}`, e);\n        }\n    }\n}\n/** Trigger handlers for a given instrumentation type. */ function triggerHandlers(type, data) {\n    const typeHandlers = type && handlers[type];\n    if (!typeHandlers) {\n        return;\n    }\n    for (const handler of typeHandlers){\n        try {\n            handler(data);\n        } catch (e) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(handler)}\\nError:`, e);\n        }\n    }\n}\n //# sourceMappingURL=handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2hhbmRsZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDVjtBQUNhO0FBRW5ELGdDQUFnQztBQUNoQyxNQUFNRyxXQUFXLENBQUM7QUFDbEIsTUFBTUMsZUFBZSxDQUFDO0FBRXRCLDRCQUE0QixHQUM1QixTQUFTQyxXQUFXQyxJQUFJLEVBQUVDLE9BQU87SUFDL0JKLFFBQVEsQ0FBQ0csS0FBSyxHQUFHSCxRQUFRLENBQUNHLEtBQUssSUFBSSxFQUFFO0lBQ3BDSCxRQUFRLENBQUNHLEtBQUssQ0FBR0UsSUFBSSxDQUFDRDtBQUN6QjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNFO0lBQ1BDLE9BQU9DLElBQUksQ0FBQ1IsVUFBVVMsT0FBTyxDQUFDQyxDQUFBQTtRQUM1QlYsUUFBUSxDQUFDVSxJQUFLLEdBQUdDO0lBQ25CO0FBQ0Y7QUFFQSx5RUFBeUUsR0FDekUsU0FBU0MsZ0JBQWdCVCxJQUFJLEVBQUVVLFlBQVk7SUFDekMsSUFBSSxDQUFDWixZQUFZLENBQUNFLEtBQUssRUFBRTtRQUN2QkYsWUFBWSxDQUFDRSxLQUFLLEdBQUc7UUFDckIsSUFBSTtZQUNGVTtRQUNGLEVBQUUsT0FBT0MsR0FBRztZQUNWakIsd0RBQVdBLElBQUlDLDhDQUFNQSxDQUFDaUIsS0FBSyxDQUFDLENBQUMsMEJBQTBCLEVBQUVaLEtBQUssQ0FBQyxFQUFFVztRQUNuRTtJQUNGO0FBQ0Y7QUFFQSx1REFBdUQsR0FDdkQsU0FBU0UsZ0JBQWdCYixJQUFJLEVBQUVjLElBQUk7SUFDakMsTUFBTUMsZUFBZWYsUUFBUUgsUUFBUSxDQUFDRyxLQUFLO0lBQzNDLElBQUksQ0FBQ2UsY0FBYztRQUNqQjtJQUNGO0lBRUEsS0FBSyxNQUFNZCxXQUFXYyxhQUFjO1FBQ2xDLElBQUk7WUFDRmQsUUFBUWE7UUFDVixFQUFFLE9BQU9ILEdBQUc7WUFDVmpCLHdEQUFXQSxJQUNUQyw4Q0FBTUEsQ0FBQ2lCLEtBQUssQ0FDVixDQUFDLHVEQUF1RCxFQUFFWixLQUFLLFFBQVEsRUFBRUosK0RBQWVBLENBQUNLLFNBQVMsUUFBUSxDQUFDLEVBQzNHVTtRQUVOO0lBQ0Y7QUFDRjtBQUVzRixDQUN0RixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9oYW5kbGVycy5qcz9lNDEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGdldEZ1bmN0aW9uTmFtZSB9IGZyb20gJy4uL3N0YWNrdHJhY2UuanMnO1xuXG4vLyBXZSBrZWVwIHRoZSBoYW5kbGVycyBnbG9iYWxseVxuY29uc3QgaGFuZGxlcnMgPSB7fTtcbmNvbnN0IGluc3RydW1lbnRlZCA9IHt9O1xuXG4vKiogQWRkIGEgaGFuZGxlciBmdW5jdGlvbi4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcikge1xuICBoYW5kbGVyc1t0eXBlXSA9IGhhbmRsZXJzW3R5cGVdIHx8IFtdO1xuICAoaGFuZGxlcnNbdHlwZV0gKS5wdXNoKGhhbmRsZXIpO1xufVxuXG4vKipcbiAqIFJlc2V0IGFsbCBpbnN0cnVtZW50YXRpb24gaGFuZGxlcnMuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGJ5IHRlc3RzIHRvIGVuc3VyZSB3ZSBoYXZlIGEgY2xlYW4gc2xhdGUgb2YgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXJzLlxuICovXG5mdW5jdGlvbiByZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzKCkge1xuICBPYmplY3Qua2V5cyhoYW5kbGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGhhbmRsZXJzW2tleSBdID0gdW5kZWZpbmVkO1xuICB9KTtcbn1cblxuLyoqIE1heWJlIHJ1biBhbiBpbnN0cnVtZW50YXRpb24gZnVuY3Rpb24sIHVubGVzcyBpdCB3YXMgYWxyZWFkeSBjYWxsZWQuICovXG5mdW5jdGlvbiBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEZuKSB7XG4gIGlmICghaW5zdHJ1bWVudGVkW3R5cGVdKSB7XG4gICAgaW5zdHJ1bWVudGVkW3R5cGVdID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgaW5zdHJ1bWVudEZuKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmVycm9yKGBFcnJvciB3aGlsZSBpbnN0cnVtZW50aW5nICR7dHlwZX1gLCBlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqIFRyaWdnZXIgaGFuZGxlcnMgZm9yIGEgZ2l2ZW4gaW5zdHJ1bWVudGF0aW9uIHR5cGUuICovXG5mdW5jdGlvbiB0cmlnZ2VySGFuZGxlcnModHlwZSwgZGF0YSkge1xuICBjb25zdCB0eXBlSGFuZGxlcnMgPSB0eXBlICYmIGhhbmRsZXJzW3R5cGVdO1xuICBpZiAoIXR5cGVIYW5kbGVycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoY29uc3QgaGFuZGxlciBvZiB0eXBlSGFuZGxlcnMpIHtcbiAgICB0cnkge1xuICAgICAgaGFuZGxlcihkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBERUJVR19CVUlMRCAmJlxuICAgICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgICAgYEVycm9yIHdoaWxlIHRyaWdnZXJpbmcgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIuXFxuVHlwZTogJHt0eXBlfVxcbk5hbWU6ICR7Z2V0RnVuY3Rpb25OYW1lKGhhbmRsZXIpfVxcbkVycm9yOmAsXG4gICAgICAgICAgZSxcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgYWRkSGFuZGxlciwgbWF5YmVJbnN0cnVtZW50LCByZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzLCB0cmlnZ2VySGFuZGxlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwibG9nZ2VyIiwiZ2V0RnVuY3Rpb25OYW1lIiwiaGFuZGxlcnMiLCJpbnN0cnVtZW50ZWQiLCJhZGRIYW5kbGVyIiwidHlwZSIsImhhbmRsZXIiLCJwdXNoIiwicmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidW5kZWZpbmVkIiwibWF5YmVJbnN0cnVtZW50IiwiaW5zdHJ1bWVudEZuIiwiZSIsImVycm9yIiwidHJpZ2dlckhhbmRsZXJzIiwiZGF0YSIsInR5cGVIYW5kbGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/is.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isParameterizedString: () => (/* binding */ isParameterizedString),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isError(wat) {\n    switch(objectToString.call(wat)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n        case \"[object WebAssembly.Exception]\":\n            return true;\n        default:\n            return isInstanceOf(wat, Error);\n    }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */ function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isErrorEvent(wat) {\n    return isBuiltin(wat, \"ErrorEvent\");\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMError(wat) {\n    return isBuiltin(wat, \"DOMError\");\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMException(wat) {\n    return isBuiltin(wat, \"DOMException\");\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isString(wat) {\n    return isBuiltin(wat, \"String\");\n}\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isParameterizedString(wat) {\n    return typeof wat === \"object\" && wat !== null && \"__sentry_template_string__\" in wat && \"__sentry_template_values__\" in wat;\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPrimitive(wat) {\n    return wat === null || isParameterizedString(wat) || typeof wat !== \"object\" && typeof wat !== \"function\";\n}\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPlainObject(wat) {\n    return isBuiltin(wat, \"Object\");\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isEvent(wat) {\n    return typeof Event !== \"undefined\" && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isElement(wat) {\n    return typeof Element !== \"undefined\" && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isRegExp(wat) {\n    return isBuiltin(wat, \"RegExp\");\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */ function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === \"function\");\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && \"nativeEvent\" in wat && \"preventDefault\" in wat && \"stopPropagation\" in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */ function isInstanceOf(wat, base) {\n    try {\n        return wat instanceof base;\n    } catch (_e) {\n        return false;\n    }\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === \"object\" && wat !== null && (wat.__isVue || wat._isVue));\n}\n //# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n/** Prefix for logging strings */ const PREFIX = \"Sentry Logger \";\nconst CONSOLE_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"log\",\n    \"assert\",\n    \"trace\"\n];\n/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};\n/** JSDoc */ /**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */ function consoleSandbox(callback) {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n        return callback();\n    }\n    const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console;\n    const wrappedFuncs = {};\n    const wrappedLevels = Object.keys(originalConsoleMethods);\n    // Restore all wrapped console methods\n    wrappedLevels.forEach((level)=>{\n        const originalConsoleMethod = originalConsoleMethods[level];\n        wrappedFuncs[level] = console[level];\n        console[level] = originalConsoleMethod;\n    });\n    try {\n        return callback();\n    } finally{\n        // Revert restoration to wrapped state\n        wrappedLevels.forEach((level)=>{\n            console[level] = wrappedFuncs[level];\n        });\n    }\n}\nfunction makeLogger() {\n    let enabled = false;\n    const logger = {\n        enable: ()=>{\n            enabled = true;\n        },\n        disable: ()=>{\n            enabled = false;\n        },\n        isEnabled: ()=>enabled\n    };\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = (...args)=>{\n                if (enabled) {\n                    consoleSandbox(()=>{\n                        _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n                    });\n                }\n            };\n        });\n    } else {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = ()=>undefined;\n        });\n    }\n    return logger;\n}\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */ const logger = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)(\"logger\", makeLogger);\n //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9sb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQ2lCO0FBRWhFLCtCQUErQixHQUMvQixNQUFNRyxTQUFTO0FBRWYsTUFBTUMsaUJBQWlCO0lBQ3JCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCx3REFBd0QsR0FDeEQsTUFBTUMseUJBRUgsQ0FBQztBQUVKLFVBQVUsR0FFVjs7Ozs7Q0FLQyxHQUNELFNBQVNDLGVBQWVDLFFBQVE7SUFDOUIsSUFBSSxDQUFFLG1FQUFzQixHQUFJO1FBQzlCLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNQyxVQUFVTixxREFBVUEsQ0FBQ00sT0FBTztJQUNsQyxNQUFNQyxlQUFlLENBQUM7SUFFdEIsTUFBTUMsZ0JBQWdCQyxPQUFPQyxJQUFJLENBQUNQO0lBRWxDLHNDQUFzQztJQUN0Q0ssY0FBY0csT0FBTyxDQUFDQyxDQUFBQTtRQUNwQixNQUFNQyx3QkFBd0JWLHNCQUFzQixDQUFDUyxNQUFNO1FBQzNETCxZQUFZLENBQUNLLE1BQU0sR0FBR04sT0FBTyxDQUFDTSxNQUFNO1FBQ3BDTixPQUFPLENBQUNNLE1BQU0sR0FBR0M7SUFDbkI7SUFFQSxJQUFJO1FBQ0YsT0FBT1I7SUFDVCxTQUFVO1FBQ1Isc0NBQXNDO1FBQ3RDRyxjQUFjRyxPQUFPLENBQUNDLENBQUFBO1lBQ3BCTixPQUFPLENBQUNNLE1BQU0sR0FBR0wsWUFBWSxDQUFDSyxNQUFNO1FBQ3RDO0lBQ0Y7QUFDRjtBQUVBLFNBQVNFO0lBQ1AsSUFBSUMsVUFBVTtJQUNkLE1BQU1DLFNBQVM7UUFDYkMsUUFBUTtZQUNORixVQUFVO1FBQ1o7UUFDQUcsU0FBUztZQUNQSCxVQUFVO1FBQ1o7UUFDQUksV0FBVyxJQUFNSjtJQUNuQjtJQUVBLElBQUlqQix3REFBV0EsRUFBRTtRQUNmSSxlQUFlUyxPQUFPLENBQUNTLENBQUFBO1lBQ3JCSixNQUFNLENBQUNJLEtBQUssR0FBRyxDQUFDLEdBQUdDO2dCQUNqQixJQUFJTixTQUFTO29CQUNYWCxlQUFlO3dCQUNiSixxREFBVUEsQ0FBQ00sT0FBTyxDQUFDYyxLQUFLLENBQUMsQ0FBQyxFQUFFbkIsT0FBTyxDQUFDLEVBQUVtQixLQUFLLEVBQUUsQ0FBQyxLQUFLQztvQkFDckQ7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0YsT0FBTztRQUNMbkIsZUFBZVMsT0FBTyxDQUFDUyxDQUFBQTtZQUNyQkosTUFBTSxDQUFDSSxLQUFLLEdBQUcsSUFBTUU7UUFDdkI7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxNQUFNQSxTQUFTakIsaUVBQWtCQSxDQUFDLFVBQVVlO0FBRThCLENBQzFFLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9sb2dnZXIuanM/OTQzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsU2luZ2xldG9uLCBHTE9CQUxfT0JKIH0gZnJvbSAnLi93b3JsZHdpZGUuanMnO1xuXG4vKiogUHJlZml4IGZvciBsb2dnaW5nIHN0cmluZ3MgKi9cbmNvbnN0IFBSRUZJWCA9ICdTZW50cnkgTG9nZ2VyICc7XG5cbmNvbnN0IENPTlNPTEVfTEVWRUxTID0gW1xuICAnZGVidWcnLFxuICAnaW5mbycsXG4gICd3YXJuJyxcbiAgJ2Vycm9yJyxcbiAgJ2xvZycsXG4gICdhc3NlcnQnLFxuICAndHJhY2UnLFxuXSA7XG5cbi8qKiBUaGlzIG1heSBiZSBtdXRhdGVkIGJ5IHRoZSBjb25zb2xlIGluc3RydW1lbnRhdGlvbi4gKi9cbmNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNcblxuID0ge307XG5cbi8qKiBKU0RvYyAqL1xuXG4vKipcbiAqIFRlbXBvcmFyaWx5IGRpc2FibGUgc2VudHJ5IGNvbnNvbGUgaW5zdHJ1bWVudGF0aW9ucy5cbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIHJ1biBhZ2FpbnN0IHRoZSBvcmlnaW5hbCBgY29uc29sZWAgbWVzc2FnZXNcbiAqIEByZXR1cm5zIFRoZSByZXN1bHRzIG9mIHRoZSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBjb25zb2xlU2FuZGJveChjYWxsYmFjaykge1xuICBpZiAoISgnY29uc29sZScgaW4gR0xPQkFMX09CSikpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IGNvbnNvbGUgPSBHTE9CQUxfT0JKLmNvbnNvbGUgO1xuICBjb25zdCB3cmFwcGVkRnVuY3MgPSB7fTtcblxuICBjb25zdCB3cmFwcGVkTGV2ZWxzID0gT2JqZWN0LmtleXMob3JpZ2luYWxDb25zb2xlTWV0aG9kcykgO1xuXG4gIC8vIFJlc3RvcmUgYWxsIHdyYXBwZWQgY29uc29sZSBtZXRob2RzXG4gIHdyYXBwZWRMZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxDb25zb2xlTWV0aG9kID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF0gO1xuICAgIHdyYXBwZWRGdW5jc1tsZXZlbF0gPSBjb25zb2xlW2xldmVsXSA7XG4gICAgY29uc29sZVtsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVNZXRob2Q7XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gUmV2ZXJ0IHJlc3RvcmF0aW9uIHRvIHdyYXBwZWQgc3RhdGVcbiAgICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgICAgY29uc29sZVtsZXZlbF0gPSB3cmFwcGVkRnVuY3NbbGV2ZWxdIDtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlTG9nZ2VyKCkge1xuICBsZXQgZW5hYmxlZCA9IGZhbHNlO1xuICBjb25zdCBsb2dnZXIgPSB7XG4gICAgZW5hYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRpc2FibGU6ICgpID0+IHtcbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGlzRW5hYmxlZDogKCkgPT4gZW5hYmxlZCxcbiAgfTtcblxuICBpZiAoREVCVUdfQlVJTEQpIHtcbiAgICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgbG9nZ2VyW25hbWVdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgICAgICBHTE9CQUxfT0JKLmNvbnNvbGVbbmFtZV0oYCR7UFJFRklYfVske25hbWV9XTpgLCAuLi5hcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgbG9nZ2VyW25hbWVdID0gKCkgPT4gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGxvZ2dlciA7XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIGxvZ2dlciBzaW5nbGV0b24gd2hpY2ggZWl0aGVyIGxvZ3MgdGhpbmdzIG9yIG5vLW9wcyBpZiBsb2dnaW5nIGlzIG5vdCBlbmFibGVkLlxuICogVGhlIGxvZ2dlciBpcyBhIHNpbmdsZXRvbiBvbiB0aGUgY2FycmllciwgdG8gZW5zdXJlIHRoYXQgYSBjb25zaXN0ZW50IGxvZ2dlciBpcyB1c2VkIHRocm91Z2hvdXQgdGhlIFNESy5cbiAqL1xuY29uc3QgbG9nZ2VyID0gZ2V0R2xvYmFsU2luZ2xldG9uKCdsb2dnZXInLCBtYWtlTG9nZ2VyKTtcblxuZXhwb3J0IHsgQ09OU09MRV9MRVZFTFMsIGNvbnNvbGVTYW5kYm94LCBsb2dnZXIsIG9yaWdpbmFsQ29uc29sZU1ldGhvZHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsImdldEdsb2JhbFNpbmdsZXRvbiIsIkdMT0JBTF9PQkoiLCJQUkVGSVgiLCJDT05TT0xFX0xFVkVMUyIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZHMiLCJjb25zb2xlU2FuZGJveCIsImNhbGxiYWNrIiwiY29uc29sZSIsIndyYXBwZWRGdW5jcyIsIndyYXBwZWRMZXZlbHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImxldmVsIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kIiwibWFrZUxvZ2dlciIsImVuYWJsZWQiLCJsb2dnZXIiLCJlbmFibGUiLCJkaXNhYmxlIiwiaXNFbmFibGVkIiwibmFtZSIsImFyZ3MiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/memo.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/memo.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoBuilder: () => (/* binding */ memoBuilder)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Helper to decycle json objects\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */ // TODO(v9): Move this function into normalize() directly\nfunction memoBuilder() {\n    const hasWeakSet = typeof WeakSet === \"function\";\n    const inner = hasWeakSet ? new WeakSet() : [];\n    function memoize(obj) {\n        if (hasWeakSet) {\n            if (inner.has(obj)) {\n                return true;\n            }\n            inner.add(obj);\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < inner.length; i++){\n            const value = inner[i];\n            if (value === obj) {\n                return true;\n            }\n        }\n        inner.push(obj);\n        return false;\n    }\n    function unmemoize(obj) {\n        if (hasWeakSet) {\n            inner.delete(obj);\n        } else {\n            for(let i = 0; i < inner.length; i++){\n                if (inner[i] === obj) {\n                    inner.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        memoize,\n        unmemoize\n    ];\n}\n //# sourceMappingURL=memo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9tZW1vLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2REFBNkQsR0FDN0QscURBQXFELEdBRXJEOzs7O0NBSUMsR0FDRCx5REFBeUQ7QUFDekQsU0FBU0E7SUFDUCxNQUFNQyxhQUFhLE9BQU9DLFlBQVk7SUFDdEMsTUFBTUMsUUFBUUYsYUFBYSxJQUFJQyxZQUFZLEVBQUU7SUFDN0MsU0FBU0UsUUFBUUMsR0FBRztRQUNsQixJQUFJSixZQUFZO1lBQ2QsSUFBSUUsTUFBTUcsR0FBRyxDQUFDRCxNQUFNO2dCQUNsQixPQUFPO1lBQ1Q7WUFDQUYsTUFBTUksR0FBRyxDQUFDRjtZQUNWLE9BQU87UUFDVDtRQUNBLDREQUE0RDtRQUM1RCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1lBQ3JDLE1BQU1FLFFBQVFQLEtBQUssQ0FBQ0ssRUFBRTtZQUN0QixJQUFJRSxVQUFVTCxLQUFLO2dCQUNqQixPQUFPO1lBQ1Q7UUFDRjtRQUNBRixNQUFNUSxJQUFJLENBQUNOO1FBQ1gsT0FBTztJQUNUO0lBRUEsU0FBU08sVUFBVVAsR0FBRztRQUNwQixJQUFJSixZQUFZO1lBQ2RFLE1BQU1VLE1BQU0sQ0FBQ1I7UUFDZixPQUFPO1lBQ0wsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlMLE1BQU1NLE1BQU0sRUFBRUQsSUFBSztnQkFDckMsSUFBSUwsS0FBSyxDQUFDSyxFQUFFLEtBQUtILEtBQUs7b0JBQ3BCRixNQUFNVyxNQUFNLENBQUNOLEdBQUc7b0JBQ2hCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUFDSjtRQUFTUTtLQUFVO0FBQzdCO0FBRXVCLENBQ3ZCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9tZW1vLmpzPzE4MDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbi8qKlxuICogSGVscGVyIHRvIGRlY3ljbGUganNvbiBvYmplY3RzXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAqL1xuLy8gVE9ETyh2OSk6IE1vdmUgdGhpcyBmdW5jdGlvbiBpbnRvIG5vcm1hbGl6ZSgpIGRpcmVjdGx5XG5mdW5jdGlvbiBtZW1vQnVpbGRlcigpIHtcbiAgY29uc3QgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nO1xuICBjb25zdCBpbm5lciA9IGhhc1dlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogW107XG4gIGZ1bmN0aW9uIG1lbW9pemUob2JqKSB7XG4gICAgaWYgKGhhc1dlYWtTZXQpIHtcbiAgICAgIGlmIChpbm5lci5oYXMob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlubmVyLmFkZChvYmopO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1mb3Itb2ZcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlubmVyW2ldO1xuICAgICAgaWYgKHZhbHVlID09PSBvYmopIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlubmVyLnB1c2gob2JqKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB1bm1lbW9pemUob2JqKSB7XG4gICAgaWYgKGhhc1dlYWtTZXQpIHtcbiAgICAgIGlubmVyLmRlbGV0ZShvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpbm5lcltpXSA9PT0gb2JqKSB7XG4gICAgICAgICAgaW5uZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbbWVtb2l6ZSwgdW5tZW1vaXplXTtcbn1cblxuZXhwb3J0IHsgbWVtb0J1aWxkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbW8uanMubWFwXG4iXSwibmFtZXMiOlsibWVtb0J1aWxkZXIiLCJoYXNXZWFrU2V0IiwiV2Vha1NldCIsImlubmVyIiwibWVtb2l6ZSIsIm9iaiIsImhhcyIsImFkZCIsImkiLCJsZW5ndGgiLCJ2YWx1ZSIsInB1c2giLCJ1bm1lbW9pemUiLCJkZWxldGUiLCJzcGxpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/misc.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */ function uuid4() {\n    const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = ()=>Math.random() * 16;\n    try {\n        if (crypto && crypto.randomUUID) {\n            return crypto.randomUUID().replace(/-/g, \"\");\n        }\n        if (crypto && crypto.getRandomValues) {\n            getRandomByte = ()=>{\n                // crypto.getRandomValues might return undefined instead of the typed array\n                // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n                // However, `typedArray` is still filled in-place.\n                // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n                const typedArray = new Uint8Array(1);\n                crypto.getRandomValues(typedArray);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return typedArray[0];\n            };\n        }\n    } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([\n        1e7\n    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise\n        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */ function getEventDescription(event) {\n    const { message, event_id: eventId } = event;\n    if (message) {\n        return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n        if (firstException.type && firstException.value) {\n            return `${firstException.type}: ${firstException.value}`;\n        }\n        return firstException.type || firstException.value || eventId || \"<unknown>\";\n    }\n    return eventId || \"<unknown>\";\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */ function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n        firstException.value = value || \"\";\n    }\n    if (!firstException.type) {\n        firstException.type = type || \"Error\";\n    }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */ function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n    const defaultMechanism = {\n        type: \"generic\",\n        handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n        ...defaultMechanism,\n        ...currentMechanism,\n        ...newMechanism\n    };\n    if (newMechanism && \"data\" in newMechanism) {\n        const mergedData = {\n            ...currentMechanism && currentMechanism.data,\n            ...newMechanism.data\n        };\n        firstException.mechanism.data = mergedData;\n    }\n}\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */ function _parseInt(input) {\n    return parseInt(input || \"\", 10);\n}\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */ function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = _parseInt(match[1]);\n    const minor = _parseInt(match[2]);\n    const patch = _parseInt(match[3]);\n    return {\n        buildmetadata: match[5],\n        major: isNaN(major) ? undefined : major,\n        minor: isNaN(minor) ? undefined : minor,\n        patch: isNaN(patch) ? undefined : patch,\n        prerelease: match[4]\n    };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */ function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n        return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n    // We guard here to ensure this is not larger than the existing number of lines\n    const lineIndex = Math.min(maxLines - 1, sourceLine);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[lineIndex], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */ function checkOrSetAlreadyCaught(exception) {\n    if (isAlreadyCaptured(exception)) {\n        return true;\n    }\n    try {\n        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n        // `ExtraErrorData` integration\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception, \"__sentry_captured__\", true);\n    } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n}\nfunction isAlreadyCaptured(exception) {\n    try {\n        return exception.__sentry_captured__;\n    } catch (e) {} // eslint-disable-line no-empty\n}\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n *\n * @deprecated This function has been deprecated and will not be replaced.\n */ function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [\n        maybeArray\n    ];\n}\n //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9taXNjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXVEO0FBQ2hCO0FBQ0s7QUFFNUM7Ozs7Q0FJQyxHQUNELFNBQVNHO0lBQ1AsTUFBTUMsTUFBTUYscURBQVVBO0lBQ3RCLE1BQU1HLFNBQVNELElBQUlDLE1BQU0sSUFBSUQsSUFBSUUsUUFBUTtJQUV6QyxJQUFJQyxnQkFBZ0IsSUFBTUMsS0FBS0MsTUFBTSxLQUFLO0lBQzFDLElBQUk7UUFDRixJQUFJSixVQUFVQSxPQUFPSyxVQUFVLEVBQUU7WUFDL0IsT0FBT0wsT0FBT0ssVUFBVSxHQUFHQyxPQUFPLENBQUMsTUFBTTtRQUMzQztRQUNBLElBQUlOLFVBQVVBLE9BQU9PLGVBQWUsRUFBRTtZQUNwQ0wsZ0JBQWdCO2dCQUNkLDJFQUEyRTtnQkFDM0UsdURBQXVEO2dCQUN2RCxrREFBa0Q7Z0JBQ2xELDBGQUEwRjtnQkFDMUYsTUFBTU0sYUFBYSxJQUFJQyxXQUFXO2dCQUNsQ1QsT0FBT08sZUFBZSxDQUFDQztnQkFDdkIsb0VBQW9FO2dCQUNwRSxPQUFPQSxVQUFVLENBQUMsRUFBRTtZQUN0QjtRQUNGO0lBQ0YsRUFBRSxPQUFPRSxHQUFHO0lBQ1YsMENBQTBDO0lBQzFDLDZEQUE2RDtJQUMvRDtJQUVBLG9HQUFvRztJQUNwRywrRkFBK0Y7SUFDL0YsT0FBTyxDQUFDO1FBQUU7S0FBSSxHQUFLLE1BQU0sTUFBTSxNQUFNLElBQUcsRUFBR0osT0FBTyxDQUFDLFVBQVVLLENBQUFBLElBRTNELHNDQURzQztRQUNyQyxLQUFRLENBQUNULGtCQUFrQixFQUFDLEtBQU8sSUFBTyxDQUFFLEVBQUdVLFFBQVEsQ0FBQztBQUU3RDtBQUVBLFNBQVNDLGtCQUFrQkMsS0FBSztJQUM5QixPQUFPQSxNQUFNQyxTQUFTLElBQUlELE1BQU1DLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHRixNQUFNQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxFQUFFLEdBQUdDO0FBQ2pGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0Msb0JBQW9CSixLQUFLO0lBQ2hDLE1BQU0sRUFBRUssT0FBTyxFQUFFQyxVQUFVQyxPQUFPLEVBQUUsR0FBR1A7SUFDdkMsSUFBSUssU0FBUztRQUNYLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNRyxpQkFBaUJULGtCQUFrQkM7SUFDekMsSUFBSVEsZ0JBQWdCO1FBQ2xCLElBQUlBLGVBQWVDLElBQUksSUFBSUQsZUFBZUUsS0FBSyxFQUFFO1lBQy9DLE9BQU8sQ0FBQyxFQUFFRixlQUFlQyxJQUFJLENBQUMsRUFBRSxFQUFFRCxlQUFlRSxLQUFLLENBQUMsQ0FBQztRQUMxRDtRQUNBLE9BQU9GLGVBQWVDLElBQUksSUFBSUQsZUFBZUUsS0FBSyxJQUFJSCxXQUFXO0lBQ25FO0lBQ0EsT0FBT0EsV0FBVztBQUNwQjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNJLHNCQUFzQlgsS0FBSyxFQUFFVSxLQUFLLEVBQUVELElBQUk7SUFDL0MsTUFBTVIsWUFBYUQsTUFBTUMsU0FBUyxHQUFHRCxNQUFNQyxTQUFTLElBQUksQ0FBQztJQUN6RCxNQUFNQyxTQUFVRCxVQUFVQyxNQUFNLEdBQUdELFVBQVVDLE1BQU0sSUFBSSxFQUFFO0lBQ3pELE1BQU1NLGlCQUFrQk4sTUFBTSxDQUFDLEVBQUUsR0FBR0EsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDO0lBQ2xELElBQUksQ0FBQ00sZUFBZUUsS0FBSyxFQUFFO1FBQ3pCRixlQUFlRSxLQUFLLEdBQUdBLFNBQVM7SUFDbEM7SUFDQSxJQUFJLENBQUNGLGVBQWVDLElBQUksRUFBRTtRQUN4QkQsZUFBZUMsSUFBSSxHQUFHQSxRQUFRO0lBQ2hDO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRyxzQkFBc0JaLEtBQUssRUFBRWEsWUFBWTtJQUNoRCxNQUFNTCxpQkFBaUJULGtCQUFrQkM7SUFDekMsSUFBSSxDQUFDUSxnQkFBZ0I7UUFDbkI7SUFDRjtJQUVBLE1BQU1NLG1CQUFtQjtRQUFFTCxNQUFNO1FBQVdNLFNBQVM7SUFBSztJQUMxRCxNQUFNQyxtQkFBbUJSLGVBQWVTLFNBQVM7SUFDakRULGVBQWVTLFNBQVMsR0FBRztRQUFFLEdBQUdILGdCQUFnQjtRQUFFLEdBQUdFLGdCQUFnQjtRQUFFLEdBQUdILFlBQVk7SUFBQztJQUV2RixJQUFJQSxnQkFBZ0IsVUFBVUEsY0FBYztRQUMxQyxNQUFNSyxhQUFhO1lBQUUsR0FBSUYsb0JBQW9CQSxpQkFBaUJHLElBQUk7WUFBRyxHQUFHTixhQUFhTSxJQUFJO1FBQUM7UUFDMUZYLGVBQWVTLFNBQVMsQ0FBQ0UsSUFBSSxHQUFHRDtJQUNsQztBQUNGO0FBRUEsNkZBQTZGO0FBQzdGLE1BQU1FLGdCQUNKO0FBRUY7O0NBRUMsR0FFRCxTQUFTQyxVQUFVQyxLQUFLO0lBQ3RCLE9BQU9DLFNBQVNELFNBQVMsSUFBSTtBQUMvQjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNFLFlBQVlGLEtBQUs7SUFDeEIsTUFBTUcsUUFBUUgsTUFBTUcsS0FBSyxDQUFDTCxrQkFBa0IsRUFBRTtJQUM5QyxNQUFNTSxRQUFRTCxVQUFVSSxLQUFLLENBQUMsRUFBRTtJQUNoQyxNQUFNRSxRQUFRTixVQUFVSSxLQUFLLENBQUMsRUFBRTtJQUNoQyxNQUFNRyxRQUFRUCxVQUFVSSxLQUFLLENBQUMsRUFBRTtJQUNoQyxPQUFPO1FBQ0xJLGVBQWVKLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCQyxPQUFPSSxNQUFNSixTQUFTdkIsWUFBWXVCO1FBQ2xDQyxPQUFPRyxNQUFNSCxTQUFTeEIsWUFBWXdCO1FBQ2xDQyxPQUFPRSxNQUFNRixTQUFTekIsWUFBWXlCO1FBQ2xDRyxZQUFZTixLQUFLLENBQUMsRUFBRTtJQUN0QjtBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU08sa0JBQWtCQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsaUJBQWlCLENBQUM7SUFDekQsMkdBQTJHO0lBQzNHLElBQUlELE1BQU1FLE1BQU0sS0FBS2pDLFdBQVc7UUFDOUI7SUFDRjtJQUVBLE1BQU1rQyxXQUFXSixNQUFNSyxNQUFNO0lBQzdCLE1BQU1DLGFBQWFsRCxLQUFLbUQsR0FBRyxDQUFDbkQsS0FBS29ELEdBQUcsQ0FBQ0osV0FBVyxHQUFHSCxNQUFNRSxNQUFNLEdBQUcsSUFBSTtJQUV0RUYsTUFBTVEsV0FBVyxHQUFHVCxNQUNqQlUsS0FBSyxDQUFDdEQsS0FBS21ELEdBQUcsQ0FBQyxHQUFHRCxhQUFhSixpQkFBaUJJLFlBQ2hESyxHQUFHLENBQUMsQ0FBQ0MsT0FBUy9ELG9EQUFRQSxDQUFDK0QsTUFBTTtJQUVoQywrRUFBK0U7SUFDL0UsTUFBTUMsWUFBWXpELEtBQUtvRCxHQUFHLENBQUNKLFdBQVcsR0FBR0U7SUFFekMsb0VBQW9FO0lBQ3BFTCxNQUFNYSxZQUFZLEdBQUdqRSxvREFBUUEsQ0FBQ21ELEtBQUssQ0FBQ2EsVUFBVSxFQUFFWixNQUFNYyxLQUFLLElBQUk7SUFFL0RkLE1BQU1lLFlBQVksR0FBR2hCLE1BQ2xCVSxLQUFLLENBQUN0RCxLQUFLb0QsR0FBRyxDQUFDRixhQUFhLEdBQUdGLFdBQVdFLGFBQWEsSUFBSUosZ0JBQzNEUyxHQUFHLENBQUMsQ0FBQ0MsT0FBUy9ELG9EQUFRQSxDQUFDK0QsTUFBTTtBQUNsQztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW9CQyxHQUNELFNBQVNLLHdCQUF3QmpELFNBQVM7SUFDeEMsSUFBSWtELGtCQUFrQmxELFlBQVk7UUFDaEMsT0FBTztJQUNUO0lBRUEsSUFBSTtRQUNGLDZHQUE2RztRQUM3RywrQkFBK0I7UUFDL0JwQixvRUFBd0JBLENBQUNvQixXQUFZLHVCQUF1QjtJQUM5RCxFQUFFLE9BQU9tRCxLQUFLO0lBQ1osdURBQXVEO0lBQ3pEO0lBRUEsT0FBTztBQUNUO0FBRUEsU0FBU0Qsa0JBQWtCbEQsU0FBUztJQUNsQyxJQUFJO1FBQ0YsT0FBTyxVQUFhb0QsbUJBQW1CO0lBQ3pDLEVBQUUsT0FBT0MsR0FBRyxDQUFDLEVBQUUsK0JBQStCO0FBQ2hEO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNDLFNBQVNDLFVBQVU7SUFDMUIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixjQUFjQSxhQUFhO1FBQUNBO0tBQVc7QUFDOUQ7QUFFdUosQ0FDdkosZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L21pc2MuanM/M2Y2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkgfSBmcm9tICcuL29iamVjdC5qcyc7XG5pbXBvcnQgeyBzbmlwTGluZSB9IGZyb20gJy4vc3RyaW5nLmpzJztcbmltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuL3dvcmxkd2lkZS5qcyc7XG5cbi8qKlxuICogVVVJRDQgZ2VuZXJhdG9yXG4gKlxuICogQHJldHVybnMgc3RyaW5nIEdlbmVyYXRlZCBVVUlENC5cbiAqL1xuZnVuY3Rpb24gdXVpZDQoKSB7XG4gIGNvbnN0IGdibCA9IEdMT0JBTF9PQkogO1xuICBjb25zdCBjcnlwdG8gPSBnYmwuY3J5cHRvIHx8IGdibC5tc0NyeXB0bztcblxuICBsZXQgZ2V0UmFuZG9tQnl0ZSA9ICgpID0+IE1hdGgucmFuZG9tKCkgKiAxNjtcbiAgdHJ5IHtcbiAgICBpZiAoY3J5cHRvICYmIGNyeXB0by5yYW5kb21VVUlEKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKS5yZXBsYWNlKC8tL2csICcnKTtcbiAgICB9XG4gICAgaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICBnZXRSYW5kb21CeXRlID0gKCkgPT4ge1xuICAgICAgICAvLyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzIG1pZ2h0IHJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiB0aGUgdHlwZWQgYXJyYXlcbiAgICAgICAgLy8gaW4gb2xkIENocm9taXVtIHZlcnNpb25zIChlLmcuIDIzLjAuMTIzNS4wICgxNTE0MjIpKVxuICAgICAgICAvLyBIb3dldmVyLCBgdHlwZWRBcnJheWAgaXMgc3RpbGwgZmlsbGVkIGluLXBsYWNlLlxuICAgICAgICAvLyBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DcnlwdG8vZ2V0UmFuZG9tVmFsdWVzI3R5cGVkYXJyYXlcbiAgICAgICAgY29uc3QgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHR5cGVkQXJyYXkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICByZXR1cm4gdHlwZWRBcnJheVswXTtcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChfKSB7XG4gICAgLy8gc29tZSBydW50aW1lcyBjYW4gY3Jhc2ggaW52b2tpbmcgY3J5cHRvXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvODkzNVxuICB9XG5cbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxMTc1MjMjMjExNzUyM1xuICAvLyBDb25jYXRlbmF0aW5nIHRoZSBmb2xsb3dpbmcgbnVtYmVycyBhcyBzdHJpbmdzIHJlc3VsdHMgaW4gJzEwMDAwMDAwMTAwMDQwMDA4MDAwMTAwMDAwMDAwMDAwJ1xuICByZXR1cm4gKChbMWU3XSApICsgMWUzICsgNGUzICsgOGUzICsgMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYyA9PlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgKChjICkgXiAoKGdldFJhbmRvbUJ5dGUoKSAmIDE1KSA+PiAoKGMgKSAvIDQpKSkudG9TdHJpbmcoMTYpLFxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRGaXJzdEV4Y2VwdGlvbihldmVudCkge1xuICByZXR1cm4gZXZlbnQuZXhjZXB0aW9uICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPyBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGVpdGhlciBtZXNzYWdlIG9yIHR5cGUrdmFsdWUgZnJvbSBhbiBldmVudCB0aGF0IGNhbiBiZSB1c2VkIGZvciB1c2VyLWZhY2luZyBsb2dzXG4gKiBAcmV0dXJucyBldmVudCdzIGRlc2NyaXB0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpIHtcbiAgY29uc3QgeyBtZXNzYWdlLCBldmVudF9pZDogZXZlbnRJZCB9ID0gZXZlbnQ7XG4gIGlmIChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBjb25zdCBmaXJzdEV4Y2VwdGlvbiA9IGdldEZpcnN0RXhjZXB0aW9uKGV2ZW50KTtcbiAgaWYgKGZpcnN0RXhjZXB0aW9uKSB7XG4gICAgaWYgKGZpcnN0RXhjZXB0aW9uLnR5cGUgJiYgZmlyc3RFeGNlcHRpb24udmFsdWUpIHtcbiAgICAgIHJldHVybiBgJHtmaXJzdEV4Y2VwdGlvbi50eXBlfTogJHtmaXJzdEV4Y2VwdGlvbi52YWx1ZX1gO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RFeGNlcHRpb24udHlwZSB8fCBmaXJzdEV4Y2VwdGlvbi52YWx1ZSB8fCBldmVudElkIHx8ICc8dW5rbm93bj4nO1xuICB9XG4gIHJldHVybiBldmVudElkIHx8ICc8dW5rbm93bj4nO1xufVxuXG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIHZhbHVlcywgdHlwZSBhbmQgdmFsdWUgdG8gYW4gc3ludGhldGljIEV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAcGFyYW0gdHlwZSBUeXBlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgdmFsdWUsIHR5cGUpIHtcbiAgY29uc3QgZXhjZXB0aW9uID0gKGV2ZW50LmV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbiB8fCB7fSk7XG4gIGNvbnN0IHZhbHVlcyA9IChleGNlcHRpb24udmFsdWVzID0gZXhjZXB0aW9uLnZhbHVlcyB8fCBbXSk7XG4gIGNvbnN0IGZpcnN0RXhjZXB0aW9uID0gKHZhbHVlc1swXSA9IHZhbHVlc1swXSB8fCB7fSk7XG4gIGlmICghZmlyc3RFeGNlcHRpb24udmFsdWUpIHtcbiAgICBmaXJzdEV4Y2VwdGlvbi52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICB9XG4gIGlmICghZmlyc3RFeGNlcHRpb24udHlwZSkge1xuICAgIGZpcnN0RXhjZXB0aW9uLnR5cGUgPSB0eXBlIHx8ICdFcnJvcic7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIGV4Y2VwdGlvbiBtZWNoYW5pc20gZGF0YSB0byBhIGdpdmVuIGV2ZW50LiBVc2VzIGRlZmF1bHRzIGlmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIG5vdCBwYXNzZWQuXG4gKlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gbmV3TWVjaGFuaXNtIE1lY2hhbmlzbSBkYXRhIHRvIGFkZCB0byB0aGUgZXZlbnQuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwgbmV3TWVjaGFuaXNtKSB7XG4gIGNvbnN0IGZpcnN0RXhjZXB0aW9uID0gZ2V0Rmlyc3RFeGNlcHRpb24oZXZlbnQpO1xuICBpZiAoIWZpcnN0RXhjZXB0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZGVmYXVsdE1lY2hhbmlzbSA9IHsgdHlwZTogJ2dlbmVyaWMnLCBoYW5kbGVkOiB0cnVlIH07XG4gIGNvbnN0IGN1cnJlbnRNZWNoYW5pc20gPSBmaXJzdEV4Y2VwdGlvbi5tZWNoYW5pc207XG4gIGZpcnN0RXhjZXB0aW9uLm1lY2hhbmlzbSA9IHsgLi4uZGVmYXVsdE1lY2hhbmlzbSwgLi4uY3VycmVudE1lY2hhbmlzbSwgLi4ubmV3TWVjaGFuaXNtIH07XG5cbiAgaWYgKG5ld01lY2hhbmlzbSAmJiAnZGF0YScgaW4gbmV3TWVjaGFuaXNtKSB7XG4gICAgY29uc3QgbWVyZ2VkRGF0YSA9IHsgLi4uKGN1cnJlbnRNZWNoYW5pc20gJiYgY3VycmVudE1lY2hhbmlzbS5kYXRhKSwgLi4ubmV3TWVjaGFuaXNtLmRhdGEgfTtcbiAgICBmaXJzdEV4Y2VwdGlvbi5tZWNoYW5pc20uZGF0YSA9IG1lcmdlZERhdGE7XG4gIH1cbn1cblxuLy8gaHR0cHM6Ly9zZW12ZXIub3JnLyNpcy10aGVyZS1hLXN1Z2dlc3RlZC1yZWd1bGFyLWV4cHJlc3Npb24tcmVnZXgtdG8tY2hlY2stYS1zZW12ZXItc3RyaW5nXG5jb25zdCBTRU1WRVJfUkVHRVhQID1cbiAgL14oMHxbMS05XVxcZCopXFwuKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKikoPzotKCg/OjB8WzEtOV1cXGQqfFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSg/OlxcLig/OjB8WzEtOV1cXGQqfFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSkqKSk/KD86XFwrKFswLTlhLXpBLVotXSsoPzpcXC5bMC05YS16QS1aLV0rKSopKT8kLztcblxuLyoqXG4gKiBSZXByZXNlbnRzIFNlbWFudGljIFZlcnNpb25pbmcgb2JqZWN0XG4gKi9cblxuZnVuY3Rpb24gX3BhcnNlSW50KGlucHV0KSB7XG4gIHJldHVybiBwYXJzZUludChpbnB1dCB8fCAnJywgMTApO1xufVxuXG4vKipcbiAqIFBhcnNlcyBpbnB1dCBpbnRvIGEgU2VtVmVyIGludGVyZmFjZVxuICogQHBhcmFtIGlucHV0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHNlbXZlciB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2VtdmVyKGlucHV0KSB7XG4gIGNvbnN0IG1hdGNoID0gaW5wdXQubWF0Y2goU0VNVkVSX1JFR0VYUCkgfHwgW107XG4gIGNvbnN0IG1ham9yID0gX3BhcnNlSW50KG1hdGNoWzFdKTtcbiAgY29uc3QgbWlub3IgPSBfcGFyc2VJbnQobWF0Y2hbMl0pO1xuICBjb25zdCBwYXRjaCA9IF9wYXJzZUludChtYXRjaFszXSk7XG4gIHJldHVybiB7XG4gICAgYnVpbGRtZXRhZGF0YTogbWF0Y2hbNV0sXG4gICAgbWFqb3I6IGlzTmFOKG1ham9yKSA/IHVuZGVmaW5lZCA6IG1ham9yLFxuICAgIG1pbm9yOiBpc05hTihtaW5vcikgPyB1bmRlZmluZWQgOiBtaW5vcixcbiAgICBwYXRjaDogaXNOYU4ocGF0Y2gpID8gdW5kZWZpbmVkIDogcGF0Y2gsXG4gICAgcHJlcmVsZWFzZTogbWF0Y2hbNF0sXG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhZGRzIGNvbnRleHQgKHByZS9wb3N0L2xpbmUpIGxpbmVzIHRvIHRoZSBwcm92aWRlZCBmcmFtZVxuICpcbiAqIEBwYXJhbSBsaW5lcyBzdHJpbmdbXSBjb250YWluaW5nIGFsbCBsaW5lc1xuICogQHBhcmFtIGZyYW1lIFN0YWNrRnJhbWUgdGhhdCB3aWxsIGJlIG11dGF0ZWRcbiAqIEBwYXJhbSBsaW5lc09mQ29udGV4dCBudW1iZXIgb2YgY29udGV4dCBsaW5lcyB3ZSB3YW50IHRvIGFkZCBwcmUvcG9zdFxuICovXG5mdW5jdGlvbiBhZGRDb250ZXh0VG9GcmFtZShsaW5lcywgZnJhbWUsIGxpbmVzT2ZDb250ZXh0ID0gNSkge1xuICAvLyBXaGVuIHRoZXJlIGlzIG5vIGxpbmUgbnVtYmVyIGluIHRoZSBmcmFtZSwgYXR0YWNoaW5nIGNvbnRleHQgaXMgbm9uc2Vuc2ljYWwgYW5kIHdpbGwgZXZlbiBicmVhayBncm91cGluZ1xuICBpZiAoZnJhbWUubGluZW5vID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtYXhMaW5lcyA9IGxpbmVzLmxlbmd0aDtcbiAgY29uc3Qgc291cmNlTGluZSA9IE1hdGgubWF4KE1hdGgubWluKG1heExpbmVzIC0gMSwgZnJhbWUubGluZW5vIC0gMSksIDApO1xuXG4gIGZyYW1lLnByZV9jb250ZXh0ID0gbGluZXNcbiAgICAuc2xpY2UoTWF0aC5tYXgoMCwgc291cmNlTGluZSAtIGxpbmVzT2ZDb250ZXh0KSwgc291cmNlTGluZSlcbiAgICAubWFwKChsaW5lKSA9PiBzbmlwTGluZShsaW5lLCAwKSk7XG5cbiAgLy8gV2UgZ3VhcmQgaGVyZSB0byBlbnN1cmUgdGhpcyBpcyBub3QgbGFyZ2VyIHRoYW4gdGhlIGV4aXN0aW5nIG51bWJlciBvZiBsaW5lc1xuICBjb25zdCBsaW5lSW5kZXggPSBNYXRoLm1pbihtYXhMaW5lcyAtIDEsIHNvdXJjZUxpbmUpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIGZyYW1lLmNvbnRleHRfbGluZSA9IHNuaXBMaW5lKGxpbmVzW2xpbmVJbmRleF0sIGZyYW1lLmNvbG5vIHx8IDApO1xuXG4gIGZyYW1lLnBvc3RfY29udGV4dCA9IGxpbmVzXG4gICAgLnNsaWNlKE1hdGgubWluKHNvdXJjZUxpbmUgKyAxLCBtYXhMaW5lcyksIHNvdXJjZUxpbmUgKyAxICsgbGluZXNPZkNvbnRleHQpXG4gICAgLm1hcCgobGluZSkgPT4gc25pcExpbmUobGluZSwgMCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB3ZSd2ZSBhbHJlYWR5IGNhcHR1cmVkIHRoZSBnaXZlbiBleGNlcHRpb24gKG5vdGU6IG5vdCBhbiBpZGVudGljYWwgZXhjZXB0aW9uIC0gdGhlIHZlcnkgb2JqZWN0XG4gKiBpbiBxdWVzdGlvbiksIGFuZCBtYXJrcyBpdCBjYXB0dXJlZCBpZiBub3QuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSBpdCdzIHBvc3NpYmxlIGZvciBhbiBlcnJvciB0byBnZXQgY2FwdHVyZWQgYnkgbW9yZSB0aGFuIG9uZSBtZWNoYW5pc20uIEFmdGVyIHdlIGludGVyY2VwdCBhbmRcbiAqIHJlY29yZCBhbiBlcnJvciwgd2UgcmV0aHJvdyBpdCAoYXNzdW1pbmcgd2UndmUgaW50ZXJjZXB0ZWQgaXQgYmVmb3JlIGl0J3MgcmVhY2hlZCB0aGUgdG9wLWxldmVsIGdsb2JhbCBoYW5kbGVycyksIHNvXG4gKiB0aGF0IHdlIGRvbid0IGludGVyZmVyZSB3aXRoIHdoYXRldmVyIGVmZmVjdHMgdGhlIGVycm9yIG1pZ2h0IGhhdmUgaGFkIHdlcmUgdGhlIFNESyBub3QgdGhlcmUuIEF0IHRoYXQgcG9pbnQsIGJlY2F1c2VcbiAqIHRoZSBlcnJvciBoYXMgYmVlbiByZXRocm93biwgaXQncyBwb3NzaWJsZSBmb3IgaXQgdG8gYnViYmxlIHVwIHRvIHNvbWUgb3RoZXIgY29kZSB3ZSd2ZSBpbnN0cnVtZW50ZWQuIElmIGl0J3Mgbm90XG4gKiBjYXVnaHQgYWZ0ZXIgdGhhdCwgaXQgd2lsbCBidWJibGUgYWxsIHRoZSB3YXkgdXAgdG8gdGhlIGdsb2JhbCBoYW5kbGVycyAod2hpY2ggb2YgY291cnNlIHdlIGFsc28gaW5zdHJ1bWVudCkuIFRoaXNcbiAqIGZ1bmN0aW9uIGhlbHBzIHVzIGVuc3VyZSB0aGF0IGV2ZW4gaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lIGVycm9yIG1vcmUgdGhhbiBvbmNlLCB3ZSBvbmx5IHJlY29yZCBpdCB0aGUgZmlyc3QgdGltZSB3ZVxuICogc2VlIGl0LlxuICpcbiAqIE5vdGU6IEl0IHdpbGwgaWdub3JlIHByaW1pdGl2ZXMgKGFsd2F5cyByZXR1cm4gYGZhbHNlYCBhbmQgbm90IG1hcmsgdGhlbSBhcyBzZWVuKSwgYXMgcHJvcGVydGllcyBjYW4ndCBiZSBzZXQgb25cbiAqIHRoZW0uIHtAbGluazogT2JqZWN0Lm9iamVjdGlmeX0gY2FuIGJlIHVzZWQgb24gZXhjZXB0aW9ucyB0byBjb252ZXJ0IGFueSB0aGF0IGFyZSBwcmltaXRpdmVzIGludG8gdGhlaXIgZXF1aXZhbGVudFxuICogb2JqZWN0IHdyYXBwZXIgZm9ybXMgc28gdGhhdCB0aGlzIGNoZWNrIHdpbGwgYWx3YXlzIHdvcmsuIEhvd2V2ZXIsIGJlY2F1c2Ugd2UgbmVlZCB0byBmbGFnIHRoZSBleGFjdCBvYmplY3Qgd2hpY2hcbiAqIHdpbGwgZ2V0IHJldGhyb3duLCBhbmQgYmVjYXVzZSB0aGF0IHJldGhyb3dpbmcgaGFwcGVucyBvdXRzaWRlIG9mIHRoZSBldmVudCBwcm9jZXNzaW5nIHBpcGVsaW5lLCB0aGUgb2JqZWN0aWZpY2F0aW9uXG4gKiBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSBleGNlcHRpb24gY2FwdHVyZWQuXG4gKlxuICogQHBhcmFtIEEgdGhyb3duIGV4Y2VwdGlvbiB0byBjaGVjayBvciBmbGFnIGFzIGhhdmluZyBiZWVuIHNlZW5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZXhjZXB0aW9uIGhhcyBhbHJlYWR5IGJlZW4gY2FwdHVyZWQsIGBmYWxzZWAgaWYgbm90ICh3aXRoIHRoZSBzaWRlIGVmZmVjdCBvZiBtYXJraW5nIGl0IHNlZW4pXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT3JTZXRBbHJlYWR5Q2F1Z2h0KGV4Y2VwdGlvbikge1xuICBpZiAoaXNBbHJlYWR5Q2FwdHVyZWQoZXhjZXB0aW9uKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBzZXQgaXQgdGhpcyB3YXkgcmF0aGVyIHRoYW4gYnkgYXNzaWdubWVudCBzbyB0aGF0IGl0J3Mgbm90IGVubnVtZXJhYmxlIGFuZCB0aGVyZWZvcmUgaXNuJ3QgcmVjb3JkZWQgYnkgdGhlXG4gICAgLy8gYEV4dHJhRXJyb3JEYXRhYCBpbnRlZ3JhdGlvblxuICAgIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShleGNlcHRpb24gLCAnX19zZW50cnlfY2FwdHVyZWRfXycsIHRydWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBgZXhjZXB0aW9uYCBpcyBhIHByaW1pdGl2ZSwgc28gd2UgY2FuJ3QgbWFyayBpdCBzZWVuXG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQWxyZWFkeUNhcHR1cmVkKGV4Y2VwdGlvbikge1xuICB0cnkge1xuICAgIHJldHVybiAoZXhjZXB0aW9uICkuX19zZW50cnlfY2FwdHVyZWRfXztcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBpbnB1dCBpcyBhbHJlYWR5IGFuIGFycmF5LCBhbmQgaWYgaXQgaXNuJ3QsIHdyYXBzIGl0IGluIG9uZS5cbiAqXG4gKiBAcGFyYW0gbWF5YmVBcnJheSBJbnB1dCB0byB0dXJuIGludG8gYW4gYXJyYXksIGlmIG5lY2Vzc2FyeVxuICogQHJldHVybnMgVGhlIGlucHV0LCBpZiBhbHJlYWR5IGFuIGFycmF5LCBvciBhbiBhcnJheSB3aXRoIHRoZSBpbnB1dCBhcyB0aGUgb25seSBlbGVtZW50LCBpZiBub3RcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgbm90IGJlIHJlcGxhY2VkLlxuICovXG5mdW5jdGlvbiBhcnJheWlmeShtYXliZUFycmF5KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1heWJlQXJyYXkpID8gbWF5YmVBcnJheSA6IFttYXliZUFycmF5XTtcbn1cblxuZXhwb3J0IHsgYWRkQ29udGV4dFRvRnJhbWUsIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSwgYWRkRXhjZXB0aW9uVHlwZVZhbHVlLCBhcnJheWlmeSwgY2hlY2tPclNldEFscmVhZHlDYXVnaHQsIGdldEV2ZW50RGVzY3JpcHRpb24sIHBhcnNlU2VtdmVyLCB1dWlkNCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJhZGROb25FbnVtZXJhYmxlUHJvcGVydHkiLCJzbmlwTGluZSIsIkdMT0JBTF9PQkoiLCJ1dWlkNCIsImdibCIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tQnl0ZSIsIk1hdGgiLCJyYW5kb20iLCJyYW5kb21VVUlEIiwicmVwbGFjZSIsImdldFJhbmRvbVZhbHVlcyIsInR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiXyIsImMiLCJ0b1N0cmluZyIsImdldEZpcnN0RXhjZXB0aW9uIiwiZXZlbnQiLCJleGNlcHRpb24iLCJ2YWx1ZXMiLCJ1bmRlZmluZWQiLCJnZXRFdmVudERlc2NyaXB0aW9uIiwibWVzc2FnZSIsImV2ZW50X2lkIiwiZXZlbnRJZCIsImZpcnN0RXhjZXB0aW9uIiwidHlwZSIsInZhbHVlIiwiYWRkRXhjZXB0aW9uVHlwZVZhbHVlIiwiYWRkRXhjZXB0aW9uTWVjaGFuaXNtIiwibmV3TWVjaGFuaXNtIiwiZGVmYXVsdE1lY2hhbmlzbSIsImhhbmRsZWQiLCJjdXJyZW50TWVjaGFuaXNtIiwibWVjaGFuaXNtIiwibWVyZ2VkRGF0YSIsImRhdGEiLCJTRU1WRVJfUkVHRVhQIiwiX3BhcnNlSW50IiwiaW5wdXQiLCJwYXJzZUludCIsInBhcnNlU2VtdmVyIiwibWF0Y2giLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJidWlsZG1ldGFkYXRhIiwiaXNOYU4iLCJwcmVyZWxlYXNlIiwiYWRkQ29udGV4dFRvRnJhbWUiLCJsaW5lcyIsImZyYW1lIiwibGluZXNPZkNvbnRleHQiLCJsaW5lbm8iLCJtYXhMaW5lcyIsImxlbmd0aCIsInNvdXJjZUxpbmUiLCJtYXgiLCJtaW4iLCJwcmVfY29udGV4dCIsInNsaWNlIiwibWFwIiwibGluZSIsImxpbmVJbmRleCIsImNvbnRleHRfbGluZSIsImNvbG5vIiwicG9zdF9jb250ZXh0IiwiY2hlY2tPclNldEFscmVhZHlDYXVnaHQiLCJpc0FscmVhZHlDYXB0dXJlZCIsImVyciIsIl9fc2VudHJ5X2NhcHR1cmVkX18iLCJlIiwiYXJyYXlpZnkiLCJtYXliZUFycmF5IiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   normalizeUrlToBase: () => (/* binding */ normalizeUrlToBase)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memo.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/memo.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n    try {\n        // since we're at the outermost level, we don't provide a key\n        return visit(\"\", input, depth, maxProperties);\n    } catch (err) {\n        return {\n            ERROR: `**non-serializable** (${err})`\n        };\n    }\n}\n/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject, // Default Node.js REPL depth\ndepth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n    const normalized = normalize(object, depth);\n    if (jsonSize(normalized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, // eslint-disable-next-line deprecation/deprecation\nmemo = (0,_memo_js__WEBPACK_IMPORTED_MODULE_0__.memoBuilder)()) {\n    const [memoize, unmemoize] = memo;\n    // Get the simple cases out of the way first\n    if (value == null || // this matches null and undefined -> eqeq not eqeqeq\n    [\n        \"boolean\",\n        \"string\"\n    ].includes(typeof value) || typeof value === \"number\" && Number.isFinite(value)) {\n        return value;\n    }\n    const stringified = stringifyValue(key, value);\n    // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n    // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n    if (!stringified.startsWith(\"[object \")) {\n        return stringified;\n    }\n    // From here on, we can assert that `value` is either an object or an array.\n    // Do not normalize objects that we know have already been normalized. As a general rule, the\n    // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n    // have already been normalized.\n    if (value[\"__sentry_skip_normalization__\"]) {\n        return value;\n    }\n    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n    // We keep a certain amount of depth.\n    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n    const remainingDepth = typeof value[\"__sentry_override_normalization_depth__\"] === \"number\" ? value[\"__sentry_override_normalization_depth__\"] : depth;\n    // We're also done if we've reached the max depth\n    if (remainingDepth === 0) {\n        // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n        return stringified.replace(\"object \", \"\");\n    }\n    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n    if (memoize(value)) {\n        return \"[Circular ~]\";\n    }\n    // If the value has a `toJSON` method, we call it to extract more information\n    const valueWithToJSON = value;\n    if (valueWithToJSON && typeof valueWithToJSON.toJSON === \"function\") {\n        try {\n            const jsonValue = valueWithToJSON.toJSON();\n            // We need to normalize the return value of `.toJSON()` in case it has circular references\n            return visit(\"\", jsonValue, remainingDepth - 1, maxProperties, memo);\n        } catch (err) {\n        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n        }\n    }\n    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n    // property/entry, and keep track of the number of items we add to it.\n    const normalized = Array.isArray(value) ? [] : {};\n    let numAdded = 0;\n    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n    // properties are non-enumerable and otherwise would get missed.\n    const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_1__.convertToPlainObject)(value);\n    for(const visitKey in visitable){\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n            continue;\n        }\n        if (numAdded >= maxProperties) {\n            normalized[visitKey] = \"[MaxProperties ~]\";\n            break;\n        }\n        // Recursively visit all the child nodes\n        const visitValue = visitable[visitKey];\n        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n        numAdded++;\n    }\n    // Once we've visited all the branches, remove the parent from memo storage\n    unmemoize(value);\n    // Return accumulated values\n    return normalized;\n}\n/* eslint-disable complexity */ /**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n    try {\n        if (key === \"domain\" && value && typeof value === \"object\" && value._events) {\n            return \"[Domain]\";\n        }\n        if (key === \"domainEmitter\") {\n            return \"[DomainEmitter]\";\n        }\n        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n        // which won't throw if they are not present.\n        if (typeof global !== \"undefined\" && value === global) {\n            return \"[Global]\";\n        }\n        // eslint-disable-next-line no-restricted-globals\n        if (false) {}\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof document !== \"undefined\" && value === document) {\n            return \"[Document]\";\n        }\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isVueViewModel)(value)) {\n            return \"[VueViewModel]\";\n        }\n        // React's SyntheticEvent thingy\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isSyntheticEvent)(value)) {\n            return \"[SyntheticEvent]\";\n        }\n        if (typeof value === \"number\" && !Number.isFinite(value)) {\n            return `[${value}]`;\n        }\n        if (typeof value === \"function\") {\n            return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(value)}]`;\n        }\n        if (typeof value === \"symbol\") {\n            return `[${String(value)}]`;\n        }\n        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n        if (typeof value === \"bigint\") {\n            return `[BigInt: ${String(value)}]`;\n        }\n        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n        // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n        // we can make sure that only plain objects come out that way.\n        const objName = getConstructorName(value);\n        // Handle HTML Elements\n        if (/^HTML(\\w*)Element$/.test(objName)) {\n            return `[HTMLElement: ${objName}]`;\n        }\n        return `[object ${objName}]`;\n    } catch (err) {\n        return `**non-serializable** (${err})`;\n    }\n}\n/* eslint-enable complexity */ function getConstructorName(value) {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype ? prototype.constructor.name : \"null prototype\";\n}\n/** Calculates bytes size of input string */ function utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */ function normalizeUrlToBase(url, basePath) {\n    const escapedBase = basePath// Backslash to forward\n    .replace(/\\\\/g, \"/\")// Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    let newUrl = url;\n    try {\n        newUrl = decodeURI(url);\n    } catch (_Oo) {\n    // Sometime this breaks\n    }\n    return newUrl.replace(/\\\\/g, \"/\").replace(/webpack:\\/?/g, \"\") // Remove intermediate base path\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    .replace(new RegExp(`(file://)?/*${escapedBase}/*`, \"ig\"), \"app:///\");\n}\n //# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/object.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/browser.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */ function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    const original = source[name];\n    const wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === \"function\") {\n        markFunctionWrapped(wrapped, original);\n    }\n    try {\n        source[name] = wrapped;\n    } catch (e) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to replace method \"${name}\" in object`, source);\n    }\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */ function addNonEnumerableProperty(obj, name, value) {\n    try {\n        Object.defineProperty(obj, name, {\n            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n            value: value,\n            writable: true,\n            configurable: true\n        });\n    } catch (o_O) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n    }\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */ function markFunctionWrapped(wrapped, original) {\n    try {\n        const proto = original.prototype || {};\n        wrapped.prototype = original.prototype = proto;\n        addNonEnumerableProperty(wrapped, \"__sentry_original__\", original);\n    } catch (o_O) {} // eslint-disable-line no-empty\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */ // eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n    return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n *\n * @deprecated This function is deprecated and will be removed in the next major version of the SDK.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction urlEncode(object) {\n    return Object.entries(object).map(([key, value])=>`${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join(\"&\");\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */ function convertToPlainObject(value) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n        return {\n            message: value.message,\n            name: value.name,\n            stack: value.stack,\n            ...getOwnProperties(value)\n        };\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n        const newObj = {\n            type: value.type,\n            target: serializeEventTarget(value.target),\n            currentTarget: serializeEventTarget(value.currentTarget),\n            ...getOwnProperties(value)\n        };\n        if (typeof CustomEvent !== \"undefined\" && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n            newObj.detail = value.detail;\n        }\n        return newObj;\n    } else {\n        return value;\n    }\n}\n/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {\n    try {\n        return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/** Filters out all but an object's own properties */ function getOwnProperties(obj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const extractedProps = {};\n        for(const property in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                extractedProps[property] = obj[property];\n            }\n        }\n        return extractedProps;\n    } else {\n        return {};\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */ function extractExceptionKeysForMessage(exception, maxLength = 40) {\n    const keys = Object.keys(convertToPlainObject(exception));\n    keys.sort();\n    const firstKey = keys[0];\n    if (!firstKey) {\n        return \"[object has no keys]\";\n    }\n    if (firstKey.length >= maxLength) {\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(firstKey, maxLength);\n    }\n    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){\n        const serialized = keys.slice(0, includedKeys).join(\", \");\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n    }\n    return \"\";\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */ function dropUndefinedKeys(inputValue) {\n    // This map keeps track of what already visited nodes map to.\n    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n    // references as the input object.\n    const memoizationMap = new Map();\n    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n    return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n    if (isPojo(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = {};\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        for (const key of Object.getOwnPropertyNames(inputValue)){\n            if (typeof inputValue[key] !== \"undefined\") {\n                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n            }\n        }\n        return returnValue;\n    }\n    if (Array.isArray(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = [];\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        inputValue.forEach((item)=>{\n            returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n        });\n        return returnValue;\n    }\n    return inputValue;\n}\nfunction isPojo(input) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(input)) {\n        return false;\n    }\n    try {\n        const name = Object.getPrototypeOf(input).constructor.name;\n        return !name || name === \"Object\";\n    } catch (e2) {\n        return true;\n    }\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */ function objectify(wat) {\n    let objectified;\n    switch(true){\n        // this will catch both undefined and null\n        case wat == undefined:\n            objectified = new String(wat);\n            break;\n        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n        // an object in order to wrap it.\n        case typeof wat === \"symbol\" || typeof wat === \"bigint\":\n            objectified = Object(wat);\n            break;\n        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n        case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            objectified = new wat.constructor(wat);\n            break;\n        // by process of elimination, at this point we know that `wat` must already be an object\n        default:\n            objectified = wat;\n            break;\n    }\n    return objectified;\n}\n //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makePromiseBuffer: () => (/* binding */ makePromiseBuffer)\n/* harmony export */ });\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/error.js\");\n/* harmony import */ var _syncpromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syncpromise.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */ function makePromiseBuffer(limit) {\n    const buffer = [];\n    function isReady() {\n        return limit === undefined || buffer.length < limit;\n    }\n    /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */ function remove(task) {\n        return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n    }\n    /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */ function add(taskProducer) {\n        if (!isReady()) {\n            return (0,_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.rejectedSyncPromise)(new _error_js__WEBPACK_IMPORTED_MODULE_1__.SentryError(\"Not adding Promise because buffer limit was reached.\"));\n        }\n        // start the task and add its promise to the queue\n        const task = taskProducer();\n        if (buffer.indexOf(task) === -1) {\n            buffer.push(task);\n        }\n        void task.then(()=>remove(task))// Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n        // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n        // have promises, so TS has to polyfill when down-compiling.)\n        .then(null, ()=>remove(task).then(null, ()=>{\n            // We have to add another catch here because `remove()` starts a new promise chain.\n            }));\n        return task;\n    }\n    /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */ function drain(timeout) {\n        return new _syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.SyncPromise((resolve, reject)=>{\n            let counter = buffer.length;\n            if (!counter) {\n                return resolve(true);\n            }\n            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n            const capturedSetTimeout = setTimeout(()=>{\n                if (timeout && timeout > 0) {\n                    resolve(false);\n                }\n            }, timeout);\n            // if all promises resolve in time, cancel the timer and resolve to `true`\n            buffer.forEach((item)=>{\n                void (0,_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.resolvedSyncPromise)(item).then(()=>{\n                    if (!--counter) {\n                        clearTimeout(capturedSetTimeout);\n                        resolve(true);\n                    }\n                }, reject);\n            });\n        });\n    }\n    return {\n        $: buffer,\n        add,\n        drain\n    };\n}\n //# sourceMappingURL=promisebuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9wcm9taXNlYnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QztBQUNnRDtBQUV6Rjs7O0NBR0MsR0FDRCxTQUFTSSxrQkFBa0JDLEtBQUs7SUFDOUIsTUFBTUMsU0FBUyxFQUFFO0lBRWpCLFNBQVNDO1FBQ1AsT0FBT0YsVUFBVUcsYUFBYUYsT0FBT0csTUFBTSxHQUFHSjtJQUNoRDtJQUVBOzs7OztHQUtDLEdBQ0QsU0FBU0ssT0FBT0MsSUFBSTtRQUNsQixPQUFPTCxPQUFPTSxNQUFNLENBQUNOLE9BQU9PLE9BQU8sQ0FBQ0YsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJRyxRQUFRQyxPQUFPLENBQUNQO0lBQ3RFO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU1EsSUFBSUMsWUFBWTtRQUN2QixJQUFJLENBQUNWLFdBQVc7WUFDZCxPQUFPTixvRUFBbUJBLENBQUMsSUFBSUQsa0RBQVdBLENBQUM7UUFDN0M7UUFFQSxrREFBa0Q7UUFDbEQsTUFBTVcsT0FBT007UUFDYixJQUFJWCxPQUFPTyxPQUFPLENBQUNGLFVBQVUsQ0FBQyxHQUFHO1lBQy9CTCxPQUFPWSxJQUFJLENBQUNQO1FBQ2Q7UUFDQSxLQUFLQSxLQUNGUSxJQUFJLENBQUMsSUFBTVQsT0FBT0MsTUFDbkIsNEdBQTRHO1FBQzVHLGdIQUFnSDtRQUNoSCw2REFBNkQ7U0FDNURRLElBQUksQ0FBQyxNQUFNLElBQ1ZULE9BQU9DLE1BQU1RLElBQUksQ0FBQyxNQUFNO1lBQ3RCLG1GQUFtRjtZQUNyRjtRQUVKLE9BQU9SO0lBQ1Q7SUFFQTs7Ozs7Ozs7R0FRQyxHQUNELFNBQVNTLE1BQU1DLE9BQU87UUFDcEIsT0FBTyxJQUFJbkIsd0RBQVdBLENBQUMsQ0FBQ2EsU0FBU087WUFDL0IsSUFBSUMsVUFBVWpCLE9BQU9HLE1BQU07WUFFM0IsSUFBSSxDQUFDYyxTQUFTO2dCQUNaLE9BQU9SLFFBQVE7WUFDakI7WUFFQSw2RUFBNkU7WUFDN0UsTUFBTVMscUJBQXFCQyxXQUFXO2dCQUNwQyxJQUFJSixXQUFXQSxVQUFVLEdBQUc7b0JBQzFCTixRQUFRO2dCQUNWO1lBQ0YsR0FBR007WUFFSCwwRUFBMEU7WUFDMUVmLE9BQU9vQixPQUFPLENBQUNDLENBQUFBO2dCQUNiLEtBQUt4QixvRUFBbUJBLENBQUN3QixNQUFNUixJQUFJLENBQUM7b0JBQ2xDLElBQUksQ0FBQyxFQUFFSSxTQUFTO3dCQUNkSyxhQUFhSjt3QkFDYlQsUUFBUTtvQkFDVjtnQkFDRixHQUFHTztZQUNMO1FBQ0Y7SUFDRjtJQUVBLE9BQU87UUFDTE8sR0FBR3ZCO1FBQ0hVO1FBQ0FJO0lBQ0Y7QUFDRjtBQUU2QixDQUM3Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvcHJvbWlzZWJ1ZmZlci5qcz9hYmUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbnRyeUVycm9yIH0gZnJvbSAnLi9lcnJvci5qcyc7XG5pbXBvcnQgeyByZWplY3RlZFN5bmNQcm9taXNlLCBTeW5jUHJvbWlzZSwgcmVzb2x2ZWRTeW5jUHJvbWlzZSB9IGZyb20gJy4vc3luY3Byb21pc2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbmV3IFByb21pc2VCdWZmZXIgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBsaW1pdFxuICogQHBhcmFtIGxpbWl0IG1heCBudW1iZXIgb2YgcHJvbWlzZXMgdGhhdCBjYW4gYmUgc3RvcmVkIGluIHRoZSBidWZmZXJcbiAqL1xuZnVuY3Rpb24gbWFrZVByb21pc2VCdWZmZXIobGltaXQpIHtcbiAgY29uc3QgYnVmZmVyID0gW107XG5cbiAgZnVuY3Rpb24gaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gbGltaXQgPT09IHVuZGVmaW5lZCB8fCBidWZmZXIubGVuZ3RoIDwgbGltaXQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgcHJvbWlzZSBmcm9tIHRoZSBxdWV1ZS5cbiAgICpcbiAgICogQHBhcmFtIHRhc2sgQ2FuIGJlIGFueSBQcm9taXNlTGlrZTxUPlxuICAgKiBAcmV0dXJucyBSZW1vdmVkIHByb21pc2UuXG4gICAqL1xuICBmdW5jdGlvbiByZW1vdmUodGFzaykge1xuICAgIHJldHVybiBidWZmZXIuc3BsaWNlKGJ1ZmZlci5pbmRleE9mKHRhc2spLCAxKVswXSB8fCBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBwcm9taXNlIChyZXByZXNlbnRpbmcgYW4gaW4tZmxpZ2h0IGFjdGlvbikgdG8gdGhlIHF1ZXVlLCBhbmQgc2V0IGl0IHRvIHJlbW92ZSBpdHNlbGYgb24gZnVsZmlsbG1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB0YXNrUHJvZHVjZXIgQSBmdW5jdGlvbiBwcm9kdWNpbmcgYW55IFByb21pc2VMaWtlPFQ+OyBJbiBwcmV2aW91cyB2ZXJzaW9ucyB0aGlzIHVzZWQgdG8gYmUgYHRhc2s6XG4gICAqICAgICAgICBQcm9taXNlTGlrZTxUPmAsIGJ1dCB1bmRlciB0aGF0IG1vZGVsLCBQcm9taXNlcyB3ZXJlIGluc3RhbnRseSBjcmVhdGVkIG9uIHRoZSBjYWxsLXNpdGUgYW5kIHRoZWlyIGV4ZWN1dG9yXG4gICAqICAgICAgICBmdW5jdGlvbnMgdGhlcmVmb3JlIHJhbiBpbW1lZGlhdGVseS4gVGh1cywgZXZlbiBpZiB0aGUgYnVmZmVyIHdhcyBmdWxsLCB0aGUgYWN0aW9uIHN0aWxsIGhhcHBlbmVkLiBCeVxuICAgKiAgICAgICAgcmVxdWlyaW5nIHRoZSBwcm9taXNlIHRvIGJlIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiwgd2UgY2FuIGRlZmVyIHByb21pc2UgY3JlYXRpb24gdW50aWwgYWZ0ZXIgdGhlIGJ1ZmZlclxuICAgKiAgICAgICAgbGltaXQgY2hlY2suXG4gICAqIEByZXR1cm5zIFRoZSBvcmlnaW5hbCBwcm9taXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gYWRkKHRhc2tQcm9kdWNlcikge1xuICAgIGlmICghaXNSZWFkeSgpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRTeW5jUHJvbWlzZShuZXcgU2VudHJ5RXJyb3IoJ05vdCBhZGRpbmcgUHJvbWlzZSBiZWNhdXNlIGJ1ZmZlciBsaW1pdCB3YXMgcmVhY2hlZC4nKSk7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQgdGhlIHRhc2sgYW5kIGFkZCBpdHMgcHJvbWlzZSB0byB0aGUgcXVldWVcbiAgICBjb25zdCB0YXNrID0gdGFza1Byb2R1Y2VyKCk7XG4gICAgaWYgKGJ1ZmZlci5pbmRleE9mKHRhc2spID09PSAtMSkge1xuICAgICAgYnVmZmVyLnB1c2godGFzayk7XG4gICAgfVxuICAgIHZvaWQgdGFza1xuICAgICAgLnRoZW4oKCkgPT4gcmVtb3ZlKHRhc2spKVxuICAgICAgLy8gVXNlIGB0aGVuKG51bGwsIHJlamVjdGlvbkhhbmRsZXIpYCByYXRoZXIgdGhhbiBgY2F0Y2gocmVqZWN0aW9uSGFuZGxlcilgIHNvIHRoYXQgd2UgY2FuIHVzZSBgUHJvbWlzZUxpa2VgXG4gICAgICAvLyByYXRoZXIgdGhhbiBgUHJvbWlzZWAuIGBQcm9taXNlTGlrZWAgZG9lc24ndCBoYXZlIGEgYC5jYXRjaGAgbWV0aG9kLCBtYWtpbmcgaXRzIHBvbHlmaWxsIHNtYWxsZXIuIChFUzUgZGlkbid0XG4gICAgICAvLyBoYXZlIHByb21pc2VzLCBzbyBUUyBoYXMgdG8gcG9seWZpbGwgd2hlbiBkb3duLWNvbXBpbGluZy4pXG4gICAgICAudGhlbihudWxsLCAoKSA9PlxuICAgICAgICByZW1vdmUodGFzaykudGhlbihudWxsLCAoKSA9PiB7XG4gICAgICAgICAgLy8gV2UgaGF2ZSB0byBhZGQgYW5vdGhlciBjYXRjaCBoZXJlIGJlY2F1c2UgYHJlbW92ZSgpYCBzdGFydHMgYSBuZXcgcHJvbWlzZSBjaGFpbi5cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIHJldHVybiB0YXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXQgZm9yIGFsbCBwcm9taXNlcyBpbiB0aGUgcXVldWUgdG8gcmVzb2x2ZSBvciBmb3IgdGltZW91dCB0byBleHBpcmUsIHdoaWNoZXZlciBjb21lcyBmaXJzdC5cbiAgICpcbiAgICogQHBhcmFtIHRpbWVvdXQgVGhlIHRpbWUsIGluIG1zLCBhZnRlciB3aGljaCB0byByZXNvbHZlIHRvIGBmYWxzZWAgaWYgdGhlIHF1ZXVlIGlzIHN0aWxsIG5vbi1lbXB0eS4gUGFzc2luZyBgMGAgKG9yXG4gICAqIG5vdCBwYXNzaW5nIGFueXRoaW5nKSB3aWxsIG1ha2UgdGhlIHByb21pc2Ugd2FpdCBhcyBsb25nIGFzIGl0IHRha2VzIGZvciB0aGUgcXVldWUgdG8gZHJhaW4gYmVmb3JlIHJlc29sdmluZyB0b1xuICAgKiBgdHJ1ZWAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCB3aWxsIHJlc29sdmUgdG8gYHRydWVgIGlmIHRoZSBxdWV1ZSBpcyBhbHJlYWR5IGVtcHR5IG9yIGRyYWlucyBiZWZvcmUgdGhlIHRpbWVvdXQsIGFuZFxuICAgKiBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZnVuY3Rpb24gZHJhaW4odGltZW91dCkge1xuICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGNvdW50ZXIgPSBidWZmZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoIWNvdW50ZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdhaXQgZm9yIGB0aW1lb3V0YCBtcyBhbmQgdGhlbiByZXNvbHZlIHRvIGBmYWxzZWAgKGlmIG5vdCBjYW5jZWxsZWQgZmlyc3QpXG4gICAgICBjb25zdCBjYXB0dXJlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRpbWVvdXQgJiYgdGltZW91dCA+IDApIHtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGltZW91dCk7XG5cbiAgICAgIC8vIGlmIGFsbCBwcm9taXNlcyByZXNvbHZlIGluIHRpbWUsIGNhbmNlbCB0aGUgdGltZXIgYW5kIHJlc29sdmUgdG8gYHRydWVgXG4gICAgICBidWZmZXIuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgdm9pZCByZXNvbHZlZFN5bmNQcm9taXNlKGl0ZW0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmICghLS1jb3VudGVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FwdHVyZWRTZXRUaW1lb3V0KTtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgICQ6IGJ1ZmZlcixcbiAgICBhZGQsXG4gICAgZHJhaW4sXG4gIH07XG59XG5cbmV4cG9ydCB7IG1ha2VQcm9taXNlQnVmZmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlYnVmZmVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlNlbnRyeUVycm9yIiwicmVqZWN0ZWRTeW5jUHJvbWlzZSIsIlN5bmNQcm9taXNlIiwicmVzb2x2ZWRTeW5jUHJvbWlzZSIsIm1ha2VQcm9taXNlQnVmZmVyIiwibGltaXQiLCJidWZmZXIiLCJpc1JlYWR5IiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicmVtb3ZlIiwidGFzayIsInNwbGljZSIsImluZGV4T2YiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFkZCIsInRhc2tQcm9kdWNlciIsInB1c2giLCJ0aGVuIiwiZHJhaW4iLCJ0aW1lb3V0IiwicmVqZWN0IiwiY291bnRlciIsImNhcHR1cmVkU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJmb3JFYWNoIiwiaXRlbSIsImNsZWFyVGltZW91dCIsIiQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePropagationContext: () => (/* binding */ generatePropagationContext),\n/* harmony export */   generateSpanId: () => (/* binding */ generateSpanId),\n/* harmony export */   generateTraceId: () => (/* binding */ generateTraceId)\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n\n/**\n * Returns a new minimal propagation context.\n *\n * @deprecated Use `generateTraceId` and `generateSpanId` instead.\n */ function generatePropagationContext() {\n    return {\n        traceId: generateTraceId(),\n        spanId: generateSpanId()\n    };\n}\n/**\n * Generate a random, valid trace ID.\n */ function generateTraceId() {\n    return (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.uuid4)();\n}\n/**\n * Generate a random, valid span ID.\n */ function generateSpanId() {\n    return (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.uuid4)().substring(16);\n}\n //# sourceMappingURL=propagationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrQztBQUVsQzs7OztDQUlDLEdBQ0QsU0FBU0M7SUFDUCxPQUFPO1FBQ0xDLFNBQVNDO1FBQ1RDLFFBQVFDO0lBQ1Y7QUFDRjtBQUVBOztDQUVDLEdBQ0QsU0FBU0Y7SUFDUCxPQUFPSCwrQ0FBS0E7QUFDZDtBQUVBOztDQUVDLEdBQ0QsU0FBU0s7SUFDUCxPQUFPTCwrQ0FBS0EsR0FBR00sU0FBUyxDQUFDO0FBQzNCO0FBRXVFLENBQ3ZFLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanM/NGJjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1dWlkNCB9IGZyb20gJy4vbWlzYy5qcyc7XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBtaW5pbWFsIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBnZW5lcmF0ZVRyYWNlSWRgIGFuZCBgZ2VuZXJhdGVTcGFuSWRgIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvcGFnYXRpb25Db250ZXh0KCkge1xuICByZXR1cm4ge1xuICAgIHRyYWNlSWQ6IGdlbmVyYXRlVHJhY2VJZCgpLFxuICAgIHNwYW5JZDogZ2VuZXJhdGVTcGFuSWQoKSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSwgdmFsaWQgdHJhY2UgSUQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVHJhY2VJZCgpIHtcbiAgcmV0dXJuIHV1aWQ0KCk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20sIHZhbGlkIHNwYW4gSUQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU3BhbklkKCkge1xuICByZXR1cm4gdXVpZDQoKS5zdWJzdHJpbmcoMTYpO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVByb3BhZ2F0aW9uQ29udGV4dCwgZ2VuZXJhdGVTcGFuSWQsIGdlbmVyYXRlVHJhY2VJZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGFnYXRpb25Db250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbInV1aWQ0IiwiZ2VuZXJhdGVQcm9wYWdhdGlvbkNvbnRleHQiLCJ0cmFjZUlkIiwiZ2VuZXJhdGVUcmFjZUlkIiwic3BhbklkIiwiZ2VuZXJhdGVTcGFuSWQiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_AFTER: () => (/* binding */ DEFAULT_RETRY_AFTER),\n/* harmony export */   disabledUntil: () => (/* binding */ disabledUntil),\n/* harmony export */   isRateLimited: () => (/* binding */ isRateLimited),\n/* harmony export */   parseRetryAfterHeader: () => (/* binding */ parseRetryAfterHeader),\n/* harmony export */   updateRateLimits: () => (/* binding */ updateRateLimits)\n/* harmony export */ });\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */ function parseRetryAfterHeader(header, now = Date.now()) {\n    const headerDelay = parseInt(`${header}`, 10);\n    if (!isNaN(headerDelay)) {\n        return headerDelay * 1000;\n    }\n    const headerDate = Date.parse(`${header}`);\n    if (!isNaN(headerDate)) {\n        return headerDate - now;\n    }\n    return DEFAULT_RETRY_AFTER;\n}\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */ function disabledUntil(limits, dataCategory) {\n    return limits[dataCategory] || limits.all || 0;\n}\n/**\n * Checks if a category is rate limited\n */ function isRateLimited(limits, dataCategory, now = Date.now()) {\n    return disabledUntil(limits, dataCategory) > now;\n}\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */ function updateRateLimits(limits, { statusCode, headers }, now = Date.now()) {\n    const updatedRateLimits = {\n        ...limits\n    };\n    // \"The name is case-insensitive.\"\n    // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n    const rateLimitHeader = headers && headers[\"x-sentry-rate-limits\"];\n    const retryAfterHeader = headers && headers[\"retry-after\"];\n    if (rateLimitHeader) {\n        /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */ for (const limit of rateLimitHeader.trim().split(\",\")){\n            const [retryAfter, categories, , , namespaces] = limit.split(\":\", 5);\n            const headerDelay = parseInt(retryAfter, 10);\n            const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n            if (!categories) {\n                updatedRateLimits.all = now + delay;\n            } else {\n                for (const category of categories.split(\";\")){\n                    if (category === \"metric_bucket\") {\n                        // namespaces will be present when category === 'metric_bucket'\n                        if (!namespaces || namespaces.split(\";\").includes(\"custom\")) {\n                            updatedRateLimits[category] = now + delay;\n                        }\n                    } else {\n                        updatedRateLimits[category] = now + delay;\n                    }\n                }\n            }\n        }\n    } else if (retryAfterHeader) {\n        updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n    } else if (statusCode === 429) {\n        updatedRateLimits.all = now + 60 * 1000;\n    }\n    return updatedRateLimits;\n}\n //# sourceMappingURL=ratelimit.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/severity.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/severity.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   severityLevelFromString: () => (/* binding */ severityLevelFromString),\n/* harmony export */   validSeverityLevels: () => (/* binding */ validSeverityLevels)\n/* harmony export */ });\n/**\n * @deprecated This variable has been deprecated and will be removed in the next major version.\n */ const validSeverityLevels = [\n    \"fatal\",\n    \"error\",\n    \"warning\",\n    \"log\",\n    \"info\",\n    \"debug\"\n];\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */ function severityLevelFromString(level) {\n    return level === \"warn\" ? \"warning\" : [\n        \"fatal\",\n        \"error\",\n        \"warning\",\n        \"log\",\n        \"info\",\n        \"debug\"\n    ].includes(level) ? level : \"log\";\n}\n //# sourceMappingURL=severity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9zZXZlcml0eS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBQ0QsTUFBTUEsc0JBQXNCO0lBQUM7SUFBUztJQUFTO0lBQVc7SUFBTztJQUFRO0NBQVE7QUFFakY7Ozs7O0NBS0MsR0FDRCxTQUFTQyx3QkFBd0JDLEtBQUs7SUFDcEMsT0FDRUEsVUFBVSxTQUFTLFlBQVk7UUFBQztRQUFTO1FBQVM7UUFBVztRQUFPO1FBQVE7S0FBUSxDQUFDQyxRQUFRLENBQUNELFNBQVNBLFFBQVE7QUFFbkg7QUFFd0QsQ0FDeEQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3NldmVyaXR5LmpzPzNhZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHZhcmlhYmxlIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5jb25zdCB2YWxpZFNldmVyaXR5TGV2ZWxzID0gWydmYXRhbCcsICdlcnJvcicsICd3YXJuaW5nJywgJ2xvZycsICdpbmZvJywgJ2RlYnVnJ107XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmctYmFzZWQgbGV2ZWwgaW50byBhIGBTZXZlcml0eUxldmVsYCwgbm9ybWFsaXppbmcgaXQgYWxvbmcgdGhlIHdheS5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRlc2lyZWQgYFNldmVyaXR5TGV2ZWxgLlxuICogQHJldHVybnMgVGhlIGBTZXZlcml0eUxldmVsYCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBzdHJpbmcsIG9yICdsb2cnIGlmIHRoZSBzdHJpbmcgaXNuJ3QgYSB2YWxpZCBsZXZlbC5cbiAqL1xuZnVuY3Rpb24gc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpIHtcbiAgcmV0dXJuIChcbiAgICBsZXZlbCA9PT0gJ3dhcm4nID8gJ3dhcm5pbmcnIDogWydmYXRhbCcsICdlcnJvcicsICd3YXJuaW5nJywgJ2xvZycsICdpbmZvJywgJ2RlYnVnJ10uaW5jbHVkZXMobGV2ZWwpID8gbGV2ZWwgOiAnbG9nJ1xuICApIDtcbn1cblxuZXhwb3J0IHsgc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcsIHZhbGlkU2V2ZXJpdHlMZXZlbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldmVyaXR5LmpzLm1hcFxuIl0sIm5hbWVzIjpbInZhbGlkU2V2ZXJpdHlMZXZlbHMiLCJzZXZlcml0eUxldmVsRnJvbVN0cmluZyIsImxldmVsIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/severity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UNKNOWN_FUNCTION: () => (/* binding */ UNKNOWN_FUNCTION),\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   getFramesFromEvent: () => (/* binding */ getFramesFromEvent),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\nconst STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = \"?\";\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */ function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);\n    return (stack, skipFirstLines = 0, framesToPop = 0)=>{\n        const frames = [];\n        const lines = stack.split(\"\\n\");\n        for(let i = skipFirstLines; i < lines.length; i++){\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue;\n            }\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, \"$1\") : line;\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue;\n            }\n            for (const parser of sortedParsers){\n                const frame = parser(cleanedLine);\n                if (frame) {\n                    frames.push(frame);\n                    break;\n                }\n            }\n            if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n                break;\n            }\n        }\n        return stripSentryFramesAndReverse(frames.slice(framesToPop));\n    };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */ function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */ function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n        return [];\n    }\n    const localStack = Array.from(stack);\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(getLastStackFrame(localStack).function || \"\")) {\n        localStack.pop();\n    }\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || \"\")) {\n        localStack.pop();\n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Sentry.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Sentry` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || \"\")) {\n            localStack.pop();\n        }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({\n            ...frame,\n            filename: frame.filename || getLastStackFrame(localStack).filename,\n            function: frame.function || UNKNOWN_FUNCTION\n        }));\n}\nfunction getLastStackFrame(arr) {\n    return arr[arr.length - 1] || {};\n}\nconst defaultFunctionName = \"<anonymous>\";\n/**\n * Safely extract function name from itself\n */ function getFunctionName(fn) {\n    try {\n        if (!fn || typeof fn !== \"function\") {\n            return defaultFunctionName;\n        }\n        return fn.name || defaultFunctionName;\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        return defaultFunctionName;\n    }\n}\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */ function getFramesFromEvent(event) {\n    const exception = event.exception;\n    if (exception) {\n        const frames = [];\n        try {\n            // @ts-expect-error Object could be undefined\n            exception.values.forEach((value)=>{\n                // @ts-expect-error Value could be undefined\n                if (value.stacktrace.frames) {\n                    // @ts-expect-error Value could be undefined\n                    frames.push(...value.stacktrace.frames);\n                }\n            });\n            return frames;\n        } catch (_oO) {\n            return undefined;\n        }\n    }\n    return undefined;\n}\n //# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/string.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */ function truncate(str, max = 0) {\n    if (typeof str !== \"string\" || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */ function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n        return newLine;\n    }\n    if (colno > lineLength) {\n        // eslint-disable-next-line no-param-reassign\n        colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n        end = lineLength;\n    }\n    if (end === lineLength) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n        newLine += \" {snip}\";\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */ function safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return \"\";\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let i = 0; i < input.length; i++){\n        const value = input[i];\n        try {\n            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n            // console warnings. This happens when a Vue template is rendered with\n            // an undeclared variable, which we try to stringify, ultimately causing\n            // Vue to issue another warning which repeats indefinitely.\n            // see: https://github.com/getsentry/sentry-javascript/pull/8981\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n                output.push(\"[VueViewModel]\");\n            } else {\n                output.push(String(value));\n            }\n        } catch (e) {\n            output.push(\"[value cannot be serialized]\");\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n        return false;\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n        return pattern.test(value);\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n}\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/supports.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/supports.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNativeFunction: () => (/* binding */ isNativeFunction),\n/* harmony export */   supportsDOMError: () => (/* binding */ supportsDOMError),\n/* harmony export */   supportsDOMException: () => (/* binding */ supportsDOMException),\n/* harmony export */   supportsErrorEvent: () => (/* binding */ supportsErrorEvent),\n/* harmony export */   supportsFetch: () => (/* binding */ supportsFetch),\n/* harmony export */   supportsNativeFetch: () => (/* binding */ supportsNativeFetch),\n/* harmony export */   supportsReferrerPolicy: () => (/* binding */ supportsReferrerPolicy),\n/* harmony export */   supportsReportingObserver: () => (/* binding */ supportsReportingObserver)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\nconst WINDOW = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */ function supportsErrorEvent() {\n    try {\n        new ErrorEvent(\"\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */ function supportsDOMError() {\n    try {\n        // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n        // 1 argument required, but only 0 present.\n        // @ts-expect-error It really needs 1 argument, not 0.\n        new DOMError(\"\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */ function supportsDOMException() {\n    try {\n        new DOMException(\"\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */ function supportsFetch() {\n    if (!(\"fetch\" in WINDOW)) {\n        return false;\n    }\n    try {\n        new Headers();\n        new Request(\"http://www.example.com\");\n        new Response();\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * isNative checks if the given function is a native implementation\n */ // eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFunction(func) {\n    return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */ function supportsNativeFetch() {\n    if (typeof EdgeRuntime === \"string\") {\n        return true;\n    }\n    if (!supportsFetch()) {\n        return false;\n    }\n    // Fast path to avoid DOM I/O\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    if (isNativeFunction(WINDOW.fetch)) {\n        return true;\n    }\n    // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n    // so create a \"pure\" iframe to see if that has native fetch\n    let result = false;\n    const doc = WINDOW.document;\n    // eslint-disable-next-line deprecation/deprecation\n    if (doc && typeof doc.createElement === \"function\") {\n        try {\n            const sandbox = doc.createElement(\"iframe\");\n            sandbox.hidden = true;\n            doc.head.appendChild(sandbox);\n            if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                result = isNativeFunction(sandbox.contentWindow.fetch);\n            }\n            doc.head.removeChild(sandbox);\n        } catch (err) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Could not create sandbox iframe for pure fetch check, bailing to window.fetch: \", err);\n        }\n    }\n    return result;\n}\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */ function supportsReportingObserver() {\n    return \"ReportingObserver\" in WINDOW;\n}\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */ function supportsReferrerPolicy() {\n    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n    // (see https://caniuse.com/#feat=referrer-policy),\n    // it doesn't. And it throws an exception instead of ignoring this parameter...\n    // REF: https://github.com/getsentry/raven-js/issues/1233\n    if (!supportsFetch()) {\n        return false;\n    }\n    try {\n        new Request(\"_\", {\n            referrerPolicy: \"origin\"\n        });\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n //# sourceMappingURL=supports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncPromise: () => (/* binding */ SyncPromise),\n/* harmony export */   rejectedSyncPromise: () => (/* binding */ rejectedSyncPromise),\n/* harmony export */   resolvedSyncPromise: () => (/* binding */ resolvedSyncPromise)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable @typescript-eslint/no-explicit-any */ /** SyncPromise internal states */ var States;\n(function(States) {\n    /** Pending */ const PENDING = 0;\n    States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n    /** Resolved / OK */ const RESOLVED = 1;\n    States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n    /** Rejected / Error */ const REJECTED = 2;\n    States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */ function resolvedSyncPromise(value) {\n    return new SyncPromise((resolve)=>{\n        resolve(value);\n    });\n}\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */ function rejectedSyncPromise(reason) {\n    return new SyncPromise((_, reject)=>{\n        reject(reason);\n    });\n}\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */ class SyncPromise {\n    constructor(executor){\n        SyncPromise.prototype.__init.call(this);\n        SyncPromise.prototype.__init2.call(this);\n        SyncPromise.prototype.__init3.call(this);\n        SyncPromise.prototype.__init4.call(this);\n        this._state = States.PENDING;\n        this._handlers = [];\n        try {\n            executor(this._resolve, this._reject);\n        } catch (e) {\n            this._reject(e);\n        }\n    }\n    /** JSDoc */ then(onfulfilled, onrejected) {\n        return new SyncPromise((resolve, reject)=>{\n            this._handlers.push([\n                false,\n                (result)=>{\n                    if (!onfulfilled) {\n                        // TODO: ¯\\_(ツ)_/¯\n                        // TODO: FIXME\n                        resolve(result);\n                    } else {\n                        try {\n                            resolve(onfulfilled(result));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                },\n                (reason)=>{\n                    if (!onrejected) {\n                        reject(reason);\n                    } else {\n                        try {\n                            resolve(onrejected(reason));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                }\n            ]);\n            this._executeHandlers();\n        });\n    }\n    /** JSDoc */ catch(onrejected) {\n        return this.then((val)=>val, onrejected);\n    }\n    /** JSDoc */ finally(onfinally) {\n        return new SyncPromise((resolve, reject)=>{\n            let val;\n            let isRejected;\n            return this.then((value)=>{\n                isRejected = false;\n                val = value;\n                if (onfinally) {\n                    onfinally();\n                }\n            }, (reason)=>{\n                isRejected = true;\n                val = reason;\n                if (onfinally) {\n                    onfinally();\n                }\n            }).then(()=>{\n                if (isRejected) {\n                    reject(val);\n                    return;\n                }\n                resolve(val);\n            });\n        });\n    }\n    /** JSDoc */ __init() {\n        this._resolve = (value)=>{\n            this._setResult(States.RESOLVED, value);\n        };\n    }\n    /** JSDoc */ __init2() {\n        this._reject = (reason)=>{\n            this._setResult(States.REJECTED, reason);\n        };\n    }\n    /** JSDoc */ __init3() {\n        this._setResult = (state, value)=>{\n            if (this._state !== States.PENDING) {\n                return;\n            }\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(value)) {\n                void value.then(this._resolve, this._reject);\n                return;\n            }\n            this._state = state;\n            this._value = value;\n            this._executeHandlers();\n        };\n    }\n    /** JSDoc */ __init4() {\n        this._executeHandlers = ()=>{\n            if (this._state === States.PENDING) {\n                return;\n            }\n            const cachedHandlers = this._handlers.slice();\n            this._handlers = [];\n            cachedHandlers.forEach((handler)=>{\n                if (handler[0]) {\n                    return;\n                }\n                if (this._state === States.RESOLVED) {\n                    handler[1](this._value);\n                }\n                if (this._state === States.REJECTED) {\n                    handler[2](this._value);\n                }\n                handler[0] = true;\n            });\n        };\n    }\n}\n //# sourceMappingURL=syncpromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/time.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _browserPerformanceTimeOriginMode: () => (/* binding */ _browserPerformanceTimeOriginMode),\n/* harmony export */   browserPerformanceTimeOrigin: () => (/* binding */ browserPerformanceTimeOrigin),\n/* harmony export */   dateTimestampInSeconds: () => (/* binding */ dateTimestampInSeconds),\n/* harmony export */   timestampInSeconds: () => (/* binding */ timestampInSeconds)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\nconst ONE_SECOND_IN_MS = 1000;\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */ /**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n *\n * TODO(v8): Return type should be rounded.\n */ function dateTimestampInSeconds() {\n    return Date.now() / ONE_SECOND_IN_MS;\n}\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */ function createUnixTimestampInSecondsFunc() {\n    const { performance } = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    if (!performance || !performance.now) {\n        return dateTimestampInSeconds;\n    }\n    // Some browser and environments don't have a timeOrigin, so we fallback to\n    // using Date.now() to compute the starting time.\n    const approxStartingTimeOrigin = Date.now() - performance.now();\n    const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n    // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n    // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n    //\n    // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n    // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n    // correct for this.\n    // See: https://github.com/getsentry/sentry-javascript/issues/2590\n    // See: https://github.com/mdn/content/issues/4713\n    // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n    return ()=>{\n        return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n    };\n}\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */ const timestampInSeconds = createUnixTimestampInSecondsFunc();\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n *\n * @deprecated This variable will be removed in the next major version.\n */ let _browserPerformanceTimeOriginMode;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */ const browserPerformanceTimeOrigin = (()=>{\n    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n    // data as reliable if they are within a reasonable threshold of the current time.\n    const { performance } = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    if (!performance || !performance.now) {\n        // eslint-disable-next-line deprecation/deprecation\n        _browserPerformanceTimeOriginMode = \"none\";\n        return undefined;\n    }\n    const threshold = 3600 * 1000;\n    const performanceNow = performance.now();\n    const dateNow = Date.now();\n    // if timeOrigin isn't available set delta to threshold so it isn't used\n    const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n    const timeOriginIsReliable = timeOriginDelta < threshold;\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    const navigationStart = performance.timing && performance.timing.navigationStart;\n    const hasNavigationStart = typeof navigationStart === \"number\";\n    // if navigationStart isn't available set delta to threshold so it isn't used\n    const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n    const navigationStartIsReliable = navigationStartDelta < threshold;\n    if (timeOriginIsReliable || navigationStartIsReliable) {\n        // Use the more reliable time origin\n        if (timeOriginDelta <= navigationStartDelta) {\n            // eslint-disable-next-line deprecation/deprecation\n            _browserPerformanceTimeOriginMode = \"timeOrigin\";\n            return performance.timeOrigin;\n        } else {\n            // eslint-disable-next-line deprecation/deprecation\n            _browserPerformanceTimeOriginMode = \"navigationStart\";\n            return navigationStart;\n        }\n    }\n    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n    // eslint-disable-next-line deprecation/deprecation\n    _browserPerformanceTimeOriginMode = \"dateNow\";\n    return dateNow;\n})();\n //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC90aW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRDO0FBRTVDLE1BQU1DLG1CQUFtQjtBQUV6Qjs7O0NBR0MsR0FFRDs7OztDQUlDLEdBQ0QsU0FBU0M7SUFDUCxPQUFPQyxLQUFLQyxHQUFHLEtBQUtIO0FBQ3RCO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTSTtJQUNQLE1BQU0sRUFBRUMsV0FBVyxFQUFFLEdBQUdOLHFEQUFVQTtJQUNsQyxJQUFJLENBQUNNLGVBQWUsQ0FBQ0EsWUFBWUYsR0FBRyxFQUFFO1FBQ3BDLE9BQU9GO0lBQ1Q7SUFFQSwyRUFBMkU7SUFDM0UsaURBQWlEO0lBQ2pELE1BQU1LLDJCQUEyQkosS0FBS0MsR0FBRyxLQUFLRSxZQUFZRixHQUFHO0lBQzdELE1BQU1JLGFBQWFGLFlBQVlFLFVBQVUsSUFBSUMsWUFBWUYsMkJBQTJCRCxZQUFZRSxVQUFVO0lBRTFHLGlIQUFpSDtJQUNqSCxpSEFBaUg7SUFDakgsRUFBRTtJQUNGLG1IQUFtSDtJQUNuSCxpSEFBaUg7SUFDakgsb0JBQW9CO0lBQ3BCLGtFQUFrRTtJQUNsRSxrREFBa0Q7SUFDbEQsd0VBQXdFO0lBQ3hFLE9BQU87UUFDTCxPQUFPLENBQUNBLGFBQWFGLFlBQVlGLEdBQUcsRUFBQyxJQUFLSDtJQUM1QztBQUNGO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRCxNQUFNUyxxQkFBcUJMO0FBRTNCOzs7O0NBSUMsR0FDRCxJQUFJTTtBQUVKOzs7Q0FHQyxHQUNELE1BQU1DLCtCQUErQixDQUFDO0lBQ3BDLDZHQUE2RztJQUM3RyxtSEFBbUg7SUFDbkgsa0ZBQWtGO0lBRWxGLE1BQU0sRUFBRU4sV0FBVyxFQUFFLEdBQUdOLHFEQUFVQTtJQUNsQyxJQUFJLENBQUNNLGVBQWUsQ0FBQ0EsWUFBWUYsR0FBRyxFQUFFO1FBQ3BDLG1EQUFtRDtRQUNuRE8sb0NBQW9DO1FBQ3BDLE9BQU9GO0lBQ1Q7SUFFQSxNQUFNSSxZQUFZLE9BQU87SUFDekIsTUFBTUMsaUJBQWlCUixZQUFZRixHQUFHO0lBQ3RDLE1BQU1XLFVBQVVaLEtBQUtDLEdBQUc7SUFFeEIsd0VBQXdFO0lBQ3hFLE1BQU1ZLGtCQUFrQlYsWUFBWUUsVUFBVSxHQUMxQ1MsS0FBS0MsR0FBRyxDQUFDWixZQUFZRSxVQUFVLEdBQUdNLGlCQUFpQkMsV0FDbkRGO0lBQ0osTUFBTU0sdUJBQXVCSCxrQkFBa0JIO0lBRS9DLG9IQUFvSDtJQUNwSCxtR0FBbUc7SUFDbkcscUhBQXFIO0lBQ3JILHFIQUFxSDtJQUNySCxZQUFZO0lBQ1osbURBQW1EO0lBQ25ELE1BQU1PLGtCQUFrQmQsWUFBWWUsTUFBTSxJQUFJZixZQUFZZSxNQUFNLENBQUNELGVBQWU7SUFDaEYsTUFBTUUscUJBQXFCLE9BQU9GLG9CQUFvQjtJQUN0RCw2RUFBNkU7SUFDN0UsTUFBTUcsdUJBQXVCRCxxQkFBcUJMLEtBQUtDLEdBQUcsQ0FBQ0Usa0JBQWtCTixpQkFBaUJDLFdBQVdGO0lBQ3pHLE1BQU1XLDRCQUE0QkQsdUJBQXVCVjtJQUV6RCxJQUFJTSx3QkFBd0JLLDJCQUEyQjtRQUNyRCxvQ0FBb0M7UUFDcEMsSUFBSVIsbUJBQW1CTyxzQkFBc0I7WUFDM0MsbURBQW1EO1lBQ25EWixvQ0FBb0M7WUFDcEMsT0FBT0wsWUFBWUUsVUFBVTtRQUMvQixPQUFPO1lBQ0wsbURBQW1EO1lBQ25ERyxvQ0FBb0M7WUFDcEMsT0FBT1M7UUFDVDtJQUNGO0lBRUEsbUdBQW1HO0lBQ25HLG1EQUFtRDtJQUNuRFQsb0NBQW9DO0lBQ3BDLE9BQU9JO0FBQ1Q7QUFFdUgsQ0FDdkgsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3RpbWUuanM/ZDNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi93b3JsZHdpZGUuanMnO1xuXG5jb25zdCBPTkVfU0VDT05EX0lOX01TID0gMTAwMDtcblxuLyoqXG4gKiBBIHBhcnRpYWwgZGVmaW5pdGlvbiBvZiB0aGUgW1BlcmZvcm1hbmNlIFdlYiBBUElde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QZXJmb3JtYW5jZX1cbiAqIGZvciBhY2Nlc3NpbmcgYSBoaWdoLXJlc29sdXRpb24gbW9ub3RvbmljIGNsb2NrLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoIHVzaW5nIHRoZSBEYXRlIEFQSS5cbiAqXG4gKiBUT0RPKHY4KTogUmV0dXJuIHR5cGUgc2hvdWxkIGJlIHJvdW5kZWQuXG4gKi9cbmZ1bmN0aW9uIGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSB7XG4gIHJldHVybiBEYXRlLm5vdygpIC8gT05FX1NFQ09ORF9JTl9NUztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBQZXJmb3JtYW5jZSBBUEkgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiwgb3IgdW5kZWZpbmVkIGZvciBicm93c2VycyB0aGF0IGRvIG5vdFxuICogc3VwcG9ydCB0aGUgQVBJLlxuICpcbiAqIFdyYXBwaW5nIHRoZSBuYXRpdmUgQVBJIHdvcmtzIGFyb3VuZCBkaWZmZXJlbmNlcyBpbiBiZWhhdmlvciBmcm9tIGRpZmZlcmVudCBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVW5peFRpbWVzdGFtcEluU2Vjb25kc0Z1bmMoKSB7XG4gIGNvbnN0IHsgcGVyZm9ybWFuY2UgfSA9IEdMT0JBTF9PQkogO1xuICBpZiAoIXBlcmZvcm1hbmNlIHx8ICFwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICByZXR1cm4gZGF0ZVRpbWVzdGFtcEluU2Vjb25kcztcbiAgfVxuXG4gIC8vIFNvbWUgYnJvd3NlciBhbmQgZW52aXJvbm1lbnRzIGRvbid0IGhhdmUgYSB0aW1lT3JpZ2luLCBzbyB3ZSBmYWxsYmFjayB0b1xuICAvLyB1c2luZyBEYXRlLm5vdygpIHRvIGNvbXB1dGUgdGhlIHN0YXJ0aW5nIHRpbWUuXG4gIGNvbnN0IGFwcHJveFN0YXJ0aW5nVGltZU9yaWdpbiA9IERhdGUubm93KCkgLSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgY29uc3QgdGltZU9yaWdpbiA9IHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gPT0gdW5kZWZpbmVkID8gYXBwcm94U3RhcnRpbmdUaW1lT3JpZ2luIDogcGVyZm9ybWFuY2UudGltZU9yaWdpbjtcblxuICAvLyBwZXJmb3JtYW5jZS5ub3coKSBpcyBhIG1vbm90b25pYyBjbG9jaywgd2hpY2ggbWVhbnMgaXQgc3RhcnRzIGF0IDAgd2hlbiB0aGUgcHJvY2VzcyBiZWdpbnMuIFRvIGdldCB0aGUgY3VycmVudFxuICAvLyB3YWxsIGNsb2NrIHRpbWUgKGFjdHVhbCBVTklYIHRpbWVzdGFtcCksIHdlIG5lZWQgdG8gYWRkIHRoZSBzdGFydGluZyB0aW1lIG9yaWdpbiBhbmQgdGhlIGN1cnJlbnQgdGltZSBlbGFwc2VkLlxuICAvL1xuICAvLyBUT0RPOiBUaGlzIGRvZXMgbm90IGFjY291bnQgZm9yIHRoZSBjYXNlIHdoZXJlIHRoZSBtb25vdG9uaWMgY2xvY2sgdGhhdCBwb3dlcnMgcGVyZm9ybWFuY2Uubm93KCkgZHJpZnRzIGZyb20gdGhlXG4gIC8vIHdhbGwgY2xvY2sgdGltZSwgd2hpY2ggY2F1c2VzIHRoZSByZXR1cm5lZCB0aW1lc3RhbXAgdG8gYmUgaW5hY2N1cmF0ZS4gV2Ugc2hvdWxkIGludmVzdGlnYXRlIGhvdyB0byBkZXRlY3QgYW5kXG4gIC8vIGNvcnJlY3QgZm9yIHRoaXMuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZG4vY29udGVudC9pc3N1ZXMvNDcxM1xuICAvLyBTZWU6IGh0dHBzOi8vZGV2LnRvL25vYW1yL3doZW4tYS1taWxsaXNlY29uZC1pcy1ub3QtYS1taWxsaXNlY29uZC0zaDZcbiAgcmV0dXJuICgpID0+IHtcbiAgICByZXR1cm4gKHRpbWVPcmlnaW4gKyBwZXJmb3JtYW5jZS5ub3coKSkgLyBPTkVfU0VDT05EX0lOX01TO1xuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB0aW1lc3RhbXAgaW4gc2Vjb25kcyBzaW5jZSB0aGUgVU5JWCBlcG9jaCB1c2luZyBlaXRoZXIgdGhlIFBlcmZvcm1hbmNlIG9yIERhdGUgQVBJcywgZGVwZW5kaW5nIG9uIHRoZVxuICogYXZhaWxhYmlsaXR5IG9mIHRoZSBQZXJmb3JtYW5jZSBBUEkuXG4gKlxuICogQlVHOiBOb3RlIHRoYXQgYmVjYXVzZSBvZiBob3cgYnJvd3NlcnMgaW1wbGVtZW50IHRoZSBQZXJmb3JtYW5jZSBBUEksIHRoZSBjbG9jayBtaWdodCBzdG9wIHdoZW4gdGhlIGNvbXB1dGVyIGlzXG4gKiBhc2xlZXAuIFRoaXMgY3JlYXRlcyBhIHNrZXcgYmV0d2VlbiBgZGF0ZVRpbWVzdGFtcEluU2Vjb25kc2AgYW5kIGB0aW1lc3RhbXBJblNlY29uZHNgLiBUaGVcbiAqIHNrZXcgY2FuIGdyb3cgdG8gYXJiaXRyYXJ5IGFtb3VudHMgbGlrZSBkYXlzLCB3ZWVrcyBvciBtb250aHMuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAqL1xuY29uc3QgdGltZXN0YW1wSW5TZWNvbmRzID0gY3JlYXRlVW5peFRpbWVzdGFtcEluU2Vjb25kc0Z1bmMoKTtcblxuLyoqXG4gKiBJbnRlcm5hbCBoZWxwZXIgdG8gc3RvcmUgd2hhdCBpcyB0aGUgc291cmNlIG9mIGJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW4gYmVsb3cuIEZvciBkZWJ1Z2dpbmcgb25seS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHZhcmlhYmxlIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5sZXQgX2Jyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW5Nb2RlO1xuXG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoLiBUaGlzIHZhbHVlIGlzIG9ubHkgdXNhYmxlIGluIGEgYnJvd3NlciwgYW5kIG9ubHkgd2hlbiB0aGVcbiAqIHBlcmZvcm1hbmNlIEFQSSBpcyBhdmFpbGFibGUuXG4gKi9cbmNvbnN0IGJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW4gPSAoKCkgPT4ge1xuICAvLyBVbmZvcnR1bmF0ZWx5IGJyb3dzZXJzIG1heSByZXBvcnQgYW4gaW5hY2N1cmF0ZSB0aW1lIG9yaWdpbiBkYXRhLCB0aHJvdWdoIGVpdGhlciBwZXJmb3JtYW5jZS50aW1lT3JpZ2luIG9yXG4gIC8vIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQsIHdoaWNoIHJlc3VsdHMgaW4gcG9vciByZXN1bHRzIGluIHBlcmZvcm1hbmNlIGRhdGEuIFdlIG9ubHkgdHJlYXQgdGltZSBvcmlnaW5cbiAgLy8gZGF0YSBhcyByZWxpYWJsZSBpZiB0aGV5IGFyZSB3aXRoaW4gYSByZWFzb25hYmxlIHRocmVzaG9sZCBvZiB0aGUgY3VycmVudCB0aW1lLlxuXG4gIGNvbnN0IHsgcGVyZm9ybWFuY2UgfSA9IEdMT0JBTF9PQkogO1xuICBpZiAoIXBlcmZvcm1hbmNlIHx8ICFwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBfYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbk1vZGUgPSAnbm9uZSc7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHRocmVzaG9sZCA9IDM2MDAgKiAxMDAwO1xuICBjb25zdCBwZXJmb3JtYW5jZU5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICBjb25zdCBkYXRlTm93ID0gRGF0ZS5ub3coKTtcblxuICAvLyBpZiB0aW1lT3JpZ2luIGlzbid0IGF2YWlsYWJsZSBzZXQgZGVsdGEgdG8gdGhyZXNob2xkIHNvIGl0IGlzbid0IHVzZWRcbiAgY29uc3QgdGltZU9yaWdpbkRlbHRhID0gcGVyZm9ybWFuY2UudGltZU9yaWdpblxuICAgID8gTWF0aC5hYnMocGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlTm93IC0gZGF0ZU5vdylcbiAgICA6IHRocmVzaG9sZDtcbiAgY29uc3QgdGltZU9yaWdpbklzUmVsaWFibGUgPSB0aW1lT3JpZ2luRGVsdGEgPCB0aHJlc2hvbGQ7XG5cbiAgLy8gV2hpbGUgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4sIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW5cbiAgLy8gaXMgbm90IGFzIHdpZGVseSBzdXBwb3J0ZWQuIE5hbWVseSwgcGVyZm9ybWFuY2UudGltZU9yaWdpbiBpcyB1bmRlZmluZWQgaW4gU2FmYXJpIGFzIG9mIHdyaXRpbmcuXG4gIC8vIEFsc28gYXMgb2Ygd3JpdGluZywgcGVyZm9ybWFuY2UudGltaW5nIGlzIG5vdCBhdmFpbGFibGUgaW4gV2ViIFdvcmtlcnMgaW4gbWFpbnN0cmVhbSBicm93c2Vycywgc28gaXQgaXMgbm90IGFsd2F5c1xuICAvLyBhIHZhbGlkIGZhbGxiYWNrLiBJbiB0aGUgYWJzZW5jZSBvZiBhbiBpbml0aWFsIHRpbWUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIsIGZhbGxiYWNrIHRvIHRoZSBjdXJyZW50IHRpbWUgZnJvbSB0aGVcbiAgLy8gRGF0ZSBBUEkuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBjb25zdCBuYXZpZ2F0aW9uU3RhcnQgPSBwZXJmb3JtYW5jZS50aW1pbmcgJiYgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydDtcbiAgY29uc3QgaGFzTmF2aWdhdGlvblN0YXJ0ID0gdHlwZW9mIG5hdmlnYXRpb25TdGFydCA9PT0gJ251bWJlcic7XG4gIC8vIGlmIG5hdmlnYXRpb25TdGFydCBpc24ndCBhdmFpbGFibGUgc2V0IGRlbHRhIHRvIHRocmVzaG9sZCBzbyBpdCBpc24ndCB1c2VkXG4gIGNvbnN0IG5hdmlnYXRpb25TdGFydERlbHRhID0gaGFzTmF2aWdhdGlvblN0YXJ0ID8gTWF0aC5hYnMobmF2aWdhdGlvblN0YXJ0ICsgcGVyZm9ybWFuY2VOb3cgLSBkYXRlTm93KSA6IHRocmVzaG9sZDtcbiAgY29uc3QgbmF2aWdhdGlvblN0YXJ0SXNSZWxpYWJsZSA9IG5hdmlnYXRpb25TdGFydERlbHRhIDwgdGhyZXNob2xkO1xuXG4gIGlmICh0aW1lT3JpZ2luSXNSZWxpYWJsZSB8fCBuYXZpZ2F0aW9uU3RhcnRJc1JlbGlhYmxlKSB7XG4gICAgLy8gVXNlIHRoZSBtb3JlIHJlbGlhYmxlIHRpbWUgb3JpZ2luXG4gICAgaWYgKHRpbWVPcmlnaW5EZWx0YSA8PSBuYXZpZ2F0aW9uU3RhcnREZWx0YSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBfYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbk1vZGUgPSAndGltZU9yaWdpbic7XG4gICAgICByZXR1cm4gcGVyZm9ybWFuY2UudGltZU9yaWdpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBfYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbk1vZGUgPSAnbmF2aWdhdGlvblN0YXJ0JztcbiAgICAgIHJldHVybiBuYXZpZ2F0aW9uU3RhcnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRWl0aGVyIGJvdGggdGltZU9yaWdpbiBhbmQgbmF2aWdhdGlvblN0YXJ0IGFyZSBza2V3ZWQgb3IgbmVpdGhlciBpcyBhdmFpbGFibGUsIGZhbGxiYWNrIHRvIERhdGUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBfYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbk1vZGUgPSAnZGF0ZU5vdyc7XG4gIHJldHVybiBkYXRlTm93O1xufSkoKTtcblxuZXhwb3J0IHsgX2Jyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW5Nb2RlLCBicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luLCBkYXRlVGltZXN0YW1wSW5TZWNvbmRzLCB0aW1lc3RhbXBJblNlY29uZHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWUuanMubWFwXG4iXSwibmFtZXMiOlsiR0xPQkFMX09CSiIsIk9ORV9TRUNPTkRfSU5fTVMiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwiRGF0ZSIsIm5vdyIsImNyZWF0ZVVuaXhUaW1lc3RhbXBJblNlY29uZHNGdW5jIiwicGVyZm9ybWFuY2UiLCJhcHByb3hTdGFydGluZ1RpbWVPcmlnaW4iLCJ0aW1lT3JpZ2luIiwidW5kZWZpbmVkIiwidGltZXN0YW1wSW5TZWNvbmRzIiwiX2Jyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW5Nb2RlIiwiYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbiIsInRocmVzaG9sZCIsInBlcmZvcm1hbmNlTm93IiwiZGF0ZU5vdyIsInRpbWVPcmlnaW5EZWx0YSIsIk1hdGgiLCJhYnMiLCJ0aW1lT3JpZ2luSXNSZWxpYWJsZSIsIm5hdmlnYXRpb25TdGFydCIsInRpbWluZyIsImhhc05hdmlnYXRpb25TdGFydCIsIm5hdmlnYXRpb25TdGFydERlbHRhIiwibmF2aWdhdGlvblN0YXJ0SXNSZWxpYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACEPARENT_REGEXP: () => (/* binding */ TRACEPARENT_REGEXP),\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   generateSentryTraceHeader: () => (/* binding */ generateSentryTraceHeader),\n/* harmony export */   propagationContextFromHeaders: () => (/* binding */ propagationContextFromHeaders)\n/* harmony export */ });\n/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n/* harmony import */ var _propagationContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./propagationContext.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp(\"^[ \\\\t]*\" + // whitespace\n\"([0-9a-f]{32})?\" + // trace_id\n\"-?([0-9a-f]{16})?\" + // span_id\n\"-?([01])?\" + // sampled\n\"[ \\\\t]*$\");\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */ function extractTraceparentData(traceparent) {\n    if (!traceparent) {\n        return undefined;\n    }\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (!matches) {\n        return undefined;\n    }\n    let parentSampled;\n    if (matches[3] === \"1\") {\n        parentSampled = true;\n    } else if (matches[3] === \"0\") {\n        parentSampled = false;\n    }\n    return {\n        traceId: matches[1],\n        parentSampled,\n        parentSpanId: matches[2]\n    };\n}\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */ function propagationContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n    if (!traceparentData || !traceparentData.traceId) {\n        return {\n            traceId: (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateTraceId)(),\n            spanId: (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateSpanId)()\n        };\n    }\n    const { traceId, parentSpanId, parentSampled } = traceparentData;\n    const virtualSpanId = (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateSpanId)();\n    return {\n        traceId,\n        parentSpanId,\n        spanId: virtualSpanId,\n        sampled: parentSampled,\n        dsc: dynamicSamplingContext || {}\n    };\n}\n/**\n * Create sentry-trace header from span context values.\n */ function generateSentryTraceHeader(traceId = (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateTraceId)(), spanId = (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateSpanId)(), sampled) {\n    let sampledString = \"\";\n    if (sampled !== undefined) {\n        sampledString = sampled ? \"-1\" : \"-0\";\n    }\n    return `${traceId}-${spanId}${sampledString}`;\n}\n //# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC90cmFjaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRTtBQUNLO0FBRTFFLDZHQUE2RztBQUM3RyxNQUFNRyxxQkFBcUIsSUFBSUMsT0FDN0IsYUFBYSxhQUFhO0FBQ3hCLG9CQUFvQixXQUFXO0FBQy9CLHNCQUFzQixVQUFVO0FBQ2hDLGNBQWMsVUFBVTtBQUN4QjtBQUdKOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLHVCQUF1QkMsV0FBVztJQUN6QyxJQUFJLENBQUNBLGFBQWE7UUFDaEIsT0FBT0M7SUFDVDtJQUVBLE1BQU1DLFVBQVVGLFlBQVlHLEtBQUssQ0FBQ047SUFDbEMsSUFBSSxDQUFDSyxTQUFTO1FBQ1osT0FBT0Q7SUFDVDtJQUVBLElBQUlHO0lBQ0osSUFBSUYsT0FBTyxDQUFDLEVBQUUsS0FBSyxLQUFLO1FBQ3RCRSxnQkFBZ0I7SUFDbEIsT0FBTyxJQUFJRixPQUFPLENBQUMsRUFBRSxLQUFLLEtBQUs7UUFDN0JFLGdCQUFnQjtJQUNsQjtJQUVBLE9BQU87UUFDTEMsU0FBU0gsT0FBTyxDQUFDLEVBQUU7UUFDbkJFO1FBQ0FFLGNBQWNKLE9BQU8sQ0FBQyxFQUFFO0lBQzFCO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDRCxTQUFTSyw4QkFDUEMsV0FBVyxFQUNYQyxPQUFPO0lBRVAsTUFBTUMsa0JBQWtCWCx1QkFBdUJTO0lBQy9DLE1BQU1HLHlCQUF5QmpCLGtGQUFxQ0EsQ0FBQ2U7SUFFckUsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0EsZ0JBQWdCTCxPQUFPLEVBQUU7UUFDaEQsT0FBTztZQUFFQSxTQUFTVix1RUFBZUE7WUFBSWlCLFFBQVFoQixzRUFBY0E7UUFBRztJQUNoRTtJQUVBLE1BQU0sRUFBRVMsT0FBTyxFQUFFQyxZQUFZLEVBQUVGLGFBQWEsRUFBRSxHQUFHTTtJQUVqRCxNQUFNRyxnQkFBZ0JqQixzRUFBY0E7SUFFcEMsT0FBTztRQUNMUztRQUNBQztRQUNBTSxRQUFRQztRQUNSQyxTQUFTVjtRQUNUVyxLQUFLSiwwQkFBMEIsQ0FBQztJQUNsQztBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTSywwQkFDUFgsVUFBVVYsdUVBQWVBLEVBQUUsRUFDM0JpQixTQUFTaEIsc0VBQWNBLEVBQUUsRUFDekJrQixPQUFPO0lBRVAsSUFBSUcsZ0JBQWdCO0lBQ3BCLElBQUlILFlBQVliLFdBQVc7UUFDekJnQixnQkFBZ0JILFVBQVUsT0FBTztJQUNuQztJQUNBLE9BQU8sQ0FBQyxFQUFFVCxRQUFRLENBQUMsRUFBRU8sT0FBTyxFQUFFSyxjQUFjLENBQUM7QUFDL0M7QUFFZ0gsQ0FDaEgsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3RyYWNpbmcuanM/ZWM1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IH0gZnJvbSAnLi9iYWdnYWdlLmpzJztcbmltcG9ydCB7IGdlbmVyYXRlVHJhY2VJZCwgZ2VuZXJhdGVTcGFuSWQgfSBmcm9tICcuL3Byb3BhZ2F0aW9uQ29udGV4dC5qcyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAc2VudHJ5LWludGVybmFsL3Nkay9uby1yZWdleHAtY29uc3RydWN0b3IgLS0gUmVnRXhwIGlzIHVzZWQgZm9yIHJlYWRhYmlsaXR5IGhlcmVcbmNvbnN0IFRSQUNFUEFSRU5UX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeWyBcXFxcdF0qJyArIC8vIHdoaXRlc3BhY2VcbiAgICAnKFswLTlhLWZdezMyfSk/JyArIC8vIHRyYWNlX2lkXG4gICAgJy0/KFswLTlhLWZdezE2fSk/JyArIC8vIHNwYW5faWRcbiAgICAnLT8oWzAxXSk/JyArIC8vIHNhbXBsZWRcbiAgICAnWyBcXFxcdF0qJCcsIC8vIHdoaXRlc3BhY2Vcbik7XG5cbi8qKlxuICogRXh0cmFjdCB0cmFuc2FjdGlvbiBjb250ZXh0IGRhdGEgZnJvbSBhIGBzZW50cnktdHJhY2VgIGhlYWRlci5cbiAqXG4gKiBAcGFyYW0gdHJhY2VwYXJlbnQgVHJhY2VwYXJlbnQgc3RyaW5nXG4gKlxuICogQHJldHVybnMgT2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBmcm9tIHRoZSBoZWFkZXIsIG9yIHVuZGVmaW5lZCBpZiB0cmFjZXBhcmVudCBzdHJpbmcgaXMgbWFsZm9ybWVkXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RUcmFjZXBhcmVudERhdGEodHJhY2VwYXJlbnQpIHtcbiAgaWYgKCF0cmFjZXBhcmVudCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBtYXRjaGVzID0gdHJhY2VwYXJlbnQubWF0Y2goVFJBQ0VQQVJFTlRfUkVHRVhQKTtcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxldCBwYXJlbnRTYW1wbGVkO1xuICBpZiAobWF0Y2hlc1szXSA9PT0gJzEnKSB7XG4gICAgcGFyZW50U2FtcGxlZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAobWF0Y2hlc1szXSA9PT0gJzAnKSB7XG4gICAgcGFyZW50U2FtcGxlZCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0cmFjZUlkOiBtYXRjaGVzWzFdLFxuICAgIHBhcmVudFNhbXBsZWQsXG4gICAgcGFyZW50U3BhbklkOiBtYXRjaGVzWzJdLFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHByb3BhZ2F0aW9uIGNvbnRleHQgZnJvbSBpbmNvbWluZyBoZWFkZXJzIG9yXG4gKiBjcmVhdGVzIGEgbWluaW1hbCBuZXcgb25lIGlmIHRoZSBoZWFkZXJzIGFyZSB1bmRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIHByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzKFxuICBzZW50cnlUcmFjZSxcbiAgYmFnZ2FnZSxcbikge1xuICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHNlbnRyeVRyYWNlKTtcbiAgY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQoYmFnZ2FnZSk7XG5cbiAgaWYgKCF0cmFjZXBhcmVudERhdGEgfHwgIXRyYWNlcGFyZW50RGF0YS50cmFjZUlkKSB7XG4gICAgcmV0dXJuIHsgdHJhY2VJZDogZ2VuZXJhdGVUcmFjZUlkKCksIHNwYW5JZDogZ2VuZXJhdGVTcGFuSWQoKSB9O1xuICB9XG5cbiAgY29uc3QgeyB0cmFjZUlkLCBwYXJlbnRTcGFuSWQsIHBhcmVudFNhbXBsZWQgfSA9IHRyYWNlcGFyZW50RGF0YTtcblxuICBjb25zdCB2aXJ0dWFsU3BhbklkID0gZ2VuZXJhdGVTcGFuSWQoKTtcblxuICByZXR1cm4ge1xuICAgIHRyYWNlSWQsXG4gICAgcGFyZW50U3BhbklkLFxuICAgIHNwYW5JZDogdmlydHVhbFNwYW5JZCxcbiAgICBzYW1wbGVkOiBwYXJlbnRTYW1wbGVkLFxuICAgIGRzYzogZHluYW1pY1NhbXBsaW5nQ29udGV4dCB8fCB7fSwgLy8gSWYgd2UgaGF2ZSB0cmFjZXBhcmVudCBkYXRhIGJ1dCBubyBEU0MgaXQgbWVhbnMgd2UgYXJlIG5vdCBoZWFkIG9mIHRyYWNlIGFuZCB3ZSBtdXN0IGZyZWV6ZSBpdFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBzZW50cnktdHJhY2UgaGVhZGVyIGZyb20gc3BhbiBjb250ZXh0IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcihcbiAgdHJhY2VJZCA9IGdlbmVyYXRlVHJhY2VJZCgpLFxuICBzcGFuSWQgPSBnZW5lcmF0ZVNwYW5JZCgpLFxuICBzYW1wbGVkLFxuKSB7XG4gIGxldCBzYW1wbGVkU3RyaW5nID0gJyc7XG4gIGlmIChzYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBzYW1wbGVkU3RyaW5nID0gc2FtcGxlZCA/ICctMScgOiAnLTAnO1xuICB9XG4gIHJldHVybiBgJHt0cmFjZUlkfS0ke3NwYW5JZH0ke3NhbXBsZWRTdHJpbmd9YDtcbn1cblxuZXhwb3J0IHsgVFJBQ0VQQVJFTlRfUkVHRVhQLCBleHRyYWN0VHJhY2VwYXJlbnREYXRhLCBnZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyLCBwcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiZ2VuZXJhdGVUcmFjZUlkIiwiZ2VuZXJhdGVTcGFuSWQiLCJUUkFDRVBBUkVOVF9SRUdFWFAiLCJSZWdFeHAiLCJleHRyYWN0VHJhY2VwYXJlbnREYXRhIiwidHJhY2VwYXJlbnQiLCJ1bmRlZmluZWQiLCJtYXRjaGVzIiwibWF0Y2giLCJwYXJlbnRTYW1wbGVkIiwidHJhY2VJZCIsInBhcmVudFNwYW5JZCIsInByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzIiwic2VudHJ5VHJhY2UiLCJiYWdnYWdlIiwidHJhY2VwYXJlbnREYXRhIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsInNwYW5JZCIsInZpcnR1YWxTcGFuSWQiLCJzYW1wbGVkIiwiZHNjIiwiZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciIsInNhbXBsZWRTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/url.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/url.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNumberOfUrlSegments: () => (/* binding */ getNumberOfUrlSegments),\n/* harmony export */   getSanitizedUrlString: () => (/* binding */ getSanitizedUrlString),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* binding */ stripUrlQueryAndFragment)\n/* harmony export */ });\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */ function parseUrl(url) {\n    if (!url) {\n        return {};\n    }\n    const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) {\n        return {};\n    }\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    const query = match[6] || \"\";\n    const fragment = match[8] || \"\";\n    return {\n        host: match[4],\n        path: match[5],\n        protocol: match[2],\n        search: query,\n        hash: fragment,\n        relative: match[5] + query + fragment\n    };\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */ function stripUrlQueryAndFragment(urlPath) {\n    return urlPath.split(/[?#]/, 1)[0];\n}\n/**\n * Returns number of URL segments of a passed string URL.\n *\n * @deprecated This function will be removed in the next major version.\n */ // TODO(v9): Hoist this function into the places where we use it. (as it stands only react router v6 instrumentation)\nfunction getNumberOfUrlSegments(url) {\n    // split at '/' or at '\\/' to split regex urls correctly\n    return url.split(/\\\\?\\//).filter((s)=>s.length > 0 && s !== \",\").length;\n}\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */ function getSanitizedUrlString(url) {\n    const { protocol, host, path } = url;\n    const filteredHost = host && host// Always filter out authority\n    .replace(/^.*@/, \"[filtered]:[filtered]@\")// Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n    // TODO: Use new URL global if it exists\n    .replace(/(:80)$/, \"\").replace(/(:443)$/, \"\") || \"\";\n    return `${protocol ? `${protocol}://` : \"\"}${filteredHost}${path}`;\n}\n //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLFNBQVNDLEdBQUc7SUFDbkIsSUFBSSxDQUFDQSxLQUFLO1FBQ1IsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxNQUFNQyxRQUFRRCxJQUFJQyxLQUFLLENBQUM7SUFFeEIsSUFBSSxDQUFDQSxPQUFPO1FBQ1YsT0FBTyxDQUFDO0lBQ1Y7SUFFQSx5RUFBeUU7SUFDekUsTUFBTUMsUUFBUUQsS0FBSyxDQUFDLEVBQUUsSUFBSTtJQUMxQixNQUFNRSxXQUFXRixLQUFLLENBQUMsRUFBRSxJQUFJO0lBQzdCLE9BQU87UUFDTEcsTUFBTUgsS0FBSyxDQUFDLEVBQUU7UUFDZEksTUFBTUosS0FBSyxDQUFDLEVBQUU7UUFDZEssVUFBVUwsS0FBSyxDQUFDLEVBQUU7UUFDbEJNLFFBQVFMO1FBQ1JNLE1BQU1MO1FBQ05NLFVBQVVSLEtBQUssQ0FBQyxFQUFFLEdBQUdDLFFBQVFDO0lBQy9CO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNPLHlCQUF5QkMsT0FBTztJQUN2QyxPQUFPLFFBQVNDLEtBQUssQ0FBQyxRQUFRLEVBQUksQ0FBQyxFQUFFO0FBQ3ZDO0FBRUE7Ozs7Q0FJQyxHQUNELHFIQUFxSDtBQUNySCxTQUFTQyx1QkFBdUJiLEdBQUc7SUFDakMsd0RBQXdEO0lBQ3hELE9BQU9BLElBQUlZLEtBQUssQ0FBQyxTQUFTRSxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLE1BQU0sR0FBRyxLQUFLRCxNQUFNLEtBQUtDLE1BQU07QUFDekU7QUFFQTs7O0NBR0MsR0FDRCxTQUFTQyxzQkFBc0JqQixHQUFHO0lBQ2hDLE1BQU0sRUFBRU0sUUFBUSxFQUFFRixJQUFJLEVBQUVDLElBQUksRUFBRSxHQUFHTDtJQUVqQyxNQUFNa0IsZUFDSixRQUNFZCxJQUNFLDhCQUE4QjtLQUM3QmUsT0FBTyxDQUFDLFFBQVEseUJBQ2pCLDRFQUE0RTtJQUM1RSx3Q0FBd0M7S0FDdkNBLE9BQU8sQ0FBQyxVQUFVLElBQ2xCQSxPQUFPLENBQUMsV0FBVyxPQUN4QjtJQUVGLE9BQU8sQ0FBQyxFQUFFYixXQUFXLENBQUMsRUFBRUEsU0FBUyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUVZLGFBQWEsRUFBRWIsS0FBSyxDQUFDO0FBQ3BFO0FBRTZGLENBQzdGLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC91cmwuanM/YzVmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBhcnNlcyBzdHJpbmcgZm9ybSBvZiBVUkwgaW50byBhbiBvYmplY3RcbiAqIC8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQlxuICogLy8gaW50ZW50aW9uYWxseSB1c2luZyByZWdleCBhbmQgbm90IDxhLz4gaHJlZiBwYXJzaW5nIHRyaWNrIGJlY2F1c2UgUmVhY3QgTmF0aXZlIGFuZCBvdGhlclxuICogLy8gZW52aXJvbm1lbnRzIHdoZXJlIERPTSBtaWdodCBub3QgYmUgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyBwYXJzZWQgVVJMIG9iamVjdFxuICovXG5mdW5jdGlvbiBwYXJzZVVybCh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvXigoW146Lz8jXSspOik/KFxcL1xcLyhbXi8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyk7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8vIGNvZXJjZSB0byB1bmRlZmluZWQgdmFsdWVzIHRvIGVtcHR5IHN0cmluZyBzbyB3ZSBkb24ndCBnZXQgJ3VuZGVmaW5lZCdcbiAgY29uc3QgcXVlcnkgPSBtYXRjaFs2XSB8fCAnJztcbiAgY29uc3QgZnJhZ21lbnQgPSBtYXRjaFs4XSB8fCAnJztcbiAgcmV0dXJuIHtcbiAgICBob3N0OiBtYXRjaFs0XSxcbiAgICBwYXRoOiBtYXRjaFs1XSxcbiAgICBwcm90b2NvbDogbWF0Y2hbMl0sXG4gICAgc2VhcmNoOiBxdWVyeSxcbiAgICBoYXNoOiBmcmFnbWVudCxcbiAgICByZWxhdGl2ZTogbWF0Y2hbNV0gKyBxdWVyeSArIGZyYWdtZW50LCAvLyBldmVyeXRoaW5nIG1pbnVzIG9yaWdpblxuICB9O1xufVxuXG4vKipcbiAqIFN0cmlwIHRoZSBxdWVyeSBzdHJpbmcgYW5kIGZyYWdtZW50IG9mZiBvZiBhIGdpdmVuIFVSTCBvciBwYXRoIChpZiBwcmVzZW50KVxuICpcbiAqIEBwYXJhbSB1cmxQYXRoIEZ1bGwgVVJMIG9yIHBhdGgsIGluY2x1ZGluZyBwb3NzaWJsZSBxdWVyeSBzdHJpbmcgYW5kL29yIGZyYWdtZW50XG4gKiBAcmV0dXJucyBVUkwgb3IgcGF0aCB3aXRob3V0IHF1ZXJ5IHN0cmluZyBvciBmcmFnbWVudFxuICovXG5mdW5jdGlvbiBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQodXJsUGF0aCkge1xuICByZXR1cm4gKHVybFBhdGguc3BsaXQoL1s/I10vLCAxKSApWzBdO1xufVxuXG4vKipcbiAqIFJldHVybnMgbnVtYmVyIG9mIFVSTCBzZWdtZW50cyBvZiBhIHBhc3NlZCBzdHJpbmcgVVJMLlxuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbi8vIFRPRE8odjkpOiBIb2lzdCB0aGlzIGZ1bmN0aW9uIGludG8gdGhlIHBsYWNlcyB3aGVyZSB3ZSB1c2UgaXQuIChhcyBpdCBzdGFuZHMgb25seSByZWFjdCByb3V0ZXIgdjYgaW5zdHJ1bWVudGF0aW9uKVxuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyh1cmwpIHtcbiAgLy8gc3BsaXQgYXQgJy8nIG9yIGF0ICdcXC8nIHRvIHNwbGl0IHJlZ2V4IHVybHMgY29ycmVjdGx5XG4gIHJldHVybiB1cmwuc3BsaXQoL1xcXFw/XFwvLykuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwICYmIHMgIT09ICcsJykubGVuZ3RoO1xufVxuXG4vKipcbiAqIFRha2VzIGEgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIHNhbml0aXplZCBzdHJpbmcgd2hpY2ggaXMgc2FmZSB0byB1c2UgYXMgc3BhbiBuYW1lXG4gKiBzZWU6IGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9kYXRhLWhhbmRsaW5nLyNzdHJ1Y3R1cmluZy1kYXRhXG4gKi9cbmZ1bmN0aW9uIGdldFNhbml0aXplZFVybFN0cmluZyh1cmwpIHtcbiAgY29uc3QgeyBwcm90b2NvbCwgaG9zdCwgcGF0aCB9ID0gdXJsO1xuXG4gIGNvbnN0IGZpbHRlcmVkSG9zdCA9XG4gICAgKGhvc3QgJiZcbiAgICAgIGhvc3RcbiAgICAgICAgLy8gQWx3YXlzIGZpbHRlciBvdXQgYXV0aG9yaXR5XG4gICAgICAgIC5yZXBsYWNlKC9eLipALywgJ1tmaWx0ZXJlZF06W2ZpbHRlcmVkXUAnKVxuICAgICAgICAvLyBEb24ndCBzaG93IHN0YW5kYXJkIDo4MCAoaHR0cCkgYW5kIDo0NDMgKGh0dHBzKSBwb3J0cyB0byByZWR1Y2UgdGhlIG5vaXNlXG4gICAgICAgIC8vIFRPRE86IFVzZSBuZXcgVVJMIGdsb2JhbCBpZiBpdCBleGlzdHNcbiAgICAgICAgLnJlcGxhY2UoLyg6ODApJC8sICcnKVxuICAgICAgICAucmVwbGFjZSgvKDo0NDMpJC8sICcnKSkgfHxcbiAgICAnJztcblxuICByZXR1cm4gYCR7cHJvdG9jb2wgPyBgJHtwcm90b2NvbH06Ly9gIDogJyd9JHtmaWx0ZXJlZEhvc3R9JHtwYXRofWA7XG59XG5cbmV4cG9ydCB7IGdldE51bWJlck9mVXJsU2VnbWVudHMsIGdldFNhbml0aXplZFVybFN0cmluZywgcGFyc2VVcmwsIHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbInBhcnNlVXJsIiwidXJsIiwibWF0Y2giLCJxdWVyeSIsImZyYWdtZW50IiwiaG9zdCIsInBhdGgiLCJwcm90b2NvbCIsInNlYXJjaCIsImhhc2giLCJyZWxhdGl2ZSIsInN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCIsInVybFBhdGgiLCJzcGxpdCIsImdldE51bWJlck9mVXJsU2VnbWVudHMiLCJmaWx0ZXIiLCJzIiwibGVuZ3RoIiwiZ2V0U2FuaXRpemVkVXJsU3RyaW5nIiwiZmlsdGVyZWRIb3N0IiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/vendor/supportsHistory.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/vendor/supportsHistory.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supportsHistory: () => (/* binding */ supportsHistory)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\nconst WINDOW = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */ function supportsHistory() {\n    // NOTE: in Chrome App environment, touching history.pushState, *even inside\n    //       a try/catch block*, will cause Chrome to output an error to console.error\n    // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n    // TODO(v9): Remove this custom check, it is pretty old and likely not needed anymore\n    const chromeVar = WINDOW.chrome;\n    const isChromePackagedApp = chromeVar && chromeVar.app && chromeVar.app.runtime;\n    const hasHistoryApi = \"history\" in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n    return !isChromePackagedApp && hasHistoryApi;\n}\n //# sourceMappingURL=supportsHistory.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC92ZW5kb3Ivc3VwcG9ydHNIaXN0b3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBRTdDLGtFQUFrRTtBQUNsRSxrQkFBa0I7QUFHbEIsTUFBTUMsU0FBU0QscURBQVVBO0FBRXpCOzs7OztDQUtDLEdBQ0QsU0FBU0U7SUFDUCw0RUFBNEU7SUFDNUUsa0ZBQWtGO0lBQ2xGLHdFQUF3RTtJQUN4RSxxRkFBcUY7SUFDckYsTUFBTUMsWUFBWSxPQUFVQyxNQUFNO0lBQ2xDLE1BQU1DLHNCQUFzQkYsYUFBYUEsVUFBVUcsR0FBRyxJQUFJSCxVQUFVRyxHQUFHLENBQUNDLE9BQU87SUFDL0UsTUFBTUMsZ0JBQWdCLGFBQWFQLFVBQVUsQ0FBQyxDQUFDQSxPQUFPUSxPQUFPLENBQUNDLFNBQVMsSUFBSSxDQUFDLENBQUNULE9BQU9RLE9BQU8sQ0FBQ0UsWUFBWTtJQUV4RyxPQUFPLENBQUNOLHVCQUF1Qkc7QUFDakM7QUFFMkIsQ0FDM0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3ZlbmRvci9zdXBwb3J0c0hpc3RvcnkuanM/YTQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vd29ybGR3aWRlLmpzJztcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzOTQ1L2ZpbGVzXG4vLyBUaGUgTUlUIExpY2Vuc2VcblxuXG5jb25zdCBXSU5ET1cgPSBHTE9CQUxfT0JKIDtcblxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgSGlzdG9yeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c0hpc3Rvcnl9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgLy8gTk9URTogaW4gQ2hyb21lIEFwcCBlbnZpcm9ubWVudCwgdG91Y2hpbmcgaGlzdG9yeS5wdXNoU3RhdGUsICpldmVuIGluc2lkZVxuICAvLyAgICAgICBhIHRyeS9jYXRjaCBibG9jayosIHdpbGwgY2F1c2UgQ2hyb21lIHRvIG91dHB1dCBhbiBlcnJvciB0byBjb25zb2xlLmVycm9yXG4gIC8vIGJvcnJvd2VkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xMzk0NS9maWxlc1xuICAvLyBUT0RPKHY5KTogUmVtb3ZlIHRoaXMgY3VzdG9tIGNoZWNrLCBpdCBpcyBwcmV0dHkgb2xkIGFuZCBsaWtlbHkgbm90IG5lZWRlZCBhbnltb3JlXG4gIGNvbnN0IGNocm9tZVZhciA9IChXSU5ET1cgKS5jaHJvbWU7XG4gIGNvbnN0IGlzQ2hyb21lUGFja2FnZWRBcHAgPSBjaHJvbWVWYXIgJiYgY2hyb21lVmFyLmFwcCAmJiBjaHJvbWVWYXIuYXBwLnJ1bnRpbWU7XG4gIGNvbnN0IGhhc0hpc3RvcnlBcGkgPSAnaGlzdG9yeScgaW4gV0lORE9XICYmICEhV0lORE9XLmhpc3RvcnkucHVzaFN0YXRlICYmICEhV0lORE9XLmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuXG4gIHJldHVybiAhaXNDaHJvbWVQYWNrYWdlZEFwcCAmJiBoYXNIaXN0b3J5QXBpO1xufVxuXG5leHBvcnQgeyBzdXBwb3J0c0hpc3RvcnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1cHBvcnRzSGlzdG9yeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJHTE9CQUxfT0JKIiwiV0lORE9XIiwic3VwcG9ydHNIaXN0b3J5IiwiY2hyb21lVmFyIiwiY2hyb21lIiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImFwcCIsInJ1bnRpbWUiLCJoYXNIaXN0b3J5QXBpIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/vendor/supportsHistory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/version.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// This is a magic string replaced by rollup\nconst SDK_VERSION = \"8.55.0\";\n //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0Q0FBNEM7QUFFNUMsTUFBTUEsY0FBYztBQUVHLENBQ3ZCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC92ZXJzaW9uLmpzP2ZjYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpcyBhIG1hZ2ljIHN0cmluZyByZXBsYWNlZCBieSByb2xsdXBcblxuY29uc3QgU0RLX1ZFUlNJT04gPSBcIjguNTUuMFwiIDtcblxuZXhwb3J0IHsgU0RLX1ZFUlNJT04gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwXG4iXSwibmFtZXMiOlsiU0RLX1ZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ),\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/version.js\");\n\n/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = globalThis;\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */ function getGlobalSingleton(name, creator, obj) {\n    const gbl = obj || GLOBAL_OBJ;\n    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n    const versionedCarrier = __SENTRY__[_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION] = __SENTRY__[_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION] || {};\n    return versionedCarrier[name] || (versionedCarrier[name] = creator());\n}\n //# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC93b3JsZHdpZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBRTNDLCtEQUErRCxHQUMvRCxNQUFNQyxhQUFhQztBQUVuQjs7Ozs7Ozs7OztDQVVDLEdBQ0QsU0FBU0MsbUJBQW1CQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsR0FBRztJQUM1QyxNQUFNQyxNQUFPRCxPQUFPTDtJQUNwQixNQUFNTyxhQUFjRCxJQUFJQyxVQUFVLEdBQUdELElBQUlDLFVBQVUsSUFBSSxDQUFDO0lBQ3hELE1BQU1DLG1CQUFvQkQsVUFBVSxDQUFDUixvREFBV0EsQ0FBQyxHQUFHUSxVQUFVLENBQUNSLG9EQUFXQSxDQUFDLElBQUksQ0FBQztJQUNoRixPQUFPUyxnQkFBZ0IsQ0FBQ0wsS0FBSyxJQUFLSyxDQUFBQSxnQkFBZ0IsQ0FBQ0wsS0FBSyxHQUFHQyxTQUFRO0FBQ3JFO0FBRTBDLENBQzFDLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC93b3JsZHdpZGUuanM/ZTU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTREtfVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5cbi8qKiBHZXQncyB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgSmF2YVNjcmlwdCBydW50aW1lICovXG5jb25zdCBHTE9CQUxfT0JKID0gZ2xvYmFsVGhpcyA7XG5cbi8qKlxuICogUmV0dXJucyBhIGdsb2JhbCBzaW5nbGV0b24gY29udGFpbmVkIGluIHRoZSBnbG9iYWwgYF9fU0VOVFJZX19bXWAgb2JqZWN0LlxuICpcbiAqIElmIHRoZSBzaW5nbGV0b24gZG9lc24ndCBhbHJlYWR5IGV4aXN0IGluIGBfX1NFTlRSWV9fYCwgaXQgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZSBnaXZlbiBmYWN0b3J5XG4gKiBmdW5jdGlvbiBhbmQgYWRkZWQgdG8gdGhlIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgZ2xvYmFsIHNpbmdsZXRvbiBvbiBfX1NFTlRSWV9fXG4gKiBAcGFyYW0gY3JlYXRvciBjcmVhdG9yIEZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBzaW5nbGV0b24gaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIGBfX1NFTlRSWV9fYFxuICogQHBhcmFtIG9iaiAoT3B0aW9uYWwpIFRoZSBnbG9iYWwgb2JqZWN0IG9uIHdoaWNoIHRvIGxvb2sgZm9yIGBfX1NFTlRSWV9fYCwgaWYgbm90IGBHTE9CQUxfT0JKYCdzIHJldHVybiB2YWx1ZVxuICogQHJldHVybnMgdGhlIHNpbmdsZXRvblxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxTaW5nbGV0b24obmFtZSwgY3JlYXRvciwgb2JqKSB7XG4gIGNvbnN0IGdibCA9IChvYmogfHwgR0xPQkFMX09CSikgO1xuICBjb25zdCBfX1NFTlRSWV9fID0gKGdibC5fX1NFTlRSWV9fID0gZ2JsLl9fU0VOVFJZX18gfHwge30pO1xuICBjb25zdCB2ZXJzaW9uZWRDYXJyaWVyID0gKF9fU0VOVFJZX19bU0RLX1ZFUlNJT05dID0gX19TRU5UUllfX1tTREtfVkVSU0lPTl0gfHwge30pO1xuICByZXR1cm4gdmVyc2lvbmVkQ2FycmllcltuYW1lXSB8fCAodmVyc2lvbmVkQ2FycmllcltuYW1lXSA9IGNyZWF0b3IoKSk7XG59XG5cbmV4cG9ydCB7IEdMT0JBTF9PQkosIGdldEdsb2JhbFNpbmdsZXRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ybGR3aWRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlNES19WRVJTSU9OIiwiR0xPQkFMX09CSiIsImdsb2JhbFRoaXMiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJuYW1lIiwiY3JlYXRvciIsIm9iaiIsImdibCIsIl9fU0VOVFJZX18iLCJ2ZXJzaW9uZWRDYXJyaWVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyScopeDataToEvent: () => (/* binding */ applyScopeDataToEvent),\n/* harmony export */   mergeAndOverwriteScopeData: () => (/* binding */ mergeAndOverwriteScopeData),\n/* harmony export */   mergeScopeData: () => (/* binding */ mergeScopeData)\n/* harmony export */ });\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./merge.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _spanUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spanUtils.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n\n\n\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */ function applyScopeDataToEvent(event, data) {\n    const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n    // Apply general data\n    applyDataToEvent(event, data);\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (span) {\n        applySpanToEvent(event, span);\n    }\n    applyFingerprintToEvent(event, fingerprint);\n    applyBreadcrumbsToEvent(event, breadcrumbs);\n    applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n/** Merge data of two scopes together. */ function mergeScopeData(data, mergeData) {\n    const { extra, tags, user, contexts, level, sdkProcessingMetadata, breadcrumbs, fingerprint, eventProcessors, attachments, propagationContext, transactionName, span } = mergeData;\n    mergeAndOverwriteScopeData(data, \"extra\", extra);\n    mergeAndOverwriteScopeData(data, \"tags\", tags);\n    mergeAndOverwriteScopeData(data, \"user\", user);\n    mergeAndOverwriteScopeData(data, \"contexts\", contexts);\n    data.sdkProcessingMetadata = (0,_merge_js__WEBPACK_IMPORTED_MODULE_0__.merge)(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n    if (level) {\n        data.level = level;\n    }\n    if (transactionName) {\n        data.transactionName = transactionName;\n    }\n    if (span) {\n        data.span = span;\n    }\n    if (breadcrumbs.length) {\n        data.breadcrumbs = [\n            ...data.breadcrumbs,\n            ...breadcrumbs\n        ];\n    }\n    if (fingerprint.length) {\n        data.fingerprint = [\n            ...data.fingerprint,\n            ...fingerprint\n        ];\n    }\n    if (eventProcessors.length) {\n        data.eventProcessors = [\n            ...data.eventProcessors,\n            ...eventProcessors\n        ];\n    }\n    if (attachments.length) {\n        data.attachments = [\n            ...data.attachments,\n            ...attachments\n        ];\n    }\n    data.propagationContext = {\n        ...data.propagationContext,\n        ...propagationContext\n    };\n}\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */ function mergeAndOverwriteScopeData(data, prop, mergeVal) {\n    data[prop] = (0,_merge_js__WEBPACK_IMPORTED_MODULE_0__.merge)(data[prop], mergeVal, 1);\n}\nfunction applyDataToEvent(event, data) {\n    const { extra, tags, user, contexts, level, transactionName } = data;\n    const cleanedExtra = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)(extra);\n    if (cleanedExtra && Object.keys(cleanedExtra).length) {\n        event.extra = {\n            ...cleanedExtra,\n            ...event.extra\n        };\n    }\n    const cleanedTags = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)(tags);\n    if (cleanedTags && Object.keys(cleanedTags).length) {\n        event.tags = {\n            ...cleanedTags,\n            ...event.tags\n        };\n    }\n    const cleanedUser = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)(user);\n    if (cleanedUser && Object.keys(cleanedUser).length) {\n        event.user = {\n            ...cleanedUser,\n            ...event.user\n        };\n    }\n    const cleanedContexts = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)(contexts);\n    if (cleanedContexts && Object.keys(cleanedContexts).length) {\n        event.contexts = {\n            ...cleanedContexts,\n            ...event.contexts\n        };\n    }\n    if (level) {\n        event.level = level;\n    }\n    // transaction events get their `transaction` from the root span name\n    if (transactionName && event.type !== \"transaction\") {\n        event.transaction = transactionName;\n    }\n}\nfunction applyBreadcrumbsToEvent(event, breadcrumbs) {\n    const mergedBreadcrumbs = [\n        ...event.breadcrumbs || [],\n        ...breadcrumbs\n    ];\n    event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\nfunction applySdkMetadataToEvent(event, sdkProcessingMetadata) {\n    event.sdkProcessingMetadata = {\n        ...event.sdkProcessingMetadata,\n        ...sdkProcessingMetadata\n    };\n}\nfunction applySpanToEvent(event, span) {\n    event.contexts = {\n        trace: (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_2__.spanToTraceContext)(span),\n        ...event.contexts\n    };\n    event.sdkProcessingMetadata = {\n        dynamicSamplingContext: (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_3__.getDynamicSamplingContextFromSpan)(span),\n        ...event.sdkProcessingMetadata\n    };\n    const rootSpan = (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_2__.getRootSpan)(span);\n    const transactionName = (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_2__.spanToJSON)(rootSpan).description;\n    if (transactionName && !event.transaction && event.type === \"transaction\") {\n        event.transaction = transactionName;\n    }\n}\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */ function applyFingerprintToEvent(event, fingerprint) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [\n        event.fingerprint\n    ] : [];\n    // If we have something on the scope, then merge it with event\n    if (fingerprint) {\n        event.fingerprint = event.fingerprint.concat(fingerprint);\n    }\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n    }\n}\n //# sourceMappingURL=applyScopeDataToEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/hasTracingEnabled.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/hasTracingEnabled.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasTracingEnabled: () => (/* binding */ hasTracingEnabled)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n\n// Treeshakable guard to remove all code related to tracing\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */ function hasTracingEnabled(maybeOptions) {\n    if (typeof __SENTRY_TRACING__ === \"boolean\" && !__SENTRY_TRACING__) {\n        return false;\n    }\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    const options = maybeOptions || client && client.getOptions();\n    // eslint-disable-next-line deprecation/deprecation\n    return !!options && (options.enableTracing || \"tracesSampleRate\" in options || \"tracesSampler\" in options);\n}\n //# sourceMappingURL=hasTracingEnabled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9oYXNUcmFjaW5nRW5hYmxlZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUVoRCwyREFBMkQ7QUFFM0Q7Ozs7Q0FJQyxHQUNELFNBQVNDLGtCQUNQQyxZQUFZO0lBRVosSUFBSSxPQUFPQyx1QkFBdUIsYUFBYSxDQUFDQSxvQkFBb0I7UUFDbEUsT0FBTztJQUNUO0lBRUEsTUFBTUMsU0FBU0osNERBQVNBO0lBQ3hCLE1BQU1LLFVBQVVILGdCQUFpQkUsVUFBVUEsT0FBT0UsVUFBVTtJQUM1RCxtREFBbUQ7SUFDbkQsT0FBTyxDQUFDLENBQUNELFdBQVlBLENBQUFBLFFBQVFFLGFBQWEsSUFBSSxzQkFBc0JGLFdBQVcsbUJBQW1CQSxPQUFNO0FBQzFHO0FBRTZCLENBQzdCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9oYXNUcmFjaW5nRW5hYmxlZC5qcz85ODQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENsaWVudCB9IGZyb20gJy4uL2N1cnJlbnRTY29wZXMuanMnO1xuXG4vLyBUcmVlc2hha2FibGUgZ3VhcmQgdG8gcmVtb3ZlIGFsbCBjb2RlIHJlbGF0ZWQgdG8gdHJhY2luZ1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdHJhY2luZyBpcyBjdXJyZW50bHkgZW5hYmxlZC5cbiAqXG4gKiBUcmFjaW5nIGlzIGVuYWJsZWQgd2hlbiBhdCBsZWFzdCBvbmUgb2YgYHRyYWNlc1NhbXBsZVJhdGVgIGFuZCBgdHJhY2VzU2FtcGxlcmAgaXMgZGVmaW5lZCBpbiB0aGUgU0RLIGNvbmZpZy5cbiAqL1xuZnVuY3Rpb24gaGFzVHJhY2luZ0VuYWJsZWQoXG4gIG1heWJlT3B0aW9ucyxcbikge1xuICBpZiAodHlwZW9mIF9fU0VOVFJZX1RSQUNJTkdfXyA9PT0gJ2Jvb2xlYW4nICYmICFfX1NFTlRSWV9UUkFDSU5HX18pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgY29uc3Qgb3B0aW9ucyA9IG1heWJlT3B0aW9ucyB8fCAoY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuICEhb3B0aW9ucyAmJiAob3B0aW9ucy5lbmFibGVUcmFjaW5nIHx8ICd0cmFjZXNTYW1wbGVSYXRlJyBpbiBvcHRpb25zIHx8ICd0cmFjZXNTYW1wbGVyJyBpbiBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgaGFzVHJhY2luZ0VuYWJsZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc1RyYWNpbmdFbmFibGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldENsaWVudCIsImhhc1RyYWNpbmdFbmFibGVkIiwibWF5YmVPcHRpb25zIiwiX19TRU5UUllfVFJBQ0lOR19fIiwiY2xpZW50Iiwib3B0aW9ucyIsImdldE9wdGlvbnMiLCJlbmFibGVUcmFjaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/hasTracingEnabled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/merge.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */ function merge(initialObj, mergeObj, levels = 2) {\n    // If the merge value is not an object, or we have no merge levels left,\n    // we just set the value to the merge value\n    if (!mergeObj || typeof mergeObj !== \"object\" || levels <= 0) {\n        return mergeObj;\n    }\n    // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n    if (initialObj && mergeObj && Object.keys(mergeObj).length === 0) {\n        return initialObj;\n    }\n    // Clone object\n    const output = {\n        ...initialObj\n    };\n    // Merge values into output, resursively\n    for(const key in mergeObj){\n        if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n            output[key] = merge(output[key], mergeObj[key], levels - 1);\n        }\n    }\n    return output;\n}\n //# sourceMappingURL=merge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0EsTUFBTUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsQ0FBQztJQUM3Qyx3RUFBd0U7SUFDeEUsMkNBQTJDO0lBQzNDLElBQUksQ0FBQ0QsWUFBWSxPQUFPQSxhQUFhLFlBQVlDLFVBQVUsR0FBRztRQUM1RCxPQUFPRDtJQUNUO0lBRUEsZ0hBQWdIO0lBQ2hILElBQUlELGNBQWNDLFlBQVlFLE9BQU9DLElBQUksQ0FBQ0gsVUFBVUksTUFBTSxLQUFLLEdBQUc7UUFDaEUsT0FBT0w7SUFDVDtJQUVBLGVBQWU7SUFDZixNQUFNTSxTQUFTO1FBQUUsR0FBR04sVUFBVTtJQUFDO0lBRS9CLHdDQUF3QztJQUN4QyxJQUFLLE1BQU1PLE9BQU9OLFNBQVU7UUFDMUIsSUFBSUUsT0FBT0ssU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1QsVUFBVU0sTUFBTTtZQUN2REQsTUFBTSxDQUFDQyxJQUFJLEdBQUdSLE1BQU1PLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFTixRQUFRLENBQUNNLElBQUksRUFBRUwsU0FBUztRQUMzRDtJQUNGO0lBRUEsT0FBT0k7QUFDVDtBQUVpQixDQUNqQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvbWVyZ2UuanM/ZmZjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNoYWxsb3cgbWVyZ2UgdHdvIG9iamVjdHMuXG4gKiBEb2VzIG5vdCBtdXRhdGUgdGhlIHBhc3NlZCBpbiBvYmplY3RzLlxuICogVW5kZWZpbmVkL2VtcHR5IHZhbHVlcyBpbiB0aGUgbWVyZ2Ugb2JqZWN0IHdpbGwgb3ZlcndyaXRlIGV4aXN0aW5nIHZhbHVlcy5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGlzIG1lcmdlcyAyIGxldmVscyBkZWVwLlxuICovXG5mdW5jdGlvbiBtZXJnZShpbml0aWFsT2JqLCBtZXJnZU9iaiwgbGV2ZWxzID0gMikge1xuICAvLyBJZiB0aGUgbWVyZ2UgdmFsdWUgaXMgbm90IGFuIG9iamVjdCwgb3Igd2UgaGF2ZSBubyBtZXJnZSBsZXZlbHMgbGVmdCxcbiAgLy8gd2UganVzdCBzZXQgdGhlIHZhbHVlIHRvIHRoZSBtZXJnZSB2YWx1ZVxuICBpZiAoIW1lcmdlT2JqIHx8IHR5cGVvZiBtZXJnZU9iaiAhPT0gJ29iamVjdCcgfHwgbGV2ZWxzIDw9IDApIHtcbiAgICByZXR1cm4gbWVyZ2VPYmo7XG4gIH1cblxuICAvLyBJZiB0aGUgbWVyZ2Ugb2JqZWN0IGlzIGFuIGVtcHR5IG9iamVjdCwgYW5kIHRoZSBpbml0aWFsIG9iamVjdCBpcyBub3QgdW5kZWZpbmVkLCB3ZSByZXR1cm4gdGhlIGluaXRpYWwgb2JqZWN0XG4gIGlmIChpbml0aWFsT2JqICYmIG1lcmdlT2JqICYmIE9iamVjdC5rZXlzKG1lcmdlT2JqKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaW5pdGlhbE9iajtcbiAgfVxuXG4gIC8vIENsb25lIG9iamVjdFxuICBjb25zdCBvdXRwdXQgPSB7IC4uLmluaXRpYWxPYmogfTtcblxuICAvLyBNZXJnZSB2YWx1ZXMgaW50byBvdXRwdXQsIHJlc3Vyc2l2ZWx5XG4gIGZvciAoY29uc3Qga2V5IGluIG1lcmdlT2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXJnZU9iaiwga2V5KSkge1xuICAgICAgb3V0cHV0W2tleV0gPSBtZXJnZShvdXRwdXRba2V5XSwgbWVyZ2VPYmpba2V5XSwgbGV2ZWxzIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IHsgbWVyZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lcmdlIiwiaW5pdGlhbE9iaiIsIm1lcmdlT2JqIiwibGV2ZWxzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIm91dHB1dCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseSampleRate: () => (/* binding */ parseSampleRate)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */ function parseSampleRate(sampleRate) {\n    if (typeof sampleRate === \"boolean\") {\n        return Number(sampleRate);\n    }\n    const rate = typeof sampleRate === \"string\" ? parseFloat(sampleRate) : sampleRate;\n    if (typeof rate !== \"number\" || isNaN(rate) || rate < 0 || rate > 1) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(sampleRate)} of type ${JSON.stringify(typeof sampleRate)}.`);\n        return undefined;\n    }\n    return rate;\n}\n //# sourceMappingURL=parseSampleRate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9wYXJzZVNhbXBsZVJhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdEO0FBQ0U7QUFFbEQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0UsZ0JBQWdCQyxVQUFVO0lBQ2pDLElBQUksT0FBT0EsZUFBZSxXQUFXO1FBQ25DLE9BQU9DLE9BQU9EO0lBQ2hCO0lBRUEsTUFBTUUsT0FBTyxPQUFPRixlQUFlLFdBQVdHLFdBQVdILGNBQWNBO0lBQ3ZFLElBQUksT0FBT0UsU0FBUyxZQUFZRSxNQUFNRixTQUFTQSxPQUFPLEtBQUtBLE9BQU8sR0FBRztRQUNuRUwsd0RBQVdBLElBQ1RDLDBEQUFNQSxDQUFDTyxJQUFJLENBQ1QsQ0FBQyx1R0FBdUcsRUFBRUMsS0FBS0MsU0FBUyxDQUN0SFAsWUFDQSxTQUFTLEVBQUVNLEtBQUtDLFNBQVMsQ0FBQyxPQUFPUCxZQUFZLENBQUMsQ0FBQztRQUVyRCxPQUFPUTtJQUNUO0lBRUEsT0FBT047QUFDVDtBQUUyQixDQUMzQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvcGFyc2VTYW1wbGVSYXRlLmpzP2I5YzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuXG4vKipcbiAqIFBhcnNlIGEgc2FtcGxlIHJhdGUgZnJvbSBhIGdpdmVuIHZhbHVlLlxuICogVGhpcyB3aWxsIGVpdGhlciByZXR1cm4gYSBib29sZWFuIG9yIG51bWJlciBzYW1wbGUgcmF0ZSwgaWYgdGhlIHNhbXBsZSByYXRlIGlzIHZhbGlkIChiZXR3ZWVuIDAgYW5kIDEpLlxuICogSWYgYSBzdHJpbmcgaXMgcGFzc2VkLCB3ZSB0cnkgdG8gY29udmVydCBpdCB0byBhIG51bWJlci5cbiAqXG4gKiBBbnkgaW52YWxpZCBzYW1wbGUgcmF0ZSB3aWxsIHJldHVybiBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTYW1wbGVSYXRlKHNhbXBsZVJhdGUpIHtcbiAgaWYgKHR5cGVvZiBzYW1wbGVSYXRlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gTnVtYmVyKHNhbXBsZVJhdGUpO1xuICB9XG5cbiAgY29uc3QgcmF0ZSA9IHR5cGVvZiBzYW1wbGVSYXRlID09PSAnc3RyaW5nJyA/IHBhcnNlRmxvYXQoc2FtcGxlUmF0ZSkgOiBzYW1wbGVSYXRlO1xuICBpZiAodHlwZW9mIHJhdGUgIT09ICdudW1iZXInIHx8IGlzTmFOKHJhdGUpIHx8IHJhdGUgPCAwIHx8IHJhdGUgPiAxKSB7XG4gICAgREVCVUdfQlVJTEQgJiZcbiAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICBgW1RyYWNpbmddIEdpdmVuIHNhbXBsZSByYXRlIGlzIGludmFsaWQuIFNhbXBsZSByYXRlIG11c3QgYmUgYSBib29sZWFuIG9yIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gR290ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgc2FtcGxlUmF0ZSxcbiAgICAgICAgKX0gb2YgdHlwZSAke0pTT04uc3RyaW5naWZ5KHR5cGVvZiBzYW1wbGVSYXRlKX0uYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiByYXRlO1xufVxuXG5leHBvcnQgeyBwYXJzZVNhbXBsZVJhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlU2FtcGxlUmF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsImxvZ2dlciIsInBhcnNlU2FtcGxlUmF0ZSIsInNhbXBsZVJhdGUiLCJOdW1iZXIiLCJyYXRlIiwicGFyc2VGbG9hdCIsImlzTmFOIiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/prepareEvent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/prepareEvent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyClientOptions: () => (/* binding */ applyClientOptions),\n/* harmony export */   applyDebugIds: () => (/* binding */ applyDebugIds),\n/* harmony export */   applyDebugMeta: () => (/* binding */ applyDebugMeta),\n/* harmony export */   parseEventHintOrCaptureContext: () => (/* binding */ parseEventHintOrCaptureContext),\n/* harmony export */   prepareEvent: () => (/* binding */ prepareEvent)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/constants.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../eventProcessors.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/eventProcessors.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../scope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_debug_ids_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/debug-ids.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./applyScopeDataToEvent.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */ /**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */ function prepareEvent(options, event, hint, scope, client, isolationScope) {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;\n    const prepared = {\n        ...event,\n        event_id: event.event_id || hint.event_id || (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_0__.uuid4)(),\n        timestamp: event.timestamp || (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__.dateTimestampInSeconds)()\n    };\n    const integrations = hint.integrations || options.integrations.map((i)=>i.name);\n    applyClientOptions(prepared, options);\n    applyIntegrationsMetadata(prepared, integrations);\n    if (client) {\n        client.emit(\"applyFrameMetadata\", event);\n    }\n    // Only put debug IDs onto frames for error events.\n    if (event.type === undefined) {\n        applyDebugIds(prepared, options.stackParser);\n    }\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    const finalScope = getFinalScope(scope, hint.captureContext);\n    if (hint.mechanism) {\n        (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_0__.addExceptionMechanism)(prepared, hint.mechanism);\n    }\n    const clientEventProcessors = client ? client.getEventProcessors() : [];\n    // This should be the last thing called, since we want that\n    // {@link Scope.addEventProcessor} gets the finished prepared event.\n    // Merge scope data together\n    const data = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getGlobalScope)().getScopeData();\n    if (isolationScope) {\n        const isolationData = isolationScope.getScopeData();\n        (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.mergeScopeData)(data, isolationData);\n    }\n    if (finalScope) {\n        const finalScopeData = finalScope.getScopeData();\n        (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.mergeScopeData)(data, finalScopeData);\n    }\n    const attachments = [\n        ...hint.attachments || [],\n        ...data.attachments\n    ];\n    if (attachments.length) {\n        hint.attachments = attachments;\n    }\n    (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.applyScopeDataToEvent)(prepared, data);\n    const eventProcessors = [\n        ...clientEventProcessors,\n        // Run scope event processors _after_ all other processors\n        ...data.eventProcessors\n    ];\n    const result = (0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__.notifyEventProcessors)(eventProcessors, prepared, hint);\n    return result.then((evt)=>{\n        if (evt) {\n            // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n            // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n            // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n            // any new data\n            applyDebugMeta(evt);\n        }\n        if (typeof normalizeDepth === \"number\" && normalizeDepth > 0) {\n            return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n        }\n        return evt;\n    });\n}\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */ function applyClientOptions(event, options) {\n    const { environment, release, dist, maxValueLength = 250 } = options;\n    // empty strings do not make sense for environment, release, and dist\n    // so we handle them the same as if they were not provided\n    event.environment = event.environment || environment || _constants_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_ENVIRONMENT;\n    if (!event.release && release) {\n        event.release = release;\n    }\n    if (!event.dist && dist) {\n        event.dist = dist;\n    }\n    if (event.message) {\n        event.message = (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_6__.truncate)(event.message, maxValueLength);\n    }\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n        exception.value = (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_6__.truncate)(exception.value, maxValueLength);\n    }\n    const request = event.request;\n    if (request && request.url) {\n        request.url = (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_6__.truncate)(request.url, maxValueLength);\n    }\n}\n/**\n * Puts debug IDs into the stack frames of an error event.\n */ function applyDebugIds(event, stackParser) {\n    // Build a map of filename -> debug_id\n    const filenameDebugIdMap = (0,_utils_hoist_debug_ids_js__WEBPACK_IMPORTED_MODULE_7__.getFilenameToDebugIdMap)(stackParser);\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        event.exception.values.forEach((exception)=>{\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            exception.stacktrace.frames.forEach((frame)=>{\n                if (filenameDebugIdMap && frame.filename) {\n                    frame.debug_id = filenameDebugIdMap[frame.filename];\n                }\n            });\n        });\n    } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n}\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */ function applyDebugMeta(event) {\n    // Extract debug IDs and filenames from the stack frames on the event.\n    const filenameDebugIdMap = {};\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        event.exception.values.forEach((exception)=>{\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            exception.stacktrace.frames.forEach((frame)=>{\n                if (frame.debug_id) {\n                    if (frame.abs_path) {\n                        filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n                    } else if (frame.filename) {\n                        filenameDebugIdMap[frame.filename] = frame.debug_id;\n                    }\n                    delete frame.debug_id;\n                }\n            });\n        });\n    } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n    if (Object.keys(filenameDebugIdMap).length === 0) {\n        return;\n    }\n    // Fill debug_meta information\n    event.debug_meta = event.debug_meta || {};\n    event.debug_meta.images = event.debug_meta.images || [];\n    const images = event.debug_meta.images;\n    Object.entries(filenameDebugIdMap).forEach(([filename, debug_id])=>{\n        images.push({\n            type: \"sourcemap\",\n            code_file: filename,\n            debug_id\n        });\n    });\n}\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */ function applyIntegrationsMetadata(event, integrationNames) {\n    if (integrationNames.length > 0) {\n        event.sdk = event.sdk || {};\n        event.sdk.integrations = [\n            ...event.sdk.integrations || [],\n            ...integrationNames\n        ];\n    }\n}\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */ function normalizeEvent(event, depth, maxBreadth) {\n    if (!event) {\n        return null;\n    }\n    const normalized = {\n        ...event,\n        ...event.breadcrumbs && {\n            breadcrumbs: event.breadcrumbs.map((b)=>({\n                    ...b,\n                    ...b.data && {\n                        data: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(b.data, depth, maxBreadth)\n                    }\n                }))\n        },\n        ...event.user && {\n            user: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.user, depth, maxBreadth)\n        },\n        ...event.contexts && {\n            contexts: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts, depth, maxBreadth)\n        },\n        ...event.extra && {\n            extra: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.extra, depth, maxBreadth)\n        }\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace && normalized.contexts) {\n        normalized.contexts.trace = event.contexts.trace;\n        // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n        if (event.contexts.trace.data) {\n            normalized.contexts.trace.data = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts.trace.data, depth, maxBreadth);\n        }\n    }\n    // event.spans[].data may contain circular/dangerous data so we need to normalize it\n    if (event.spans) {\n        normalized.spans = event.spans.map((span)=>{\n            return {\n                ...span,\n                ...span.data && {\n                    data: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(span.data, depth, maxBreadth)\n                }\n            };\n        });\n    }\n    // event.contexts.flags (FeatureFlagContext) stores context for our feature\n    // flag integrations. It has a greater nesting depth than our other typed\n    // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n    // to skip this in case of conflicting, user-provided context.\n    if (event.contexts && event.contexts.flags && normalized.contexts) {\n        normalized.contexts.flags = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts.flags, 3, maxBreadth);\n    }\n    return normalized;\n}\nfunction getFinalScope(scope, captureContext) {\n    if (!captureContext) {\n        return scope;\n    }\n    const finalScope = scope ? scope.clone() : new _scope_js__WEBPACK_IMPORTED_MODULE_9__.Scope();\n    finalScope.update(captureContext);\n    return finalScope;\n}\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */ function parseEventHintOrCaptureContext(hint) {\n    if (!hint) {\n        return undefined;\n    }\n    // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n    if (hintIsScopeOrFunction(hint)) {\n        return {\n            captureContext: hint\n        };\n    }\n    if (hintIsScopeContext(hint)) {\n        return {\n            captureContext: hint\n        };\n    }\n    return hint;\n}\nfunction hintIsScopeOrFunction(hint) {\n    return hint instanceof _scope_js__WEBPACK_IMPORTED_MODULE_9__.Scope || typeof hint === \"function\";\n}\nconst captureContextKeys = [\n    \"user\",\n    \"level\",\n    \"extra\",\n    \"contexts\",\n    \"tags\",\n    \"fingerprint\",\n    \"requestSession\",\n    \"propagationContext\"\n];\nfunction hintIsScopeContext(hint) {\n    return Object.keys(hint).some((key)=>captureContextKeys.includes(key));\n}\n //# sourceMappingURL=prepareEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9wcmVwYXJlRXZlbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNEO0FBQ0Q7QUFDUztBQUMxQjtBQUNrQztBQUNBO0FBQ2Q7QUFDSjtBQUNZO0FBQ21CO0FBRW5GOzs7O0NBSUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNELFNBQVNZLGFBQ1BDLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLEtBQUssRUFDTEMsTUFBTSxFQUNOQyxjQUFjO0lBRWQsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBQyxFQUFFQyxzQkFBc0IsSUFBSSxFQUFFLEdBQUdQO0lBQzNELE1BQU1RLFdBQVc7UUFDZixHQUFHUCxLQUFLO1FBQ1JRLFVBQVVSLE1BQU1RLFFBQVEsSUFBSVAsS0FBS08sUUFBUSxJQUFJakIsMkRBQUtBO1FBQ2xEa0IsV0FBV1QsTUFBTVMsU0FBUyxJQUFJZCw0RUFBc0JBO0lBQ3REO0lBQ0EsTUFBTWUsZUFBZVQsS0FBS1MsWUFBWSxJQUFJWCxRQUFRVyxZQUFZLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsSUFBSTtJQUU5RUMsbUJBQW1CUCxVQUFVUjtJQUM3QmdCLDBCQUEwQlIsVUFBVUc7SUFFcEMsSUFBSVAsUUFBUTtRQUNWQSxPQUFPYSxJQUFJLENBQUMsc0JBQXNCaEI7SUFDcEM7SUFFQSxtREFBbUQ7SUFDbkQsSUFBSUEsTUFBTWlCLElBQUksS0FBS0MsV0FBVztRQUM1QkMsY0FBY1osVUFBVVIsUUFBUXFCLFdBQVc7SUFDN0M7SUFFQSw4RUFBOEU7SUFDOUUsNkZBQTZGO0lBQzdGLE1BQU1DLGFBQWFDLGNBQWNwQixPQUFPRCxLQUFLc0IsY0FBYztJQUUzRCxJQUFJdEIsS0FBS3VCLFNBQVMsRUFBRTtRQUNsQmhDLDJFQUFxQkEsQ0FBQ2UsVUFBVU4sS0FBS3VCLFNBQVM7SUFDaEQ7SUFFQSxNQUFNQyx3QkFBd0J0QixTQUFTQSxPQUFPdUIsa0JBQWtCLEtBQUssRUFBRTtJQUV2RSwyREFBMkQ7SUFDM0Qsb0VBQW9FO0lBQ3BFLDRCQUE0QjtJQUM1QixNQUFNQyxPQUFPeEMsaUVBQWNBLEdBQUd5QyxZQUFZO0lBRTFDLElBQUl4QixnQkFBZ0I7UUFDbEIsTUFBTXlCLGdCQUFnQnpCLGVBQWV3QixZQUFZO1FBQ2pEaEMseUVBQWNBLENBQUMrQixNQUFNRTtJQUN2QjtJQUVBLElBQUlSLFlBQVk7UUFDZCxNQUFNUyxpQkFBaUJULFdBQVdPLFlBQVk7UUFDOUNoQyx5RUFBY0EsQ0FBQytCLE1BQU1HO0lBQ3ZCO0lBRUEsTUFBTUMsY0FBYztXQUFLOUIsS0FBSzhCLFdBQVcsSUFBSSxFQUFFO1dBQU1KLEtBQUtJLFdBQVc7S0FBQztJQUN0RSxJQUFJQSxZQUFZQyxNQUFNLEVBQUU7UUFDdEIvQixLQUFLOEIsV0FBVyxHQUFHQTtJQUNyQjtJQUVBbEMsZ0ZBQXFCQSxDQUFDVSxVQUFVb0I7SUFFaEMsTUFBTU0sa0JBQWtCO1dBQ25CUjtRQUNILDBEQUEwRDtXQUN2REUsS0FBS00sZUFBZTtLQUN4QjtJQUVELE1BQU1DLFNBQVM5QywwRUFBcUJBLENBQUM2QyxpQkFBaUIxQixVQUFVTjtJQUVoRSxPQUFPaUMsT0FBT0MsSUFBSSxDQUFDQyxDQUFBQTtRQUNqQixJQUFJQSxLQUFLO1lBQ1AsbUhBQW1IO1lBQ25ILHdHQUF3RztZQUN4RyxpSEFBaUg7WUFDakgsZUFBZTtZQUNmQyxlQUFlRDtRQUNqQjtRQUVBLElBQUksT0FBTy9CLG1CQUFtQixZQUFZQSxpQkFBaUIsR0FBRztZQUM1RCxPQUFPaUMsZUFBZUYsS0FBSy9CLGdCQUFnQkM7UUFDN0M7UUFDQSxPQUFPOEI7SUFDVDtBQUNGO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTdEIsbUJBQW1CZCxLQUFLLEVBQUVELE9BQU87SUFDeEMsTUFBTSxFQUFFd0MsV0FBVyxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsaUJBQWlCLEdBQUcsRUFBRSxHQUFHM0M7SUFFN0QscUVBQXFFO0lBQ3JFLDBEQUEwRDtJQUMxREMsTUFBTXVDLFdBQVcsR0FBR3ZDLE1BQU11QyxXQUFXLElBQUlBLGVBQWVyRCw4REFBbUJBO0lBRTNFLElBQUksQ0FBQ2MsTUFBTXdDLE9BQU8sSUFBSUEsU0FBUztRQUM3QnhDLE1BQU13QyxPQUFPLEdBQUdBO0lBQ2xCO0lBRUEsSUFBSSxDQUFDeEMsTUFBTXlDLElBQUksSUFBSUEsTUFBTTtRQUN2QnpDLE1BQU15QyxJQUFJLEdBQUdBO0lBQ2Y7SUFFQSxJQUFJekMsTUFBTTJDLE9BQU8sRUFBRTtRQUNqQjNDLE1BQU0yQyxPQUFPLEdBQUdqRCxnRUFBUUEsQ0FBQ00sTUFBTTJDLE9BQU8sRUFBRUQ7SUFDMUM7SUFFQSxNQUFNRSxZQUFZNUMsTUFBTTRDLFNBQVMsSUFBSTVDLE1BQU00QyxTQUFTLENBQUNDLE1BQU0sSUFBSTdDLE1BQU00QyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxFQUFFO0lBQ3hGLElBQUlELGFBQWFBLFVBQVVFLEtBQUssRUFBRTtRQUNoQ0YsVUFBVUUsS0FBSyxHQUFHcEQsZ0VBQVFBLENBQUNrRCxVQUFVRSxLQUFLLEVBQUVKO0lBQzlDO0lBRUEsTUFBTUssVUFBVS9DLE1BQU0rQyxPQUFPO0lBQzdCLElBQUlBLFdBQVdBLFFBQVFDLEdBQUcsRUFBRTtRQUMxQkQsUUFBUUMsR0FBRyxHQUFHdEQsZ0VBQVFBLENBQUNxRCxRQUFRQyxHQUFHLEVBQUVOO0lBQ3RDO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVN2QixjQUFjbkIsS0FBSyxFQUFFb0IsV0FBVztJQUN2QyxzQ0FBc0M7SUFDdEMsTUFBTTZCLHFCQUFxQjNELGtGQUF1QkEsQ0FBQzhCO0lBRW5ELElBQUk7UUFDRixvRUFBb0U7UUFDcEVwQixNQUFNNEMsU0FBUyxDQUFDQyxNQUFNLENBQUNLLE9BQU8sQ0FBQ04sQ0FBQUE7WUFDN0Isb0VBQW9FO1lBQ3BFQSxVQUFVTyxVQUFVLENBQUNDLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDRyxDQUFBQTtnQkFDbEMsSUFBSUosc0JBQXNCSSxNQUFNQyxRQUFRLEVBQUU7b0JBQ3hDRCxNQUFNRSxRQUFRLEdBQUdOLGtCQUFrQixDQUFDSSxNQUFNQyxRQUFRLENBQUM7Z0JBQ3JEO1lBQ0Y7UUFDRjtJQUNGLEVBQUUsT0FBT0UsR0FBRztJQUNWLHVIQUF1SDtJQUN6SDtBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTbkIsZUFBZXJDLEtBQUs7SUFDM0Isc0VBQXNFO0lBQ3RFLE1BQU1pRCxxQkFBcUIsQ0FBQztJQUM1QixJQUFJO1FBQ0Ysb0VBQW9FO1FBQ3BFakQsTUFBTTRDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDSyxPQUFPLENBQUNOLENBQUFBO1lBQzdCLG9FQUFvRTtZQUNwRUEsVUFBVU8sVUFBVSxDQUFDQyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csQ0FBQUE7Z0JBQ2xDLElBQUlBLE1BQU1FLFFBQVEsRUFBRTtvQkFDbEIsSUFBSUYsTUFBTUksUUFBUSxFQUFFO3dCQUNsQlIsa0JBQWtCLENBQUNJLE1BQU1JLFFBQVEsQ0FBQyxHQUFHSixNQUFNRSxRQUFRO29CQUNyRCxPQUFPLElBQUlGLE1BQU1DLFFBQVEsRUFBRTt3QkFDekJMLGtCQUFrQixDQUFDSSxNQUFNQyxRQUFRLENBQUMsR0FBR0QsTUFBTUUsUUFBUTtvQkFDckQ7b0JBQ0EsT0FBT0YsTUFBTUUsUUFBUTtnQkFDdkI7WUFDRjtRQUNGO0lBQ0YsRUFBRSxPQUFPQyxHQUFHO0lBQ1YsdUhBQXVIO0lBQ3pIO0lBRUEsSUFBSUUsT0FBT0MsSUFBSSxDQUFDVixvQkFBb0JqQixNQUFNLEtBQUssR0FBRztRQUNoRDtJQUNGO0lBRUEsOEJBQThCO0lBQzlCaEMsTUFBTTRELFVBQVUsR0FBRzVELE1BQU00RCxVQUFVLElBQUksQ0FBQztJQUN4QzVELE1BQU00RCxVQUFVLENBQUNDLE1BQU0sR0FBRzdELE1BQU00RCxVQUFVLENBQUNDLE1BQU0sSUFBSSxFQUFFO0lBQ3ZELE1BQU1BLFNBQVM3RCxNQUFNNEQsVUFBVSxDQUFDQyxNQUFNO0lBQ3RDSCxPQUFPSSxPQUFPLENBQUNiLG9CQUFvQkMsT0FBTyxDQUFDLENBQUMsQ0FBQ0ksVUFBVUMsU0FBUztRQUM5RE0sT0FBT0UsSUFBSSxDQUFDO1lBQ1Y5QyxNQUFNO1lBQ04rQyxXQUFXVjtZQUNYQztRQUNGO0lBQ0Y7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELFNBQVN4QywwQkFBMEJmLEtBQUssRUFBRWlFLGdCQUFnQjtJQUN4RCxJQUFJQSxpQkFBaUJqQyxNQUFNLEdBQUcsR0FBRztRQUMvQmhDLE1BQU1rRSxHQUFHLEdBQUdsRSxNQUFNa0UsR0FBRyxJQUFJLENBQUM7UUFDMUJsRSxNQUFNa0UsR0FBRyxDQUFDeEQsWUFBWSxHQUFHO2VBQUtWLE1BQU1rRSxHQUFHLENBQUN4RCxZQUFZLElBQUksRUFBRTtlQUFNdUQ7U0FBaUI7SUFDbkY7QUFDRjtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVMzQixlQUFldEMsS0FBSyxFQUFFbUUsS0FBSyxFQUFFQyxVQUFVO0lBQzlDLElBQUksQ0FBQ3BFLE9BQU87UUFDVixPQUFPO0lBQ1Q7SUFFQSxNQUFNcUUsYUFBYTtRQUNqQixHQUFHckUsS0FBSztRQUNSLEdBQUlBLE1BQU1zRSxXQUFXLElBQUk7WUFDdkJBLGFBQWF0RSxNQUFNc0UsV0FBVyxDQUFDM0QsR0FBRyxDQUFDNEQsQ0FBQUEsSUFBTTtvQkFDdkMsR0FBR0EsQ0FBQztvQkFDSixHQUFJQSxFQUFFNUMsSUFBSSxJQUFJO3dCQUNaQSxNQUFNbEMsb0VBQVNBLENBQUM4RSxFQUFFNUMsSUFBSSxFQUFFd0MsT0FBT0M7b0JBQ2pDLENBQUM7Z0JBQ0g7UUFDRixDQUFDO1FBQ0QsR0FBSXBFLE1BQU13RSxJQUFJLElBQUk7WUFDaEJBLE1BQU0vRSxvRUFBU0EsQ0FBQ08sTUFBTXdFLElBQUksRUFBRUwsT0FBT0M7UUFDckMsQ0FBQztRQUNELEdBQUlwRSxNQUFNeUUsUUFBUSxJQUFJO1lBQ3BCQSxVQUFVaEYsb0VBQVNBLENBQUNPLE1BQU15RSxRQUFRLEVBQUVOLE9BQU9DO1FBQzdDLENBQUM7UUFDRCxHQUFJcEUsTUFBTTBFLEtBQUssSUFBSTtZQUNqQkEsT0FBT2pGLG9FQUFTQSxDQUFDTyxNQUFNMEUsS0FBSyxFQUFFUCxPQUFPQztRQUN2QyxDQUFDO0lBQ0g7SUFFQSwwRUFBMEU7SUFDMUUsbUVBQW1FO0lBQ25FLHlFQUF5RTtJQUN6RSx1Q0FBdUM7SUFDdkMsMkVBQTJFO0lBQzNFLHlFQUF5RTtJQUN6RSxrREFBa0Q7SUFDbEQsSUFBSXBFLE1BQU15RSxRQUFRLElBQUl6RSxNQUFNeUUsUUFBUSxDQUFDRSxLQUFLLElBQUlOLFdBQVdJLFFBQVEsRUFBRTtRQUNqRUosV0FBV0ksUUFBUSxDQUFDRSxLQUFLLEdBQUczRSxNQUFNeUUsUUFBUSxDQUFDRSxLQUFLO1FBRWhELDJGQUEyRjtRQUMzRixJQUFJM0UsTUFBTXlFLFFBQVEsQ0FBQ0UsS0FBSyxDQUFDaEQsSUFBSSxFQUFFO1lBQzdCMEMsV0FBV0ksUUFBUSxDQUFDRSxLQUFLLENBQUNoRCxJQUFJLEdBQUdsQyxvRUFBU0EsQ0FBQ08sTUFBTXlFLFFBQVEsQ0FBQ0UsS0FBSyxDQUFDaEQsSUFBSSxFQUFFd0MsT0FBT0M7UUFDL0U7SUFDRjtJQUVBLG9GQUFvRjtJQUNwRixJQUFJcEUsTUFBTTRFLEtBQUssRUFBRTtRQUNmUCxXQUFXTyxLQUFLLEdBQUc1RSxNQUFNNEUsS0FBSyxDQUFDakUsR0FBRyxDQUFDa0UsQ0FBQUE7WUFDakMsT0FBTztnQkFDTCxHQUFHQSxJQUFJO2dCQUNQLEdBQUlBLEtBQUtsRCxJQUFJLElBQUk7b0JBQ2ZBLE1BQU1sQyxvRUFBU0EsQ0FBQ29GLEtBQUtsRCxJQUFJLEVBQUV3QyxPQUFPQztnQkFDcEMsQ0FBQztZQUNIO1FBQ0Y7SUFDRjtJQUVBLDJFQUEyRTtJQUMzRSx5RUFBeUU7SUFDekUsNEVBQTRFO0lBQzVFLDhEQUE4RDtJQUM5RCxJQUFJcEUsTUFBTXlFLFFBQVEsSUFBSXpFLE1BQU15RSxRQUFRLENBQUNLLEtBQUssSUFBSVQsV0FBV0ksUUFBUSxFQUFFO1FBQ2pFSixXQUFXSSxRQUFRLENBQUNLLEtBQUssR0FBR3JGLG9FQUFTQSxDQUFDTyxNQUFNeUUsUUFBUSxDQUFDSyxLQUFLLEVBQUUsR0FBR1Y7SUFDakU7SUFFQSxPQUFPQztBQUNUO0FBRUEsU0FBUy9DLGNBQ1BwQixLQUFLLEVBQ0xxQixjQUFjO0lBRWQsSUFBSSxDQUFDQSxnQkFBZ0I7UUFDbkIsT0FBT3JCO0lBQ1Q7SUFFQSxNQUFNbUIsYUFBYW5CLFFBQVFBLE1BQU02RSxLQUFLLEtBQUssSUFBSTFGLDRDQUFLQTtJQUNwRGdDLFdBQVcyRCxNQUFNLENBQUN6RDtJQUNsQixPQUFPRjtBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBUzRELCtCQUNQaEYsSUFBSTtJQUVKLElBQUksQ0FBQ0EsTUFBTTtRQUNULE9BQU9pQjtJQUNUO0lBRUEsZ0dBQWdHO0lBQ2hHLElBQUlnRSxzQkFBc0JqRixPQUFPO1FBQy9CLE9BQU87WUFBRXNCLGdCQUFnQnRCO1FBQUs7SUFDaEM7SUFFQSxJQUFJa0YsbUJBQW1CbEYsT0FBTztRQUM1QixPQUFPO1lBQ0xzQixnQkFBZ0J0QjtRQUNsQjtJQUNGO0lBRUEsT0FBT0E7QUFDVDtBQUVBLFNBQVNpRixzQkFDUGpGLElBQUk7SUFFSixPQUFPQSxnQkFBZ0JaLDRDQUFLQSxJQUFJLE9BQU9ZLFNBQVM7QUFDbEQ7QUFFQSxNQUFNbUYscUJBQXFCO0lBQ3pCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELFNBQVNELG1CQUFtQmxGLElBQUk7SUFDOUIsT0FBT3lELE9BQU9DLElBQUksQ0FBQzFELE1BQU1vRixJQUFJLENBQUNDLENBQUFBLE1BQU9GLG1CQUFtQkcsUUFBUSxDQUFDRDtBQUNuRTtBQUUyRyxDQUMzRyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvcHJlcGFyZUV2ZW50LmpzP2U1NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVGQVVMVF9FTlZJUk9OTUVOVCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBnZXRHbG9iYWxTY29wZSB9IGZyb20gJy4uL2N1cnJlbnRTY29wZXMuanMnO1xuaW1wb3J0IHsgbm90aWZ5RXZlbnRQcm9jZXNzb3JzIH0gZnJvbSAnLi4vZXZlbnRQcm9jZXNzb3JzLmpzJztcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnLi4vc2NvcGUuanMnO1xuaW1wb3J0IHsgZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXAgfSBmcm9tICcuLi91dGlscy1ob2lzdC9kZWJ1Zy1pZHMuanMnO1xuaW1wb3J0IHsgdXVpZDQsIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L21pc2MuanMnO1xuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvbm9ybWFsaXplLmpzJztcbmltcG9ydCB7IHRydW5jYXRlIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvc3RyaW5nLmpzJztcbmltcG9ydCB7IGRhdGVUaW1lc3RhbXBJblNlY29uZHMgfSBmcm9tICcuLi91dGlscy1ob2lzdC90aW1lLmpzJztcbmltcG9ydCB7IG1lcmdlU2NvcGVEYXRhLCBhcHBseVNjb3BlRGF0YVRvRXZlbnQgfSBmcm9tICcuL2FwcGx5U2NvcGVEYXRhVG9FdmVudC5qcyc7XG5cbi8qKlxuICogVGhpcyB0eXBlIG1ha2VzIHN1cmUgdGhhdCB3ZSBnZXQgZWl0aGVyIGEgQ2FwdHVyZUNvbnRleHQsIE9SIGFuIEV2ZW50SGludC5cbiAqIEl0IGRvZXMgbm90IGFsbG93IG1peGluZyB0aGVtLCB3aGljaCBjb3VsZCBsZWFkIHRvIHVuZXhwZWN0ZWQgb3V0Y29tZXMsIGUuZy4gdGhpcyBpcyBkaXNhbGxvd2VkOlxuICogeyB1c2VyOiB7IGlkOiAnMTIzJyB9LCBtZWNoYW5pc206IHsgaGFuZGxlZDogZmFsc2UgfSB9XG4gKi9cblxuLyoqXG4gKiBBZGRzIGNvbW1vbiBpbmZvcm1hdGlvbiB0byBldmVudHMuXG4gKlxuICogVGhlIGluZm9ybWF0aW9uIGluY2x1ZGVzIHJlbGVhc2UgYW5kIGVudmlyb25tZW50IGZyb20gYG9wdGlvbnNgLFxuICogYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQgKGV4dHJhLCB0YWdzIGFuZCB1c2VyKSBmcm9tIHRoZSBzY29wZS5cbiAqXG4gKiBJbmZvcm1hdGlvbiB0aGF0IGlzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgZXZlbnQgaXMgbmV2ZXIgb3ZlcndyaXR0ZW4uIEZvclxuICogbmVzdGVkIG9iamVjdHMsIHN1Y2ggYXMgdGhlIGNvbnRleHQsIGtleXMgYXJlIG1lcmdlZC5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50LlxuICogQHBhcmFtIGhpbnQgTWF5IGNvbnRhaW4gYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZXhjZXB0aW9uLlxuICogQHBhcmFtIHNjb3BlIEEgc2NvcGUgY29udGFpbmluZyBldmVudCBtZXRhZGF0YS5cbiAqIEByZXR1cm5zIEEgbmV3IGV2ZW50IHdpdGggbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gcHJlcGFyZUV2ZW50KFxuICBvcHRpb25zLFxuICBldmVudCxcbiAgaGludCxcbiAgc2NvcGUsXG4gIGNsaWVudCxcbiAgaXNvbGF0aW9uU2NvcGUsXG4pIHtcbiAgY29uc3QgeyBub3JtYWxpemVEZXB0aCA9IDMsIG5vcm1hbGl6ZU1heEJyZWFkdGggPSAxMDAwIH0gPSBvcHRpb25zO1xuICBjb25zdCBwcmVwYXJlZCA9IHtcbiAgICAuLi5ldmVudCxcbiAgICBldmVudF9pZDogZXZlbnQuZXZlbnRfaWQgfHwgaGludC5ldmVudF9pZCB8fCB1dWlkNCgpLFxuICAgIHRpbWVzdGFtcDogZXZlbnQudGltZXN0YW1wIHx8IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSxcbiAgfTtcbiAgY29uc3QgaW50ZWdyYXRpb25zID0gaGludC5pbnRlZ3JhdGlvbnMgfHwgb3B0aW9ucy5pbnRlZ3JhdGlvbnMubWFwKGkgPT4gaS5uYW1lKTtcblxuICBhcHBseUNsaWVudE9wdGlvbnMocHJlcGFyZWQsIG9wdGlvbnMpO1xuICBhcHBseUludGVncmF0aW9uc01ldGFkYXRhKHByZXBhcmVkLCBpbnRlZ3JhdGlvbnMpO1xuXG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQuZW1pdCgnYXBwbHlGcmFtZU1ldGFkYXRhJywgZXZlbnQpO1xuICB9XG5cbiAgLy8gT25seSBwdXQgZGVidWcgSURzIG9udG8gZnJhbWVzIGZvciBlcnJvciBldmVudHMuXG4gIGlmIChldmVudC50eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICBhcHBseURlYnVnSWRzKHByZXBhcmVkLCBvcHRpb25zLnN0YWNrUGFyc2VyKTtcbiAgfVxuXG4gIC8vIElmIHdlIGhhdmUgc2NvcGUgZ2l2ZW4gdG8gdXMsIHVzZSBpdCBhcyB0aGUgYmFzZSBmb3IgZnVydGhlciBtb2RpZmljYXRpb25zLlxuICAvLyBUaGlzIGFsbG93cyB1cyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IGNvcHlpbmcgb2YgZGF0YSBpZiBgY2FwdHVyZUNvbnRleHRgIGlzIG5vdCBwcm92aWRlZC5cbiAgY29uc3QgZmluYWxTY29wZSA9IGdldEZpbmFsU2NvcGUoc2NvcGUsIGhpbnQuY2FwdHVyZUNvbnRleHQpO1xuXG4gIGlmIChoaW50Lm1lY2hhbmlzbSkge1xuICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShwcmVwYXJlZCwgaGludC5tZWNoYW5pc20pO1xuICB9XG5cbiAgY29uc3QgY2xpZW50RXZlbnRQcm9jZXNzb3JzID0gY2xpZW50ID8gY2xpZW50LmdldEV2ZW50UHJvY2Vzc29ycygpIDogW107XG5cbiAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIGxhc3QgdGhpbmcgY2FsbGVkLCBzaW5jZSB3ZSB3YW50IHRoYXRcbiAgLy8ge0BsaW5rIFNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yfSBnZXRzIHRoZSBmaW5pc2hlZCBwcmVwYXJlZCBldmVudC5cbiAgLy8gTWVyZ2Ugc2NvcGUgZGF0YSB0b2dldGhlclxuICBjb25zdCBkYXRhID0gZ2V0R2xvYmFsU2NvcGUoKS5nZXRTY29wZURhdGEoKTtcblxuICBpZiAoaXNvbGF0aW9uU2NvcGUpIHtcbiAgICBjb25zdCBpc29sYXRpb25EYXRhID0gaXNvbGF0aW9uU2NvcGUuZ2V0U2NvcGVEYXRhKCk7XG4gICAgbWVyZ2VTY29wZURhdGEoZGF0YSwgaXNvbGF0aW9uRGF0YSk7XG4gIH1cblxuICBpZiAoZmluYWxTY29wZSkge1xuICAgIGNvbnN0IGZpbmFsU2NvcGVEYXRhID0gZmluYWxTY29wZS5nZXRTY29wZURhdGEoKTtcbiAgICBtZXJnZVNjb3BlRGF0YShkYXRhLCBmaW5hbFNjb3BlRGF0YSk7XG4gIH1cblxuICBjb25zdCBhdHRhY2htZW50cyA9IFsuLi4oaGludC5hdHRhY2htZW50cyB8fCBbXSksIC4uLmRhdGEuYXR0YWNobWVudHNdO1xuICBpZiAoYXR0YWNobWVudHMubGVuZ3RoKSB7XG4gICAgaGludC5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzO1xuICB9XG5cbiAgYXBwbHlTY29wZURhdGFUb0V2ZW50KHByZXBhcmVkLCBkYXRhKTtcblxuICBjb25zdCBldmVudFByb2Nlc3NvcnMgPSBbXG4gICAgLi4uY2xpZW50RXZlbnRQcm9jZXNzb3JzLFxuICAgIC8vIFJ1biBzY29wZSBldmVudCBwcm9jZXNzb3JzIF9hZnRlcl8gYWxsIG90aGVyIHByb2Nlc3NvcnNcbiAgICAuLi5kYXRhLmV2ZW50UHJvY2Vzc29ycyxcbiAgXTtcblxuICBjb25zdCByZXN1bHQgPSBub3RpZnlFdmVudFByb2Nlc3NvcnMoZXZlbnRQcm9jZXNzb3JzLCBwcmVwYXJlZCwgaGludCk7XG5cbiAgcmV0dXJuIHJlc3VsdC50aGVuKGV2dCA9PiB7XG4gICAgaWYgKGV2dCkge1xuICAgICAgLy8gV2UgYXBwbHkgdGhlIGRlYnVnX21ldGEgZmllbGQgb25seSBhZnRlciBhbGwgZXZlbnQgcHJvY2Vzc29ycyBoYXZlIHJhbiwgc28gdGhhdCBpZiBhbnkgZXZlbnQgcHJvY2Vzc29ycyBtb2RpZmllZFxuICAgICAgLy8gZmlsZSBuYW1lcyAoZS5nLnRoZSBSZXdyaXRlRnJhbWVzIGludGVncmF0aW9uKSB0aGUgZmlsZW5hbWUgLT4gZGVidWcgSUQgcmVsYXRpb25zaGlwIGlzbid0IGRlc3Ryb3llZC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBjYXVzZSBhbnkgUElJIGlzc3Vlcywgc2luY2Ugd2UncmUgb25seSBtb3ZpbmcgZGF0YSB0aGF0IGlzIGFscmVhZHkgb24gdGhlIGV2ZW50IGFuZCBub3QgYWRkaW5nXG4gICAgICAvLyBhbnkgbmV3IGRhdGFcbiAgICAgIGFwcGx5RGVidWdNZXRhKGV2dCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBub3JtYWxpemVEZXB0aCA9PT0gJ251bWJlcicgJiYgbm9ybWFsaXplRGVwdGggPiAwKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplRXZlbnQoZXZ0LCBub3JtYWxpemVEZXB0aCwgbm9ybWFsaXplTWF4QnJlYWR0aCk7XG4gICAgfVxuICAgIHJldHVybiBldnQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIEVuaGFuY2VzIGV2ZW50IHVzaW5nIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbi5cbiAqIEl0IHRha2VzIGNhcmUgb2YgYWxsIFwic3RhdGljXCIgdmFsdWVzIGxpa2UgZW52aXJvbm1lbnQsIHJlbGVhc2UgYW5kIGBkaXN0YCxcbiAqIGFzIHdlbGwgYXMgdHJ1bmNhdGluZyBvdmVybHkgbG9uZyB2YWx1ZXMuXG4gKlxuICogT25seSBleHBvcnRlZCBmb3IgdGVzdHMuXG4gKlxuICogQHBhcmFtIGV2ZW50IGV2ZW50IGluc3RhbmNlIHRvIGJlIGVuaGFuY2VkXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q2xpZW50T3B0aW9ucyhldmVudCwgb3B0aW9ucykge1xuICBjb25zdCB7IGVudmlyb25tZW50LCByZWxlYXNlLCBkaXN0LCBtYXhWYWx1ZUxlbmd0aCA9IDI1MCB9ID0gb3B0aW9ucztcblxuICAvLyBlbXB0eSBzdHJpbmdzIGRvIG5vdCBtYWtlIHNlbnNlIGZvciBlbnZpcm9ubWVudCwgcmVsZWFzZSwgYW5kIGRpc3RcbiAgLy8gc28gd2UgaGFuZGxlIHRoZW0gdGhlIHNhbWUgYXMgaWYgdGhleSB3ZXJlIG5vdCBwcm92aWRlZFxuICBldmVudC5lbnZpcm9ubWVudCA9IGV2ZW50LmVudmlyb25tZW50IHx8IGVudmlyb25tZW50IHx8IERFRkFVTFRfRU5WSVJPTk1FTlQ7XG5cbiAgaWYgKCFldmVudC5yZWxlYXNlICYmIHJlbGVhc2UpIHtcbiAgICBldmVudC5yZWxlYXNlID0gcmVsZWFzZTtcbiAgfVxuXG4gIGlmICghZXZlbnQuZGlzdCAmJiBkaXN0KSB7XG4gICAgZXZlbnQuZGlzdCA9IGRpc3Q7XG4gIH1cblxuICBpZiAoZXZlbnQubWVzc2FnZSkge1xuICAgIGV2ZW50Lm1lc3NhZ2UgPSB0cnVuY2F0ZShldmVudC5tZXNzYWdlLCBtYXhWYWx1ZUxlbmd0aCk7XG4gIH1cblxuICBjb25zdCBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICBpZiAoZXhjZXB0aW9uICYmIGV4Y2VwdGlvbi52YWx1ZSkge1xuICAgIGV4Y2VwdGlvbi52YWx1ZSA9IHRydW5jYXRlKGV4Y2VwdGlvbi52YWx1ZSwgbWF4VmFsdWVMZW5ndGgpO1xuICB9XG5cbiAgY29uc3QgcmVxdWVzdCA9IGV2ZW50LnJlcXVlc3Q7XG4gIGlmIChyZXF1ZXN0ICYmIHJlcXVlc3QudXJsKSB7XG4gICAgcmVxdWVzdC51cmwgPSB0cnVuY2F0ZShyZXF1ZXN0LnVybCwgbWF4VmFsdWVMZW5ndGgpO1xuICB9XG59XG5cbi8qKlxuICogUHV0cyBkZWJ1ZyBJRHMgaW50byB0aGUgc3RhY2sgZnJhbWVzIG9mIGFuIGVycm9yIGV2ZW50LlxuICovXG5mdW5jdGlvbiBhcHBseURlYnVnSWRzKGV2ZW50LCBzdGFja1BhcnNlcikge1xuICAvLyBCdWlsZCBhIG1hcCBvZiBmaWxlbmFtZSAtPiBkZWJ1Z19pZFxuICBjb25zdCBmaWxlbmFtZURlYnVnSWRNYXAgPSBnZXRGaWxlbmFtZVRvRGVidWdJZE1hcChzdGFja1BhcnNlcik7XG5cbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMuZm9yRWFjaChleGNlcHRpb24gPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgIGV4Y2VwdGlvbi5zdGFja3RyYWNlLmZyYW1lcy5mb3JFYWNoKGZyYW1lID0+IHtcbiAgICAgICAgaWYgKGZpbGVuYW1lRGVidWdJZE1hcCAmJiBmcmFtZS5maWxlbmFtZSkge1xuICAgICAgICAgIGZyYW1lLmRlYnVnX2lkID0gZmlsZW5hbWVEZWJ1Z0lkTWFwW2ZyYW1lLmZpbGVuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUbyBzYXZlIGJ1bmRsZSBzaXplIHdlJ3JlIGp1c3QgdHJ5IGNhdGNoaW5nIGhlcmUgaW5zdGVhZCBvZiBjaGVja2luZyBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbGwgdGhlIGRpZmZlcmVudCBvYmplY3RzLlxuICB9XG59XG5cbi8qKlxuICogTW92ZXMgZGVidWcgSURzIGZyb20gdGhlIHN0YWNrIGZyYW1lcyBvZiBhbiBlcnJvciBldmVudCBpbnRvIHRoZSBkZWJ1Z19tZXRhIGZpZWxkLlxuICovXG5mdW5jdGlvbiBhcHBseURlYnVnTWV0YShldmVudCkge1xuICAvLyBFeHRyYWN0IGRlYnVnIElEcyBhbmQgZmlsZW5hbWVzIGZyb20gdGhlIHN0YWNrIGZyYW1lcyBvbiB0aGUgZXZlbnQuXG4gIGNvbnN0IGZpbGVuYW1lRGVidWdJZE1hcCA9IHt9O1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKGV4Y2VwdGlvbiA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgZXhjZXB0aW9uLnN0YWNrdHJhY2UuZnJhbWVzLmZvckVhY2goZnJhbWUgPT4ge1xuICAgICAgICBpZiAoZnJhbWUuZGVidWdfaWQpIHtcbiAgICAgICAgICBpZiAoZnJhbWUuYWJzX3BhdGgpIHtcbiAgICAgICAgICAgIGZpbGVuYW1lRGVidWdJZE1hcFtmcmFtZS5hYnNfcGF0aF0gPSBmcmFtZS5kZWJ1Z19pZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZyYW1lLmZpbGVuYW1lKSB7XG4gICAgICAgICAgICBmaWxlbmFtZURlYnVnSWRNYXBbZnJhbWUuZmlsZW5hbWVdID0gZnJhbWUuZGVidWdfaWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBmcmFtZS5kZWJ1Z19pZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUbyBzYXZlIGJ1bmRsZSBzaXplIHdlJ3JlIGp1c3QgdHJ5IGNhdGNoaW5nIGhlcmUgaW5zdGVhZCBvZiBjaGVja2luZyBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbGwgdGhlIGRpZmZlcmVudCBvYmplY3RzLlxuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGZpbGVuYW1lRGVidWdJZE1hcCkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmlsbCBkZWJ1Z19tZXRhIGluZm9ybWF0aW9uXG4gIGV2ZW50LmRlYnVnX21ldGEgPSBldmVudC5kZWJ1Z19tZXRhIHx8IHt9O1xuICBldmVudC5kZWJ1Z19tZXRhLmltYWdlcyA9IGV2ZW50LmRlYnVnX21ldGEuaW1hZ2VzIHx8IFtdO1xuICBjb25zdCBpbWFnZXMgPSBldmVudC5kZWJ1Z19tZXRhLmltYWdlcztcbiAgT2JqZWN0LmVudHJpZXMoZmlsZW5hbWVEZWJ1Z0lkTWFwKS5mb3JFYWNoKChbZmlsZW5hbWUsIGRlYnVnX2lkXSkgPT4ge1xuICAgIGltYWdlcy5wdXNoKHtcbiAgICAgIHR5cGU6ICdzb3VyY2VtYXAnLFxuICAgICAgY29kZV9maWxlOiBmaWxlbmFtZSxcbiAgICAgIGRlYnVnX2lkLFxuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFkZHMgYWxsIHVzZWQgaW50ZWdyYXRpb25zIHRvIHRoZSBTREsgaW5mbyBpbiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRoYXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBhbGwgaW50ZWdyYXRpb25zLlxuICovXG5mdW5jdGlvbiBhcHBseUludGVncmF0aW9uc01ldGFkYXRhKGV2ZW50LCBpbnRlZ3JhdGlvbk5hbWVzKSB7XG4gIGlmIChpbnRlZ3JhdGlvbk5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICBldmVudC5zZGsgPSBldmVudC5zZGsgfHwge307XG4gICAgZXZlbnQuc2RrLmludGVncmF0aW9ucyA9IFsuLi4oZXZlbnQuc2RrLmludGVncmF0aW9ucyB8fCBbXSksIC4uLmludGVncmF0aW9uTmFtZXNdO1xuICB9XG59XG5cbi8qKlxuICogQXBwbGllcyBgbm9ybWFsaXplYCBmdW5jdGlvbiBvbiBuZWNlc3NhcnkgYEV2ZW50YCBhdHRyaWJ1dGVzIHRvIG1ha2UgdGhlbSBzYWZlIGZvciBzZXJpYWxpemF0aW9uLlxuICogTm9ybWFsaXplZCBrZXlzOlxuICogLSBgYnJlYWRjcnVtYnMuZGF0YWBcbiAqIC0gYHVzZXJgXG4gKiAtIGBjb250ZXh0c2BcbiAqIC0gYGV4dHJhYFxuICogQHBhcmFtIGV2ZW50IEV2ZW50XG4gKiBAcmV0dXJucyBOb3JtYWxpemVkIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50KGV2ZW50LCBkZXB0aCwgbWF4QnJlYWR0aCkge1xuICBpZiAoIWV2ZW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgIC4uLmV2ZW50LFxuICAgIC4uLihldmVudC5icmVhZGNydW1icyAmJiB7XG4gICAgICBicmVhZGNydW1iczogZXZlbnQuYnJlYWRjcnVtYnMubWFwKGIgPT4gKHtcbiAgICAgICAgLi4uYixcbiAgICAgICAgLi4uKGIuZGF0YSAmJiB7XG4gICAgICAgICAgZGF0YTogbm9ybWFsaXplKGIuZGF0YSwgZGVwdGgsIG1heEJyZWFkdGgpLFxuICAgICAgICB9KSxcbiAgICAgIH0pKSxcbiAgICB9KSxcbiAgICAuLi4oZXZlbnQudXNlciAmJiB7XG4gICAgICB1c2VyOiBub3JtYWxpemUoZXZlbnQudXNlciwgZGVwdGgsIG1heEJyZWFkdGgpLFxuICAgIH0pLFxuICAgIC4uLihldmVudC5jb250ZXh0cyAmJiB7XG4gICAgICBjb250ZXh0czogbm9ybWFsaXplKGV2ZW50LmNvbnRleHRzLCBkZXB0aCwgbWF4QnJlYWR0aCksXG4gICAgfSksXG4gICAgLi4uKGV2ZW50LmV4dHJhICYmIHtcbiAgICAgIGV4dHJhOiBub3JtYWxpemUoZXZlbnQuZXh0cmEsIGRlcHRoLCBtYXhCcmVhZHRoKSxcbiAgICB9KSxcbiAgfTtcblxuICAvLyBldmVudC5jb250ZXh0cy50cmFjZSBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgYSBUcmFuc2FjdGlvbi4gU2ltaWxhcmx5LFxuICAvLyBldmVudC5zcGFuc1tdIHN0b3JlcyBpbmZvcm1hdGlvbiBhYm91dCBjaGlsZCBTcGFucy4gR2l2ZW4gdGhhdCBhXG4gIC8vIFRyYW5zYWN0aW9uIGlzIGNvbmNlcHR1YWxseSBhIFNwYW4sIG5vcm1hbGl6YXRpb24gc2hvdWxkIGFwcGx5IHRvIGJvdGhcbiAgLy8gVHJhbnNhY3Rpb25zIGFuZCBTcGFucyBjb25zaXN0ZW50bHkuXG4gIC8vIEZvciBub3cgdGhlIGRlY2lzaW9uIGlzIHRvIHNraXAgbm9ybWFsaXphdGlvbiBvZiBUcmFuc2FjdGlvbnMgYW5kIFNwYW5zLFxuICAvLyBzbyB0aGlzIGJsb2NrIG92ZXJ3cml0ZXMgdGhlIG5vcm1hbGl6ZWQgZXZlbnQgdG8gYWRkIGJhY2sgdGhlIG9yaWdpbmFsXG4gIC8vIFRyYW5zYWN0aW9uIGluZm9ybWF0aW9uIHByaW9yIHRvIG5vcm1hbGl6YXRpb24uXG4gIGlmIChldmVudC5jb250ZXh0cyAmJiBldmVudC5jb250ZXh0cy50cmFjZSAmJiBub3JtYWxpemVkLmNvbnRleHRzKSB7XG4gICAgbm9ybWFsaXplZC5jb250ZXh0cy50cmFjZSA9IGV2ZW50LmNvbnRleHRzLnRyYWNlO1xuXG4gICAgLy8gZXZlbnQuY29udGV4dHMudHJhY2UuZGF0YSBtYXkgY29udGFpbiBjaXJjdWxhci9kYW5nZXJvdXMgZGF0YSBzbyB3ZSBuZWVkIHRvIG5vcm1hbGl6ZSBpdFxuICAgIGlmIChldmVudC5jb250ZXh0cy50cmFjZS5kYXRhKSB7XG4gICAgICBub3JtYWxpemVkLmNvbnRleHRzLnRyYWNlLmRhdGEgPSBub3JtYWxpemUoZXZlbnQuY29udGV4dHMudHJhY2UuZGF0YSwgZGVwdGgsIG1heEJyZWFkdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGV2ZW50LnNwYW5zW10uZGF0YSBtYXkgY29udGFpbiBjaXJjdWxhci9kYW5nZXJvdXMgZGF0YSBzbyB3ZSBuZWVkIHRvIG5vcm1hbGl6ZSBpdFxuICBpZiAoZXZlbnQuc3BhbnMpIHtcbiAgICBub3JtYWxpemVkLnNwYW5zID0gZXZlbnQuc3BhbnMubWFwKHNwYW4gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3BhbixcbiAgICAgICAgLi4uKHNwYW4uZGF0YSAmJiB7XG4gICAgICAgICAgZGF0YTogbm9ybWFsaXplKHNwYW4uZGF0YSwgZGVwdGgsIG1heEJyZWFkdGgpLFxuICAgICAgICB9KSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBldmVudC5jb250ZXh0cy5mbGFncyAoRmVhdHVyZUZsYWdDb250ZXh0KSBzdG9yZXMgY29udGV4dCBmb3Igb3VyIGZlYXR1cmVcbiAgLy8gZmxhZyBpbnRlZ3JhdGlvbnMuIEl0IGhhcyBhIGdyZWF0ZXIgbmVzdGluZyBkZXB0aCB0aGFuIG91ciBvdGhlciB0eXBlZFxuICAvLyBDb250ZXh0cywgc28gd2UgcmUtbm9ybWFsaXplIHdpdGggYSBmaXhlZCBkZXB0aCBvZiAzIGhlcmUuIFdlIGRvIG5vdCB3YW50XG4gIC8vIHRvIHNraXAgdGhpcyBpbiBjYXNlIG9mIGNvbmZsaWN0aW5nLCB1c2VyLXByb3ZpZGVkIGNvbnRleHQuXG4gIGlmIChldmVudC5jb250ZXh0cyAmJiBldmVudC5jb250ZXh0cy5mbGFncyAmJiBub3JtYWxpemVkLmNvbnRleHRzKSB7XG4gICAgbm9ybWFsaXplZC5jb250ZXh0cy5mbGFncyA9IG5vcm1hbGl6ZShldmVudC5jb250ZXh0cy5mbGFncywgMywgbWF4QnJlYWR0aCk7XG4gIH1cblxuICByZXR1cm4gbm9ybWFsaXplZDtcbn1cblxuZnVuY3Rpb24gZ2V0RmluYWxTY29wZShcbiAgc2NvcGUsXG4gIGNhcHR1cmVDb250ZXh0LFxuKSB7XG4gIGlmICghY2FwdHVyZUNvbnRleHQpIHtcbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cblxuICBjb25zdCBmaW5hbFNjb3BlID0gc2NvcGUgPyBzY29wZS5jbG9uZSgpIDogbmV3IFNjb3BlKCk7XG4gIGZpbmFsU2NvcGUudXBkYXRlKGNhcHR1cmVDb250ZXh0KTtcbiAgcmV0dXJuIGZpbmFsU2NvcGU7XG59XG5cbi8qKlxuICogUGFyc2UgZWl0aGVyIGFuIGBFdmVudEhpbnRgIGRpcmVjdGx5LCBvciBjb252ZXJ0IGEgYENhcHR1cmVDb250ZXh0YCB0byBhbiBgRXZlbnRIaW50YC5cbiAqIFRoaXMgaXMgdXNlZCB0byBhbGxvdyB0byB1cGRhdGUgbWV0aG9kIHNpZ25hdHVyZXMgdGhhdCB1c2VkIHRvIGFjY2VwdCBhIGBDYXB0dXJlQ29udGV4dGAgYnV0IHNob3VsZCBub3cgYWNjZXB0IGFuIGBFdmVudEhpbnRgLlxuICovXG5mdW5jdGlvbiBwYXJzZUV2ZW50SGludE9yQ2FwdHVyZUNvbnRleHQoXG4gIGhpbnQsXG4pIHtcbiAgaWYgKCFoaW50KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIElmIHlvdSBwYXNzIGEgU2NvcGUgb3IgYCgpID0+IFNjb3BlYCBhcyBDYXB0dXJlQ29udGV4dCwgd2UganVzdCByZXR1cm4gdGhpcyBhcyBjYXB0dXJlQ29udGV4dFxuICBpZiAoaGludElzU2NvcGVPckZ1bmN0aW9uKGhpbnQpKSB7XG4gICAgcmV0dXJuIHsgY2FwdHVyZUNvbnRleHQ6IGhpbnQgfTtcbiAgfVxuXG4gIGlmIChoaW50SXNTY29wZUNvbnRleHQoaGludCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FwdHVyZUNvbnRleHQ6IGhpbnQsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBoaW50O1xufVxuXG5mdW5jdGlvbiBoaW50SXNTY29wZU9yRnVuY3Rpb24oXG4gIGhpbnQsXG4pIHtcbiAgcmV0dXJuIGhpbnQgaW5zdGFuY2VvZiBTY29wZSB8fCB0eXBlb2YgaGludCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuY29uc3QgY2FwdHVyZUNvbnRleHRLZXlzID0gW1xuICAndXNlcicsXG4gICdsZXZlbCcsXG4gICdleHRyYScsXG4gICdjb250ZXh0cycsXG4gICd0YWdzJyxcbiAgJ2ZpbmdlcnByaW50JyxcbiAgJ3JlcXVlc3RTZXNzaW9uJyxcbiAgJ3Byb3BhZ2F0aW9uQ29udGV4dCcsXG5dIDtcblxuZnVuY3Rpb24gaGludElzU2NvcGVDb250ZXh0KGhpbnQpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGhpbnQpLnNvbWUoa2V5ID0+IGNhcHR1cmVDb250ZXh0S2V5cy5pbmNsdWRlcyhrZXkgKSk7XG59XG5cbmV4cG9ydCB7IGFwcGx5Q2xpZW50T3B0aW9ucywgYXBwbHlEZWJ1Z0lkcywgYXBwbHlEZWJ1Z01ldGEsIHBhcnNlRXZlbnRIaW50T3JDYXB0dXJlQ29udGV4dCwgcHJlcGFyZUV2ZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVwYXJlRXZlbnQuanMubWFwXG4iXSwibmFtZXMiOlsiREVGQVVMVF9FTlZJUk9OTUVOVCIsImdldEdsb2JhbFNjb3BlIiwibm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwiU2NvcGUiLCJnZXRGaWxlbmFtZVRvRGVidWdJZE1hcCIsInV1aWQ0IiwiYWRkRXhjZXB0aW9uTWVjaGFuaXNtIiwibm9ybWFsaXplIiwidHJ1bmNhdGUiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwibWVyZ2VTY29wZURhdGEiLCJhcHBseVNjb3BlRGF0YVRvRXZlbnQiLCJwcmVwYXJlRXZlbnQiLCJvcHRpb25zIiwiZXZlbnQiLCJoaW50Iiwic2NvcGUiLCJjbGllbnQiLCJpc29sYXRpb25TY29wZSIsIm5vcm1hbGl6ZURlcHRoIiwibm9ybWFsaXplTWF4QnJlYWR0aCIsInByZXBhcmVkIiwiZXZlbnRfaWQiLCJ0aW1lc3RhbXAiLCJpbnRlZ3JhdGlvbnMiLCJtYXAiLCJpIiwibmFtZSIsImFwcGx5Q2xpZW50T3B0aW9ucyIsImFwcGx5SW50ZWdyYXRpb25zTWV0YWRhdGEiLCJlbWl0IiwidHlwZSIsInVuZGVmaW5lZCIsImFwcGx5RGVidWdJZHMiLCJzdGFja1BhcnNlciIsImZpbmFsU2NvcGUiLCJnZXRGaW5hbFNjb3BlIiwiY2FwdHVyZUNvbnRleHQiLCJtZWNoYW5pc20iLCJjbGllbnRFdmVudFByb2Nlc3NvcnMiLCJnZXRFdmVudFByb2Nlc3NvcnMiLCJkYXRhIiwiZ2V0U2NvcGVEYXRhIiwiaXNvbGF0aW9uRGF0YSIsImZpbmFsU2NvcGVEYXRhIiwiYXR0YWNobWVudHMiLCJsZW5ndGgiLCJldmVudFByb2Nlc3NvcnMiLCJyZXN1bHQiLCJ0aGVuIiwiZXZ0IiwiYXBwbHlEZWJ1Z01ldGEiLCJub3JtYWxpemVFdmVudCIsImVudmlyb25tZW50IiwicmVsZWFzZSIsImRpc3QiLCJtYXhWYWx1ZUxlbmd0aCIsIm1lc3NhZ2UiLCJleGNlcHRpb24iLCJ2YWx1ZXMiLCJ2YWx1ZSIsInJlcXVlc3QiLCJ1cmwiLCJmaWxlbmFtZURlYnVnSWRNYXAiLCJmb3JFYWNoIiwic3RhY2t0cmFjZSIsImZyYW1lcyIsImZyYW1lIiwiZmlsZW5hbWUiLCJkZWJ1Z19pZCIsImUiLCJhYnNfcGF0aCIsIk9iamVjdCIsImtleXMiLCJkZWJ1Z19tZXRhIiwiaW1hZ2VzIiwiZW50cmllcyIsInB1c2giLCJjb2RlX2ZpbGUiLCJpbnRlZ3JhdGlvbk5hbWVzIiwic2RrIiwiZGVwdGgiLCJtYXhCcmVhZHRoIiwibm9ybWFsaXplZCIsImJyZWFkY3J1bWJzIiwiYiIsInVzZXIiLCJjb250ZXh0cyIsImV4dHJhIiwidHJhY2UiLCJzcGFucyIsInNwYW4iLCJmbGFncyIsImNsb25lIiwidXBkYXRlIiwicGFyc2VFdmVudEhpbnRPckNhcHR1cmVDb250ZXh0IiwiaGludElzU2NvcGVPckZ1bmN0aW9uIiwiaGludElzU2NvcGVDb250ZXh0IiwiY2FwdHVyZUNvbnRleHRLZXlzIiwic29tZSIsImtleSIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/prepareEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applySdkMetadata: () => (/* binding */ applySdkMetadata)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/version.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/version.js\");\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */ function applySdkMetadata(options, name, names = [\n    name\n], source = \"npm\") {\n    const metadata = options._metadata || {};\n    if (!metadata.sdk) {\n        metadata.sdk = {\n            name: `sentry.javascript.${name}`,\n            packages: names.map((name)=>({\n                    name: `${source}:@sentry/${name}`,\n                    version: _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION\n                })),\n            version: _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION\n        };\n    }\n    options._metadata = metadata;\n}\n //# sourceMappingURL=sdkMetadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zZGtNZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUV4RDs7Ozs7Ozs7Ozs7O0NBWUMsR0FDRCxTQUFTQyxpQkFBaUJDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQUNEO0NBQUssRUFBRUUsU0FBUyxLQUFLO0lBQ3JFLE1BQU1DLFdBQVdKLFFBQVFLLFNBQVMsSUFBSSxDQUFDO0lBRXZDLElBQUksQ0FBQ0QsU0FBU0UsR0FBRyxFQUFFO1FBQ2pCRixTQUFTRSxHQUFHLEdBQUc7WUFDYkwsTUFBTSxDQUFDLGtCQUFrQixFQUFFQSxLQUFLLENBQUM7WUFDakNNLFVBQVVMLE1BQU1NLEdBQUcsQ0FBQ1AsQ0FBQUEsT0FBUztvQkFDM0JBLE1BQU0sQ0FBQyxFQUFFRSxPQUFPLFNBQVMsRUFBRUYsS0FBSyxDQUFDO29CQUNqQ1EsU0FBU1gsZ0VBQVdBO2dCQUN0QjtZQUNBVyxTQUFTWCxnRUFBV0E7UUFDdEI7SUFDRjtJQUVBRSxRQUFRSyxTQUFTLEdBQUdEO0FBQ3RCO0FBRTRCLENBQzVCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zZGtNZXRhZGF0YS5qcz81YjA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvdmVyc2lvbi5qcyc7XG5cbi8qKlxuICogQSBidWlsZGVyIGZvciB0aGUgU0RLIG1ldGFkYXRhIGluIHRoZSBvcHRpb25zIGZvciB0aGUgU0RLIGluaXRpYWxpemF0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgaWRlbnRpY2FsIHRvIGBidWlsZE1ldGFkYXRhYCBpbiBSZW1peCBhbmQgTmV4dEpTIGFuZCBTdmVsdGVLaXQuXG4gKiBXZSBkb24ndCBleHRyYWN0IGl0IGZvciBidW5kbGUgc2l6ZSByZWFzb25zLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvNzQwNFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvNDE5NlxuICpcbiAqIElmIHlvdSBtYWtlIGNoYW5nZXMgdG8gdGhpcyBmdW5jdGlvbiBjb25zaWRlciB1cGRhdGluZyB0aGUgb3RoZXJzIGFzIHdlbGwuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgU0RLIG9wdGlvbnMgb2JqZWN0IHRoYXQgZ2V0cyBtdXRhdGVkXG4gKiBAcGFyYW0gbmFtZXMgbGlzdCBvZiBwYWNrYWdlIG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U2RrTWV0YWRhdGEob3B0aW9ucywgbmFtZSwgbmFtZXMgPSBbbmFtZV0sIHNvdXJjZSA9ICducG0nKSB7XG4gIGNvbnN0IG1ldGFkYXRhID0gb3B0aW9ucy5fbWV0YWRhdGEgfHwge307XG5cbiAgaWYgKCFtZXRhZGF0YS5zZGspIHtcbiAgICBtZXRhZGF0YS5zZGsgPSB7XG4gICAgICBuYW1lOiBgc2VudHJ5LmphdmFzY3JpcHQuJHtuYW1lfWAsXG4gICAgICBwYWNrYWdlczogbmFtZXMubWFwKG5hbWUgPT4gKHtcbiAgICAgICAgbmFtZTogYCR7c291cmNlfTpAc2VudHJ5LyR7bmFtZX1gLFxuICAgICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICAgIH0pKSxcbiAgICAgIHZlcnNpb246IFNES19WRVJTSU9OLFxuICAgIH07XG4gIH1cblxuICBvcHRpb25zLl9tZXRhZGF0YSA9IG1ldGFkYXRhO1xufVxuXG5leHBvcnQgeyBhcHBseVNka01ldGFkYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGtNZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTREtfVkVSU0lPTiIsImFwcGx5U2RrTWV0YWRhdGEiLCJvcHRpb25zIiwibmFtZSIsIm5hbWVzIiwic291cmNlIiwibWV0YWRhdGEiLCJfbWV0YWRhdGEiLCJzZGsiLCJwYWNrYWdlcyIsIm1hcCIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/spanOnScope.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/spanOnScope.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _getSpanForScope: () => (/* binding */ _getSpanForScope),\n/* harmony export */   _setSpanForScope: () => (/* binding */ _setSpanForScope)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\nconst SCOPE_SPAN_FIELD = \"_sentrySpan\";\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */ function _setSpanForScope(scope, span) {\n    if (span) {\n        (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(scope, SCOPE_SPAN_FIELD, span);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete scope[SCOPE_SPAN_FIELD];\n    }\n}\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */ function _getSpanForScope(scope) {\n    return scope[SCOPE_SPAN_FIELD];\n}\n //# sourceMappingURL=spanOnScope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zcGFuT25TY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7QUFFcEUsTUFBTUMsbUJBQW1CO0FBRXpCOzs7Q0FHQyxHQUNELFNBQVNDLGlCQUFpQkMsS0FBSyxFQUFFQyxJQUFJO0lBQ25DLElBQUlBLE1BQU07UUFDUkosZ0ZBQXdCQSxDQUFDRyxPQUFRRixrQkFBa0JHO0lBQ3JELE9BQU87UUFDTCxnRUFBZ0U7UUFDaEUsT0FBTyxLQUFRLENBQUNILGlCQUFpQjtJQUNuQztBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0ksaUJBQWlCRixLQUFLO0lBQzdCLE9BQU9BLEtBQUssQ0FBQ0YsaUJBQWlCO0FBQ2hDO0FBRThDLENBQzlDLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zcGFuT25TY29wZS5qcz8wNzdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcyc7XG5cbmNvbnN0IFNDT1BFX1NQQU5fRklFTEQgPSAnX3NlbnRyeVNwYW4nO1xuXG4vKipcbiAqIFNldCB0aGUgYWN0aXZlIHNwYW4gZm9yIGEgZ2l2ZW4gc2NvcGUuXG4gKiBOT1RFOiBUaGlzIHNob3VsZCBOT1QgYmUgdXNlZCBkaXJlY3RseSwgYnV0IGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSB0cmFjZSBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBfc2V0U3BhbkZvclNjb3BlKHNjb3BlLCBzcGFuKSB7XG4gIGlmIChzcGFuKSB7XG4gICAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHNjb3BlICwgU0NPUEVfU1BBTl9GSUVMRCwgc3Bhbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgIGRlbGV0ZSAoc2NvcGUgKVtTQ09QRV9TUEFOX0ZJRUxEXTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgYWN0aXZlIHNwYW4gZm9yIGEgZ2l2ZW4gc2NvcGUuXG4gKiBOT1RFOiBUaGlzIHNob3VsZCBOT1QgYmUgdXNlZCBkaXJlY3RseSwgYnV0IGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSB0cmFjZSBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBfZ2V0U3BhbkZvclNjb3BlKHNjb3BlKSB7XG4gIHJldHVybiBzY29wZVtTQ09QRV9TUEFOX0ZJRUxEXTtcbn1cblxuZXhwb3J0IHsgX2dldFNwYW5Gb3JTY29wZSwgX3NldFNwYW5Gb3JTY29wZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhbk9uU2NvcGUuanMubWFwXG4iXSwibmFtZXMiOlsiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiU0NPUEVfU1BBTl9GSUVMRCIsIl9zZXRTcGFuRm9yU2NvcGUiLCJzY29wZSIsInNwYW4iLCJfZ2V0U3BhbkZvclNjb3BlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/build/esm/utils/spanUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/spanUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACE_FLAG_NONE: () => (/* binding */ TRACE_FLAG_NONE),\n/* harmony export */   TRACE_FLAG_SAMPLED: () => (/* binding */ TRACE_FLAG_SAMPLED),\n/* harmony export */   addChildSpanToSpan: () => (/* binding */ addChildSpanToSpan),\n/* harmony export */   getActiveSpan: () => (/* binding */ getActiveSpan),\n/* harmony export */   getRootSpan: () => (/* binding */ getRootSpan),\n/* harmony export */   getSpanDescendants: () => (/* binding */ getSpanDescendants),\n/* harmony export */   getStatusMessage: () => (/* binding */ getStatusMessage),\n/* harmony export */   removeChildSpanFromSpan: () => (/* binding */ removeChildSpanFromSpan),\n/* harmony export */   showSpanDropWarning: () => (/* binding */ showSpanDropWarning),\n/* harmony export */   spanIsSampled: () => (/* binding */ spanIsSampled),\n/* harmony export */   spanTimeInputToSeconds: () => (/* binding */ spanTimeInputToSeconds),\n/* harmony export */   spanToJSON: () => (/* binding */ spanToJSON),\n/* harmony export */   spanToTraceContext: () => (/* binding */ spanToTraceContext),\n/* harmony export */   spanToTraceHeader: () => (/* binding */ spanToTraceHeader),\n/* harmony export */   spanToTransactionTraceContext: () => (/* binding */ spanToTransactionTraceContext),\n/* harmony export */   updateMetricSummaryOnActiveSpan: () => (/* binding */ updateMetricSummaryOnActiveSpan),\n/* harmony export */   updateSpanName: () => (/* binding */ updateSpanName)\n/* harmony export */ });\n/* harmony import */ var _asyncContext_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../asyncContext/index.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../carrier.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../currentScopes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _metrics_metric_summary_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../metrics/metric-summary.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/metrics/metric-summary.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../semanticAttributes.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../tracing/spanstatus.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/time.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _spanOnScope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./spanOnScope.js */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n// todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`\nlet hasShownSpanDropWarning = false;\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */ function spanToTransactionTraceContext(span) {\n    const { spanId: span_id, traceId: trace_id } = span.spanContext();\n    const { data, op, parent_span_id, status, origin } = spanToJSON(span);\n    return (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        parent_span_id,\n        span_id,\n        trace_id,\n        data,\n        op,\n        status,\n        origin\n    });\n}\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */ function spanToTraceContext(span) {\n    const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n    // If the span is remote, we use a random/virtual span as span_id to the trace context,\n    // and the remote span as parent_span_id\n    const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n    const span_id = isRemote ? (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateSpanId)() : spanId;\n    return (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        parent_span_id,\n        span_id,\n        trace_id\n    });\n}\n/**\n * Convert a Span to a Sentry trace header.\n */ function spanToTraceHeader(span) {\n    const { traceId, spanId } = span.spanContext();\n    const sampled = spanIsSampled(span);\n    return (0,_utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_2__.generateSentryTraceHeader)(traceId, spanId, sampled);\n}\n/**\n * Convert a span time input into a timestamp in seconds.\n */ function spanTimeInputToSeconds(input) {\n    if (typeof input === \"number\") {\n        return ensureTimestampInSeconds(input);\n    }\n    if (Array.isArray(input)) {\n        // See {@link HrTime} for the array-based time format\n        return input[0] + input[1] / 1e9;\n    }\n    if (input instanceof Date) {\n        return ensureTimestampInSeconds(input.getTime());\n    }\n    return (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_3__.timestampInSeconds)();\n}\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */ function ensureTimestampInSeconds(timestamp) {\n    const isMs = timestamp > 9999999999;\n    return isMs ? timestamp / 1000 : timestamp;\n}\n/**\n * Convert a span to a JSON representation.\n */ // Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nfunction spanToJSON(span) {\n    if (spanIsSentrySpan(span)) {\n        return span.getSpanJSON();\n    }\n    try {\n        const { spanId: span_id, traceId: trace_id } = span.spanContext();\n        // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n        if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n            const { attributes, startTime, name, endTime, parentSpanId, status } = span;\n            return (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n                span_id,\n                trace_id,\n                data: attributes,\n                description: name,\n                parent_span_id: parentSpanId,\n                start_timestamp: spanTimeInputToSeconds(startTime),\n                // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n                timestamp: spanTimeInputToSeconds(endTime) || undefined,\n                status: getStatusMessage(status),\n                op: attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n                origin: attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n                _metrics_summary: (0,_metrics_metric_summary_js__WEBPACK_IMPORTED_MODULE_5__.getMetricSummaryJsonForSpan)(span)\n            });\n        }\n        // Finally, at least we have `spanContext()`....\n        return {\n            span_id,\n            trace_id\n        };\n    } catch (e) {\n        return {};\n    }\n}\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n    const castSpan = span;\n    return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n/** Exported only for tests. */ /**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */ function spanIsSentrySpan(span) {\n    return typeof span.getSpanJSON === \"function\";\n}\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */ function spanIsSampled(span) {\n    // We align our trace flags with the ones OpenTelemetry use\n    // So we also check for sampled the same way they do.\n    const { traceFlags } = span.spanContext();\n    return traceFlags === TRACE_FLAG_SAMPLED;\n}\n/** Get the status message to use for a JSON representation of a span. */ function getStatusMessage(status) {\n    if (!status || status.code === _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_6__.SPAN_STATUS_UNSET) {\n        return undefined;\n    }\n    if (status.code === _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_6__.SPAN_STATUS_OK) {\n        return \"ok\";\n    }\n    return status.message || \"unknown_error\";\n}\nconst CHILD_SPANS_FIELD = \"_sentryChildSpans\";\nconst ROOT_SPAN_FIELD = \"_sentryRootSpan\";\n/**\n * Adds an opaque child span reference to a span.\n */ function addChildSpanToSpan(span, childSpan) {\n    // We store the root span reference on the child span\n    // We need this for `getRootSpan()` to work\n    const rootSpan = span[ROOT_SPAN_FIELD] || span;\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(childSpan, ROOT_SPAN_FIELD, rootSpan);\n    // We store a list of child spans on the parent span\n    // We need this for `getSpanDescendants()` to work\n    if (span[CHILD_SPANS_FIELD]) {\n        span[CHILD_SPANS_FIELD].add(childSpan);\n    } else {\n        (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(span, CHILD_SPANS_FIELD, new Set([\n            childSpan\n        ]));\n    }\n}\n/** This is only used internally by Idle Spans. */ function removeChildSpanFromSpan(span, childSpan) {\n    if (span[CHILD_SPANS_FIELD]) {\n        span[CHILD_SPANS_FIELD].delete(childSpan);\n    }\n}\n/**\n * Returns an array of the given span and all of its descendants.\n */ function getSpanDescendants(span) {\n    const resultSet = new Set();\n    function addSpanChildren(span) {\n        // This exit condition is required to not infinitely loop in case of a circular dependency.\n        if (resultSet.has(span)) {\n            return;\n        // We want to ignore unsampled spans (e.g. non recording spans)\n        } else if (spanIsSampled(span)) {\n            resultSet.add(span);\n            const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n            for (const childSpan of childSpans){\n                addSpanChildren(childSpan);\n            }\n        }\n    }\n    addSpanChildren(span);\n    return Array.from(resultSet);\n}\n/**\n * Returns the root span of a given span.\n */ function getRootSpan(span) {\n    return span[ROOT_SPAN_FIELD] || span;\n}\n/**\n * Returns the currently active span.\n */ function getActiveSpan() {\n    const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_7__.getMainCarrier)();\n    const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_8__.getAsyncContextStrategy)(carrier);\n    if (acs.getActiveSpan) {\n        return acs.getActiveSpan();\n    }\n    return (0,_spanOnScope_js__WEBPACK_IMPORTED_MODULE_9__._getSpanForScope)((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_10__.getCurrentScope)());\n}\n/**\n * Updates the metric summary on the currently active span\n */ function updateMetricSummaryOnActiveSpan(metricType, sanitizedName, value, unit, tags, bucketKey) {\n    const span = getActiveSpan();\n    if (span) {\n        (0,_metrics_metric_summary_js__WEBPACK_IMPORTED_MODULE_5__.updateMetricSummaryOnSpan)(span, metricType, sanitizedName, value, unit, tags, bucketKey);\n    }\n}\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n *\n * todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`.\n */ function showSpanDropWarning() {\n    if (!hasShownSpanDropWarning) {\n        (0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__.consoleSandbox)(()=>{\n            // eslint-disable-next-line no-console\n            console.warn(\"[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.\");\n        });\n        hasShownSpanDropWarning = true;\n    }\n}\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */ function updateSpanName(span, name) {\n    span.updateName(name);\n    span.setAttributes({\n        [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: \"custom\",\n        [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name\n    });\n}\n //# sourceMappingURL=spanUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/build/esm/utils/spanUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/react/build/esm/sdk.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/react/build/esm/sdk.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/browser */ \"(ssr)/./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/browser */ \"(ssr)/./node_modules/@sentry/browser/build/npm/esm/sdk.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n/**\n * Inits the React SDK\n */ function init(options) {\n    const opts = {\n        ...options\n    };\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.applySdkMetadata)(opts, \"react\");\n    (0,_sentry_browser__WEBPACK_IMPORTED_MODULE_2__.setContext)(\"react\", {\n        version: react__WEBPACK_IMPORTED_MODULE_0__.version\n    });\n    return (0,_sentry_browser__WEBPACK_IMPORTED_MODULE_3__.init)(opts);\n}\n //# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9yZWFjdC9idWlsZC9lc20vc2RrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZEO0FBQ2I7QUFDaEI7QUFFaEM7O0NBRUMsR0FDRCxTQUFTQyxLQUFLSSxPQUFPO0lBQ25CLE1BQU1DLE9BQU87UUFDWCxHQUFHRCxPQUFPO0lBQ1o7SUFFQUYsOERBQWdCQSxDQUFDRyxNQUFNO0lBQ3ZCTiwyREFBVUEsQ0FBQyxTQUFTO1FBQUVJLE9BQU9BLDRDQUFBQTtJQUFDO0lBQzlCLE9BQU9GLHFEQUFNQSxDQUFDSTtBQUNoQjtBQUVnQixDQUNoQiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvcmVhY3QvYnVpbGQvZXNtL3Nkay5qcz9mNTkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNldENvbnRleHQsIGluaXQgYXMgaW5pdCQxIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCB7IGFwcGx5U2RrTWV0YWRhdGEgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbml0cyB0aGUgUmVhY3QgU0RLXG4gKi9cbmZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICBjb25zdCBvcHRzID0ge1xuICAgIC4uLm9wdGlvbnMsXG4gIH07XG5cbiAgYXBwbHlTZGtNZXRhZGF0YShvcHRzLCAncmVhY3QnKTtcbiAgc2V0Q29udGV4dCgncmVhY3QnLCB7IHZlcnNpb24gfSk7XG4gIHJldHVybiBpbml0JDEob3B0cyk7XG59XG5cbmV4cG9ydCB7IGluaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNkay5qcy5tYXBcbiJdLCJuYW1lcyI6WyJzZXRDb250ZXh0IiwiaW5pdCIsImluaXQkMSIsImFwcGx5U2RrTWV0YWRhdGEiLCJ2ZXJzaW9uIiwib3B0aW9ucyIsIm9wdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/react/build/esm/sdk.js\n");

/***/ })

};
;