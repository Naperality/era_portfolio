"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_sanity_client_dist__chunks-es_stegaEncodeSourceMap_js"],{

/***/ "(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: function() { return /* binding */ encodeIntoResult; },\n/* harmony export */   stegaEncodeSourceMap: function() { return /* binding */ stegaEncodeSourceMap; },\n/* harmony export */   stegaEncodeSourceMap$1: function() { return /* binding */ stegaEncodeSourceMap$1; }\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) throw new Error(\"Path is not an array\");\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") return \"\".concat(target, \"[\").concat(segment, \"]\");\n        if (segmentType === \"string\") return \"\".concat(target).concat(i === 0 ? \"\" : \".\").concat(segment);\n        if (isKeySegment(segment) && segment._key) return \"\".concat(target, '[_key==\"').concat(segment._key, '\"]');\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return \"\".concat(target, \"[\").concat(from, \":\").concat(to, \"]\");\n        }\n        throw new Error(\"Unsupported path segment `\".concat(JSON.stringify(segment), \"`\"));\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": \"\\n\",\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return \"$\".concat(path.map((segment)=>typeof segment == \"string\" ? \"['\".concat(segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>ESCAPE[match]), \"']\") : typeof segment == \"number\" ? \"[\".concat(segment, \"]\") : segment._key !== \"\" ? \"[?(@._key=='\".concat(segment._key.replace(/['\\\\]/g, (match)=>ESCAPE[match]), \"')]\") : \"[\".concat(segment._index, \"]\")).join(\"\"));\n}\nfunction parseJsonPath(path) {\n    const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    for(; (match = parseRe.exec(path)) !== null;){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>UNESCAPE[m]);\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>UNESCAPE[m]);\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._key !== \"\") return {\n            _key: segment._key\n        };\n        if (segment._index !== -1) return segment._index;\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._index !== -1) return segment._index;\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!(csm === null || csm === void 0 ? void 0 : csm.mappings)) return;\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) return {\n        mapping: csm.mappings[resultMappingPath],\n        matchedPath: resultMappingPath,\n        pathSuffix: \"\"\n    };\n    const mappings = Object.entries(csm.mappings).filter((param)=>{\n        let [key] = param;\n        return resultMappingPath.startsWith(key);\n    }).sort((param, param1)=>{\n        let [key1] = param, [key2] = param1;\n        return key2.length - key1.length;\n    });\n    if (mappings.length == 0) return;\n    const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction walkMap(value, mappingFn) {\n    let path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    if (isArray(value)) return value.map((v, idx)=>{\n        if ((0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.isRecord)(v)) {\n            const _key = v._key;\n            if (typeof _key == \"string\") return walkMap(v, mappingFn, path.concat({\n                _key,\n                _index: idx\n            }));\n        }\n        return walkMap(v, mappingFn, path.concat(idx));\n    });\n    if ((0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.isRecord)(value)) {\n        if (value._type === \"block\" || value._type === \"span\") {\n            const result = {\n                ...value\n            };\n            return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n        }\n        return Object.fromEntries(Object.entries(value).map((param)=>{\n            let [k, v] = param;\n            return [\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ];\n        }));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value != \"string\") return value;\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) return value;\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\") return value;\n        const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst DRAFTS_FOLDER = \"drafts\", VERSION_FOLDER = \"versions\", PATH_SEPARATOR = \".\", DRAFTS_PREFIX = \"\".concat(DRAFTS_FOLDER).concat(PATH_SEPARATOR), VERSION_PREFIX = \"\".concat(VERSION_FOLDER).concat(PATH_SEPARATOR);\nfunction isDraftId(id) {\n    return id.startsWith(DRAFTS_PREFIX);\n}\nfunction isVersionId(id) {\n    return id.startsWith(VERSION_PREFIX);\n}\nfunction isPublishedId(id) {\n    return !isDraftId(id) && !isVersionId(id);\n}\nfunction getVersionFromId(id) {\n    if (!isVersionId(id)) return;\n    const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR);\n    return versionId;\n}\nfunction getPublishedId(id) {\n    return isVersionId(id) ? id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) : isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path, projectId, dataset } = options;\n    if (!baseUrl) throw new Error(\"baseUrl is required\");\n    if (!path) throw new Error(\"path is required\");\n    if (!_id) throw new Error(\"id is required\");\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) throw new Error(\"baseUrl must not end with a slash\");\n    const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    if (workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), isPublishedId(_id)) searchParams.set(\"perspective\", \"published\");\n    else if (isVersionId(_id)) {\n        const versionId = getVersionFromId(_id);\n        searchParams.set(\"perspective\", versionId);\n    }\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    workspace && segments.push(workspace);\n    const routerParams = [\n        \"mode=presentation\",\n        \"id=\".concat(id),\n        \"type=\".concat(type),\n        \"path=\".concat(encodeURIComponent(stringifiedPath))\n    ];\n    return tool && routerParams.push(\"tool=\".concat(tool)), segments.push(\"intent\", \"edit\", \"\".concat(routerParams.join(\";\"), \"?\").concat(searchParams)), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n    return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? {\n        baseUrl\n    } : {\n        ...studioUrl,\n        baseUrl\n    };\n}\nconst filterDefault = (param)=>{\n    let { sourcePath, resultPath, value } = param;\n    if (isValidDate(value) || isValidURL(value)) return !1;\n    const endPath = sourcePath.at(-1);\n    return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\") || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"textTheme\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch (e) {\n        return !1;\n    }\n    return !0;\n}\nfunction hasTypeLike(path) {\n    return path.some((segment)=>typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    var _logger_error;\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        var _logger_error1;\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        throw logger === null || logger === void 0 ? void 0 : (_logger_error1 = logger.error) === null || _logger_error1 === void 0 ? void 0 : _logger_error1.call(logger, \"[@sanity/client]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    if (!resultSourceMap) return logger === null || logger === void 0 ? void 0 : (_logger_error = logger.error) === null || _logger_error === void 0 ? void 0 : _logger_error.call(logger, \"[@sanity/client]: Missing Content Source Map from response body\", {\n        result,\n        resultSourceMap,\n        config\n    }), result;\n    if (!config.studioUrl) {\n        var _logger_error2;\n        const msg = \"config.studioUrl must be defined\";\n        throw logger === null || logger === void 0 ? void 0 : (_logger_error2 = logger.error) === null || _logger_error2 === void 0 ? void 0 : _logger_error2.call(logger, \"[@sanity/client]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    }, resultWithStega = encodeIntoResult(result, resultSourceMap, (param)=>{\n        let { sourcePath, sourceDocument, resultPath, value } = param;\n        if ((typeof filter == \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            value\n        })) === !1) return logger && report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n            length: value.length\n        }), value;\n        logger && report.encoded.push({\n            path: prettyPathForLogging(sourcePath),\n            value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n            length: value.length\n        });\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n        return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath,\n                ...!config.omitCrossDatasetReferenceData && {\n                    dataset,\n                    projectId\n                }\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        !1);\n    });\n    if (logger) {\n        var _this, _logger_log, _logger_log1, _this1, _logger_groupEnd;\n        const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n        if ((isSkipping || isEncoding) && ((_this = (logger === null || logger === void 0 ? void 0 : logger.groupCollapsed) || logger.log) === null || _this === void 0 ? void 0 : _this(\"[@sanity/client]: Encoding source map into result\"), (_logger_log = logger.log) === null || _logger_log === void 0 ? void 0 : _logger_log.call(logger, \"[@sanity/client]: Paths encoded: \".concat(report.encoded.length, \", skipped: \").concat(report.skipped.length))), report.encoded.length > 0 && (logger === null || logger === void 0 ? void 0 : (_logger_log1 = logger.log) === null || _logger_log1 === void 0 ? void 0 : _logger_log1.call(logger, \"[@sanity/client]: Table of encoded paths\"), (_this1 = (logger === null || logger === void 0 ? void 0 : logger.table) || logger.log) === null || _this1 === void 0 ? void 0 : _this1(report.encoded)), report.skipped.length > 0) {\n            var _logger_log2;\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped)skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            logger === null || logger === void 0 ? void 0 : (_logger_log2 = logger.log) === null || _logger_log2 === void 0 ? void 0 : _logger_log2.call(logger, \"[@sanity/client]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        (isSkipping || isEncoding) && (logger === null || logger === void 0 ? void 0 : (_logger_groupEnd = logger.groupEnd) === null || _logger_groupEnd === void 0 ? void 0 : _logger_groupEnd.call(logger));\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    stegaEncodeSourceMap\n});\n //# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n"));

/***/ })

}]);